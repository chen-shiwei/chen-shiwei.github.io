{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1. \u4e13\u6ce8\u4ee5\u4e0b\u6280\u672f \u8bed\u8a00 Golang PHP Python \u524d\u7aef Vue \u5bb9\u5668 Kubernetes Docker \u6570\u636e\u5e93 Mysql MongoDB \u4e2d\u95f4\u4ef6 Elasticsearch Kafka \u5fae\u670d\u52a1 go-micro \u94fe\u8def\u8ffd\u8e2a opentelemetry opentracing Jaeger 2. \u4e00\u8d77\u5237\u9898 https://leetcode-cn.com/u/chen-shiwei/","title":"Home"},{"location":"#1","text":"\u8bed\u8a00 Golang PHP Python \u524d\u7aef Vue \u5bb9\u5668 Kubernetes Docker \u6570\u636e\u5e93 Mysql MongoDB \u4e2d\u95f4\u4ef6 Elasticsearch Kafka \u5fae\u670d\u52a1 go-micro \u94fe\u8def\u8ffd\u8e2a opentelemetry opentracing Jaeger","title":"1. \u4e13\u6ce8\u4ee5\u4e0b\u6280\u672f"},{"location":"#2","text":"https://leetcode-cn.com/u/chen-shiwei/","title":"2. \u4e00\u8d77\u5237\u9898"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E8%A7%A3%E6%9E%90/","text":"TCP \u89e3\u6790 1. TCP \u5934\u90e8\u5b57\u6bb5 \u5934\u90e8\u5b57\u6bb5\u4f5c\u7528 \u6e90\u7aef\u53e3\u53f7 \u76ee\u6807\u7aef\u53e3\u53f7 \u627e\u5230\u5e94\u7528\u8fdb\u7a0b \u5e8f\u5217\u53f7 \u89e3\u51b3\u7f51\u7edc\u5305\u4e71\u5e8f\u7684\u95ee\u9898 \u786e\u8ba4\u5e94\u7b54\u53f7 \u7528\u6765\u89e3\u51b3\u4e22\u5305\u7684\u95ee\u9898 \u9996\u90e8\u957f\u5ea6 \u83b7\u53d6tcp\u5305\u5934\u7684\u5927\u5c0f\uff0c\u5e76\u8ba1\u7b97TCP\u5305\u6570\u636e\u7684\u957f\u5ea6 \u63a7\u5236\u4f4d SYN \u4e3a1\u65f6\uff0c\u8868\u793a\u5efa\u7acb\u94fe\u63a5\uff1b\u5e76\u5728\u5e8f\u5217\u53f7\u5b57\u6bb5\u586b\u5145\u521d\u59cb\u503c ACK \u4e3a1\u65f6\uff0c\u8868\u793a\u786e\u8ba4\u5e94\u7b54 FIN \u4e3a1\u65f6\uff0c\u8868\u793a\u4e4b\u540e\u4e0d\u4f1a\u518d\u6709\u6570\u636e\u53d1\u9001\uff0c\u5e76\u5e0c\u671b\u65ad\u5f00\u8fde\u63a5 RST \u4e3a1\u65f6\uff0c\u8868\u793aTCP\u8fde\u63a5\u5f02\u5e38\u5f3a\u5236\u65ad\u5f00\u8fde\u63a5 \u7a97\u53e3\u5927\u5c0f \u8868\u793atcp \u8fde\u63a5\u7684\u6ed1\u52a8\u7a97\u53e3\u53ef\u63a5\u53d7\u6570\u636e\u7a97\u53e3\u5927\u5c0f \u6821\u9a8c\u548c \u7d27\u6025\u6307\u9488 2. \u4ec0\u4e48\u662fTCP \u56db\u5143\u7ec4\uff1f \u5305\u62ec\u4ee5\u4e0b\u4fe1\u606f \u6e90IP\u5730\u5740\uff08\u5728IP\u5305\u4e2d\uff09 \u76ee\u6807IP\u5730\u5740\uff08\u5728IP\u5305\u4e2d\uff09 \u6e90\u7aef\u53e3\u53f7\uff08\u5728TCP\u5305\u5934\u4e2d\uff09 \u76ee\u6807\u7aef\u53e3\u53f7\uff08\u5728TCP\u5305\u5934\u4e2d\uff09 \u901a\u8fc7TCP\u56db\u5143\u7ec4\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2aTCP\u8fde\u63a5\u3002 3. \u4ec0\u4e48\u662fTCP\u7684\u53ef\u9760\u6027\u4f20\u8f93\uff1f \u5e8f\u5217\u53f7 \u786e\u8ba4\u5e94\u7b54\u673a\u5236 \u91cd\u53d1\u673a\u5236 TCP\u8fde\u63a5\u7ba1\u7406 \u7a97\u53e3\u63a7\u5236 4. TCP\u7684\u5e8f\u5217\u53f7\u600e\u4e48\u751f\u6210\u7684\uff1f \u7b2c\u4e00\u4e2a\u5305\u662f\u968f\u673a\u6570(\u5efa\u7acb\u8fde\u63a5\u7684\u65f6\u5019) \u5982\u679c\u5f53\u524d\u5305payload\u6570\u636e\u4e3a100\u5b57\u8282\uff0c\u62ff\u4e0b\u4e00\u4e2a\u5305seq\u4e3a101 5. TCP \u4e09\u6b21\u63e1\u624b\u548c\u56db\u6b21\u6325\u624b \u4e09\u6b21\u63e1\u624b \u56db\u6b21\u6325\u624b","title":"TCP\u89e3\u6790"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E8%A7%A3%E6%9E%90/#tcp","text":"","title":"TCP \u89e3\u6790"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E8%A7%A3%E6%9E%90/#1-tcp","text":"","title":"1. TCP \u5934\u90e8\u5b57\u6bb5"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E8%A7%A3%E6%9E%90/#_1","text":"\u6e90\u7aef\u53e3\u53f7 \u76ee\u6807\u7aef\u53e3\u53f7 \u627e\u5230\u5e94\u7528\u8fdb\u7a0b \u5e8f\u5217\u53f7 \u89e3\u51b3\u7f51\u7edc\u5305\u4e71\u5e8f\u7684\u95ee\u9898 \u786e\u8ba4\u5e94\u7b54\u53f7 \u7528\u6765\u89e3\u51b3\u4e22\u5305\u7684\u95ee\u9898 \u9996\u90e8\u957f\u5ea6 \u83b7\u53d6tcp\u5305\u5934\u7684\u5927\u5c0f\uff0c\u5e76\u8ba1\u7b97TCP\u5305\u6570\u636e\u7684\u957f\u5ea6 \u63a7\u5236\u4f4d SYN \u4e3a1\u65f6\uff0c\u8868\u793a\u5efa\u7acb\u94fe\u63a5\uff1b\u5e76\u5728\u5e8f\u5217\u53f7\u5b57\u6bb5\u586b\u5145\u521d\u59cb\u503c ACK \u4e3a1\u65f6\uff0c\u8868\u793a\u786e\u8ba4\u5e94\u7b54 FIN \u4e3a1\u65f6\uff0c\u8868\u793a\u4e4b\u540e\u4e0d\u4f1a\u518d\u6709\u6570\u636e\u53d1\u9001\uff0c\u5e76\u5e0c\u671b\u65ad\u5f00\u8fde\u63a5 RST \u4e3a1\u65f6\uff0c\u8868\u793aTCP\u8fde\u63a5\u5f02\u5e38\u5f3a\u5236\u65ad\u5f00\u8fde\u63a5 \u7a97\u53e3\u5927\u5c0f \u8868\u793atcp \u8fde\u63a5\u7684\u6ed1\u52a8\u7a97\u53e3\u53ef\u63a5\u53d7\u6570\u636e\u7a97\u53e3\u5927\u5c0f \u6821\u9a8c\u548c \u7d27\u6025\u6307\u9488","title":"\u5934\u90e8\u5b57\u6bb5\u4f5c\u7528"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E8%A7%A3%E6%9E%90/#2-tcp","text":"\u5305\u62ec\u4ee5\u4e0b\u4fe1\u606f \u6e90IP\u5730\u5740\uff08\u5728IP\u5305\u4e2d\uff09 \u76ee\u6807IP\u5730\u5740\uff08\u5728IP\u5305\u4e2d\uff09 \u6e90\u7aef\u53e3\u53f7\uff08\u5728TCP\u5305\u5934\u4e2d\uff09 \u76ee\u6807\u7aef\u53e3\u53f7\uff08\u5728TCP\u5305\u5934\u4e2d\uff09 \u901a\u8fc7TCP\u56db\u5143\u7ec4\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2aTCP\u8fde\u63a5\u3002","title":"2. \u4ec0\u4e48\u662fTCP \u56db\u5143\u7ec4\uff1f"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E8%A7%A3%E6%9E%90/#3-tcp","text":"\u5e8f\u5217\u53f7 \u786e\u8ba4\u5e94\u7b54\u673a\u5236 \u91cd\u53d1\u673a\u5236 TCP\u8fde\u63a5\u7ba1\u7406 \u7a97\u53e3\u63a7\u5236","title":"3. \u4ec0\u4e48\u662fTCP\u7684\u53ef\u9760\u6027\u4f20\u8f93\uff1f"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E8%A7%A3%E6%9E%90/#4-tcp","text":"\u7b2c\u4e00\u4e2a\u5305\u662f\u968f\u673a\u6570(\u5efa\u7acb\u8fde\u63a5\u7684\u65f6\u5019) \u5982\u679c\u5f53\u524d\u5305payload\u6570\u636e\u4e3a100\u5b57\u8282\uff0c\u62ff\u4e0b\u4e00\u4e2a\u5305seq\u4e3a101","title":"4. TCP\u7684\u5e8f\u5217\u53f7\u600e\u4e48\u751f\u6210\u7684\uff1f"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E8%A7%A3%E6%9E%90/#5-tcp","text":"","title":"5. TCP \u4e09\u6b21\u63e1\u624b\u548c\u56db\u6b21\u6325\u624b"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E8%A7%A3%E6%9E%90/#_2","text":"","title":"\u4e09\u6b21\u63e1\u624b"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E8%A7%A3%E6%9E%90/#_3","text":"","title":"\u56db\u6b21\u6325\u624b"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc\u5206\u5c42\u6a21\u578b TCP/IP OSI \u4e94\u5c42 \u5e94\u7528\u5c42 \u5e94\u7528\u5c42 \u5e94\u7528\u5c42 \u8868\u793a\u5c42 \u4f1a\u8bdd\u5c42 \u4f20\u8f93\u5c42 \u4f20\u8f93\u5c42 \u4f20\u8f93\u5c42 \u7f51\u7edc\u5c42 \u7f51\u7edc\u5c42 \u7f51\u7edc\u5c42 \u7f51\u7edc\u63a5\u53e3\u5c42 \u6570\u636e\u94fe\u8def\u5c42 \u6570\u636e\u94fe\u8def\u5c42 \u7269\u7406\u94fe\u8def\u5c42 \u7269\u7406\u94fe\u8def\u5c42","title":"\u7f51\u7edc\u5206\u5c42\u6a21\u578b"},{"location":"post/CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/#_1","text":"TCP/IP OSI \u4e94\u5c42 \u5e94\u7528\u5c42 \u5e94\u7528\u5c42 \u5e94\u7528\u5c42 \u8868\u793a\u5c42 \u4f1a\u8bdd\u5c42 \u4f20\u8f93\u5c42 \u4f20\u8f93\u5c42 \u4f20\u8f93\u5c42 \u7f51\u7edc\u5c42 \u7f51\u7edc\u5c42 \u7f51\u7edc\u5c42 \u7f51\u7edc\u63a5\u53e3\u5c42 \u6570\u636e\u94fe\u8def\u5c42 \u6570\u636e\u94fe\u8def\u5c42 \u7269\u7406\u94fe\u8def\u5c42 \u7269\u7406\u94fe\u8def\u5c42","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u5206\u5c42\u6a21\u578b"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/","text":"go sheduler \u8c03\u5ea6\u65b9\u5f0f \u91c7\u7528\u534f\u4f5c\u5f0f\u8c03\u5ea6\uff08\u7531\u7528\u6237\u8bbe\u7f6e\u8c03\u5ea6\u70b9\u79f0\u4e3a\u534f\u4f5c\u5f0f\u8c03\u5ea6\uff09\uff0c\u4f46\u662f\u4e5f\u4f1a\u6709\u540e\u53f0\u7ebf\u7a0b\u6301\u7eed\u76d1\u63a7\uff0c\u8d85\u8fc710ms\uff0c\u4f1a\u8bbe\u7f6egoroutine\u62a2\u5360\u6807\u5fd7\u4f4d\uff0c\u8c03\u5ea6\u5668\u4f1a\u5904\u7406\u3002 // scheduler \u7684\u9677\u9631 // \u542f\u52a8\u548c\u673a\u5668\u7684 CPU \u6838\u5fc3\u6570\u76f8\u7b49\u7684 goroutine\uff0c\u6bcf\u4e2a goroutine \u90fd\u4f1a\u6267\u884c\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002 // \u521b\u5efa\u5b8c\u8fd9\u4e9b goroutines \u540e\uff0cmain \u51fd\u6570\u91cc\u6267\u884c\u4e00\u6761 time.Sleep(time.Second) \u8bed\u53e5\u3002Go scheduler \u56e0\u4e3a\u8d85\u8fc710ms\u628a\u4e3b goroutine \u88ab\u8c03\u5ea6\u8d70\u3002\u5148\u524d\u521b\u5efa\u7684 threads \u4e2a goroutines\uff0c\u521a\u597d\u628a M \u548c P \u90fd\u5360\u6ee1\u4e86\u3002 // \u5728\u8fd9\u4e9b goroutine \u5185\u90e8\uff0c\u6ca1\u6709\u8c03\u7528\u4e00\u4e9b\u8bf8\u5982 channel\uff0ctime.sleep \u8fd9\u4e9b\u4f1a\u5f15\u53d1\u8c03\u5ea6\u5668\u5de5\u4f5c\u7684\u4e8b\u60c5\u3002\u53ea\u80fd\u4efb\u7531\u8fd9\u4e9b\u65e0\u9650\u5faa\u73af\u6267\u884c\u4e0b\u53bb\u4e86 // main goroutine \u6ca1\u6709\u673a\u4f1a\u8c03\u5ea6\u6267\u884c func main() { var x int threads := runtime.GOMAXPROCS(0) for i := 0; i < threads; i++ { go func() { for { x++ } }() } time.Sleep(time.Second) fmt.Println(\"x =\", x) } go\u7a0b\u5e8f\u6267\u884c\u7ec4\u6210 GoProgram(\u7528\u6237\u4ee3\u7801\u7a0b\u5e8f) Runtime(\u8fd0\u884c\u65f6) \u62e6\u622a\u7528\u6237\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u5e2e\u52a9\u8fdb\u884c\u8c03\u5ea6\u548c\u5783\u573e\u56de\u6536 GMP\u4e09\u4e2a\u57fa\u672c\u7ed3\u6784\u4f53 G goroutine M work process,\u5185\u6838\u7ebf\u7a0b\u3002 M\u9700\u8981\u83b7\u5f97P\u624d\u80fd\u8fd0\u884cG. 3. P Runable(\u53ef\u8fd0\u884c)\u7684Goroutine\u961f\u5217\u3002\u6570\u91cf\u7b49\u4e8e\u7cfb\u7edfCPU\u903b\u8f91\u6838\u5fc3\u6570\uff0c\u5982\u679c\u8d85\u9891CPU\uff0c\u903b\u8f91\u6838\u5fc3\u6570\u548c\u7269\u7406\u6838\u5fc3\u6570\u4e0d\u4e00\u81f4 \u4e3a\u4ec0\u4e48Go\u65e9\u671f\u6ca1\u6709P\uff1f \u56e0\u4e3a\u5f53\u65f6\u6ca1\u6709P\uff0cM\u9700\u8981\u4ece\u5168\u5c40Goroutine\u961f\u5217\u83b7\u53d6\u53ef\u8fd0\u884cG\uff0c\u9632\u6b62\u5e76\u53d1\u6570\u636e\u7ade\u4e89\uff0c\u9700\u8981\u52a0\u5168\u5c40\u9501\u3002\u5e76\u53d1\u91cf\u5927\u65f6\uff0c\u9501\u6210\u4e3a\u4e86\u74f6\u9888\u3002P\u7ef4\u62a4\u672c\u5730Goroutine\u961f\u5217\uff0c\u89e3\u51b3\u5168\u5c40\u9501\u95ee\u9898\u3002 Gosheduler \u7684\u6838\u5fc3\u601d\u60f3 reuse threads \u9650\u5236\u540c\u65f6\uff08\u4e0d\u5305\u542b\u963b\u585e\uff09\u8fd0\u884c\u7684\u7ebf\u7a0b\u6570\u91cf\u4e3aN\uff0cN\u7b49\u4e8e\u7cfb\u7edfCPU\u6838\u5fc3\u6570 \u7ebf\u7a0b\u79c1\u6709\u7684\u53ef\u8fd0\u884c\u961f\u91cc(runqueues)\uff0c\u53ef\u4ee5\u4ece\u5176\u4ed6\u7ebf\u7a0bstealing goroutine(\u5077\u53d6\u5176\u4ed6P\u7684Goroutine)\u6765\u8fd0\u884c\uff0c\u7ebf\u7a0b\u963b\u585e\u540e\u53ef\u4ee5\u5c06 runqueues \u4f20\u7ed9\u5176\u4ed6\u7ebf\u7a0b\u3002 \u4ec0\u4e48\u662f\u5168\u5c40\u53ef\u8fd0\u884c\u961f\u5217\u3001\u672c\u5730\u53ef\u8fd0\u884c\u961f\u5217\uff1f \u5168\u5c40\u53ef\u8fd0\u884c\u961f\u5217 \u653e\u5728\u5168\u5c40\u53ef\u8fd0\u884c\u961f\u5217\u662f\u56e0\u4e3a\u91cc\u9762\u7684Goroutine\u6682\u65f6\u65e0\u6cd5\u5206\u914dP - \u672c\u5730\u53ef\u8fd0\u884c\u961f\u5217 Runable(\u53ef\u8fd0\u884c)\u7684Goroutine\u961f\u5217\u3002\u6570\u91cf\u7b49\u4e8e\u7cfb\u7edfCPU\u903b\u8f91\u6838\u5fc3\u6570\uff0c\u5982\u679c\u8d85\u9891CPU\uff0c\u903b\u8f91\u6838\u5fc3\u6570\u548c\u7269\u7406\u6838\u5fc3\u6570\u4e0d\u4e00\u81f4 M\u5bfb\u627eGoroutine \u5148\u4eceP\u672c\u5730\u961f\u5217\u627e Goroutine \u5168\u5c40\u961f\u5217 \u5982\u679c\u5168\u5c40\u961f\u5217\u6709goroutine\uff0c\u6839\u636e\u5168\u5c40\u53ef\u8fd0\u884cgoroutine\u7684\u961f\u5217\u957f\u5ea6\u548c P \u7684\u603b\u6570\u8ba1\u7b97\u6bcf\u4e2aP\u53ef\u5206\u5230\u7684\u5e73\u5747\u6570\u91cf\u3002 3. \u4ece\u5176\u4ed6P\u961f\u5217\u5077\uff0c\u53d6\u534a\u3002 4. \u5982\u679c\u627e\u4e0d\u5230\uff0c\u8fdb\u53bb\u4f11\u7720\u72b6\u6001\u3002 goroutine \u8c03\u5ea6\u65f6\u673a \u4f7f\u7528go \u5173\u952e\u5b57 \u65b0\u4efb\u52a1 goroutine GC \u7cfb\u7edf\u8c03\u7528 \u5f53 goroutine \u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u4f1a\u963b\u585e M\uff0c\u6240\u4ee5\u5b83\u4f1a\u88ab\u8c03\u5ea6\u8d70\uff0c\u540c\u65f6\u4e00\u4e2a\u65b0\u7684 goroutine \u4f1a\u88ab\u8c03\u5ea6\u4e0a\u6765 4. \u5185\u5b58\u540c\u6b65\u8bbf\u95ee atomic\u3001channel\u3001mutex \u7b49\u64cd\u4f5c\u4f7fgoroutine\u963b\u585e\uff0c\u4f1a\u88ab\u8c03\u5ea6\u8d70 Goroutine\u7684\u72b6\u6001 Waiting \u7b49\u5f85\u8c03\u5ea6 Runnable \u5c31\u7eea\u72b6\u6001(\u7b49\u5f85M\u6267\u884c) Executing \u6b63\u5728\u6267\u884c(\u5728 M \u4e0a\u6267\u884c\u6307\u4ee4) Goroutine \u548c\u7ebf\u7a0b\u7684\u533a\u522b \u5185\u5b58\u5360\u7528 Goroutine \u6808\u5185\u5b58\u6d88\u80172kb\u3001\u6808\u7a7a\u95f4\u4e0d\u591f\u7528\u53ef\u52a8\u6001\u6269\u5bb9 thread \u6d88\u80171MB\u6808\u5185\u5b58 \u521b\u5efa\u548c\u9500\u6bc1 Goroutine\u7531Goruntime\u8d1f\u8d23\u7ba1\u7406\uff0c\u7528\u6237\u7ea7\u522b Thread \u521b\u5efa\u548c\u9500\u6bc1\u9700\u8981\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3001\u5185\u6838\u7ea7\u522b\uff08\u53ef\u4ee5\u7528\u7ebf\u7a0b\u6c60\u89e3\u51b3\uff09 \u5207\u6362 Goroutine \u53ea\u9700\u4fdd\u5b58\u4e09\u4e2a\u5bc4\u5b58\u5668 Program counter\u3001strack pointer\u3001BP\uff0c\u5207\u6362\u65f6\u95f4\u4e3a200ns Thread \u4fdd\u5b58\u7cfb\u7edf\u7ea7\u522b\u5bc4\u5b58\u5668\u3001\u5207\u6362\u65f6\u95f4\u4e3a1000-1500ns","title":"GMP\u8c03\u5ea6\u5668"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#go-sheduler","text":"","title":"go sheduler"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#_1","text":"\u91c7\u7528\u534f\u4f5c\u5f0f\u8c03\u5ea6\uff08\u7531\u7528\u6237\u8bbe\u7f6e\u8c03\u5ea6\u70b9\u79f0\u4e3a\u534f\u4f5c\u5f0f\u8c03\u5ea6\uff09\uff0c\u4f46\u662f\u4e5f\u4f1a\u6709\u540e\u53f0\u7ebf\u7a0b\u6301\u7eed\u76d1\u63a7\uff0c\u8d85\u8fc710ms\uff0c\u4f1a\u8bbe\u7f6egoroutine\u62a2\u5360\u6807\u5fd7\u4f4d\uff0c\u8c03\u5ea6\u5668\u4f1a\u5904\u7406\u3002 // scheduler \u7684\u9677\u9631 // \u542f\u52a8\u548c\u673a\u5668\u7684 CPU \u6838\u5fc3\u6570\u76f8\u7b49\u7684 goroutine\uff0c\u6bcf\u4e2a goroutine \u90fd\u4f1a\u6267\u884c\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002 // \u521b\u5efa\u5b8c\u8fd9\u4e9b goroutines \u540e\uff0cmain \u51fd\u6570\u91cc\u6267\u884c\u4e00\u6761 time.Sleep(time.Second) \u8bed\u53e5\u3002Go scheduler \u56e0\u4e3a\u8d85\u8fc710ms\u628a\u4e3b goroutine \u88ab\u8c03\u5ea6\u8d70\u3002\u5148\u524d\u521b\u5efa\u7684 threads \u4e2a goroutines\uff0c\u521a\u597d\u628a M \u548c P \u90fd\u5360\u6ee1\u4e86\u3002 // \u5728\u8fd9\u4e9b goroutine \u5185\u90e8\uff0c\u6ca1\u6709\u8c03\u7528\u4e00\u4e9b\u8bf8\u5982 channel\uff0ctime.sleep \u8fd9\u4e9b\u4f1a\u5f15\u53d1\u8c03\u5ea6\u5668\u5de5\u4f5c\u7684\u4e8b\u60c5\u3002\u53ea\u80fd\u4efb\u7531\u8fd9\u4e9b\u65e0\u9650\u5faa\u73af\u6267\u884c\u4e0b\u53bb\u4e86 // main goroutine \u6ca1\u6709\u673a\u4f1a\u8c03\u5ea6\u6267\u884c func main() { var x int threads := runtime.GOMAXPROCS(0) for i := 0; i < threads; i++ { go func() { for { x++ } }() } time.Sleep(time.Second) fmt.Println(\"x =\", x) }","title":"\u8c03\u5ea6\u65b9\u5f0f"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#go","text":"GoProgram(\u7528\u6237\u4ee3\u7801\u7a0b\u5e8f) Runtime(\u8fd0\u884c\u65f6) \u62e6\u622a\u7528\u6237\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u5e2e\u52a9\u8fdb\u884c\u8c03\u5ea6\u548c\u5783\u573e\u56de\u6536","title":"go\u7a0b\u5e8f\u6267\u884c\u7ec4\u6210"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#gmp","text":"G goroutine M work process,\u5185\u6838\u7ebf\u7a0b\u3002 M\u9700\u8981\u83b7\u5f97P\u624d\u80fd\u8fd0\u884cG. 3. P Runable(\u53ef\u8fd0\u884c)\u7684Goroutine\u961f\u5217\u3002\u6570\u91cf\u7b49\u4e8e\u7cfb\u7edfCPU\u903b\u8f91\u6838\u5fc3\u6570\uff0c\u5982\u679c\u8d85\u9891CPU\uff0c\u903b\u8f91\u6838\u5fc3\u6570\u548c\u7269\u7406\u6838\u5fc3\u6570\u4e0d\u4e00\u81f4","title":"GMP\u4e09\u4e2a\u57fa\u672c\u7ed3\u6784\u4f53"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#gop","text":"\u56e0\u4e3a\u5f53\u65f6\u6ca1\u6709P\uff0cM\u9700\u8981\u4ece\u5168\u5c40Goroutine\u961f\u5217\u83b7\u53d6\u53ef\u8fd0\u884cG\uff0c\u9632\u6b62\u5e76\u53d1\u6570\u636e\u7ade\u4e89\uff0c\u9700\u8981\u52a0\u5168\u5c40\u9501\u3002\u5e76\u53d1\u91cf\u5927\u65f6\uff0c\u9501\u6210\u4e3a\u4e86\u74f6\u9888\u3002P\u7ef4\u62a4\u672c\u5730Goroutine\u961f\u5217\uff0c\u89e3\u51b3\u5168\u5c40\u9501\u95ee\u9898\u3002","title":"\u4e3a\u4ec0\u4e48Go\u65e9\u671f\u6ca1\u6709P\uff1f"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#gosheduler","text":"reuse threads \u9650\u5236\u540c\u65f6\uff08\u4e0d\u5305\u542b\u963b\u585e\uff09\u8fd0\u884c\u7684\u7ebf\u7a0b\u6570\u91cf\u4e3aN\uff0cN\u7b49\u4e8e\u7cfb\u7edfCPU\u6838\u5fc3\u6570 \u7ebf\u7a0b\u79c1\u6709\u7684\u53ef\u8fd0\u884c\u961f\u91cc(runqueues)\uff0c\u53ef\u4ee5\u4ece\u5176\u4ed6\u7ebf\u7a0bstealing goroutine(\u5077\u53d6\u5176\u4ed6P\u7684Goroutine)\u6765\u8fd0\u884c\uff0c\u7ebf\u7a0b\u963b\u585e\u540e\u53ef\u4ee5\u5c06 runqueues \u4f20\u7ed9\u5176\u4ed6\u7ebf\u7a0b\u3002","title":"Gosheduler \u7684\u6838\u5fc3\u601d\u60f3"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#_2","text":"\u5168\u5c40\u53ef\u8fd0\u884c\u961f\u5217 \u653e\u5728\u5168\u5c40\u53ef\u8fd0\u884c\u961f\u5217\u662f\u56e0\u4e3a\u91cc\u9762\u7684Goroutine\u6682\u65f6\u65e0\u6cd5\u5206\u914dP - \u672c\u5730\u53ef\u8fd0\u884c\u961f\u5217 Runable(\u53ef\u8fd0\u884c)\u7684Goroutine\u961f\u5217\u3002\u6570\u91cf\u7b49\u4e8e\u7cfb\u7edfCPU\u903b\u8f91\u6838\u5fc3\u6570\uff0c\u5982\u679c\u8d85\u9891CPU\uff0c\u903b\u8f91\u6838\u5fc3\u6570\u548c\u7269\u7406\u6838\u5fc3\u6570\u4e0d\u4e00\u81f4","title":"\u4ec0\u4e48\u662f\u5168\u5c40\u53ef\u8fd0\u884c\u961f\u5217\u3001\u672c\u5730\u53ef\u8fd0\u884c\u961f\u5217\uff1f"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#mgoroutine","text":"\u5148\u4eceP\u672c\u5730\u961f\u5217\u627e Goroutine \u5168\u5c40\u961f\u5217 \u5982\u679c\u5168\u5c40\u961f\u5217\u6709goroutine\uff0c\u6839\u636e\u5168\u5c40\u53ef\u8fd0\u884cgoroutine\u7684\u961f\u5217\u957f\u5ea6\u548c P \u7684\u603b\u6570\u8ba1\u7b97\u6bcf\u4e2aP\u53ef\u5206\u5230\u7684\u5e73\u5747\u6570\u91cf\u3002 3. \u4ece\u5176\u4ed6P\u961f\u5217\u5077\uff0c\u53d6\u534a\u3002 4. \u5982\u679c\u627e\u4e0d\u5230\uff0c\u8fdb\u53bb\u4f11\u7720\u72b6\u6001\u3002","title":"M\u5bfb\u627eGoroutine"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#goroutine","text":"\u4f7f\u7528go \u5173\u952e\u5b57 \u65b0\u4efb\u52a1 goroutine GC \u7cfb\u7edf\u8c03\u7528 \u5f53 goroutine \u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u4f1a\u963b\u585e M\uff0c\u6240\u4ee5\u5b83\u4f1a\u88ab\u8c03\u5ea6\u8d70\uff0c\u540c\u65f6\u4e00\u4e2a\u65b0\u7684 goroutine \u4f1a\u88ab\u8c03\u5ea6\u4e0a\u6765 4. \u5185\u5b58\u540c\u6b65\u8bbf\u95ee atomic\u3001channel\u3001mutex \u7b49\u64cd\u4f5c\u4f7fgoroutine\u963b\u585e\uff0c\u4f1a\u88ab\u8c03\u5ea6\u8d70","title":"goroutine \u8c03\u5ea6\u65f6\u673a"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#goroutine_1","text":"Waiting \u7b49\u5f85\u8c03\u5ea6 Runnable \u5c31\u7eea\u72b6\u6001(\u7b49\u5f85M\u6267\u884c) Executing \u6b63\u5728\u6267\u884c(\u5728 M \u4e0a\u6267\u884c\u6307\u4ee4)","title":"Goroutine\u7684\u72b6\u6001"},{"location":"post/golang/runtime/GMP%E8%B0%83%E5%BA%A6%E5%99%A8/#goroutine_2","text":"\u5185\u5b58\u5360\u7528 Goroutine \u6808\u5185\u5b58\u6d88\u80172kb\u3001\u6808\u7a7a\u95f4\u4e0d\u591f\u7528\u53ef\u52a8\u6001\u6269\u5bb9 thread \u6d88\u80171MB\u6808\u5185\u5b58 \u521b\u5efa\u548c\u9500\u6bc1 Goroutine\u7531Goruntime\u8d1f\u8d23\u7ba1\u7406\uff0c\u7528\u6237\u7ea7\u522b Thread \u521b\u5efa\u548c\u9500\u6bc1\u9700\u8981\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3001\u5185\u6838\u7ea7\u522b\uff08\u53ef\u4ee5\u7528\u7ebf\u7a0b\u6c60\u89e3\u51b3\uff09 \u5207\u6362 Goroutine \u53ea\u9700\u4fdd\u5b58\u4e09\u4e2a\u5bc4\u5b58\u5668 Program counter\u3001strack pointer\u3001BP\uff0c\u5207\u6362\u65f6\u95f4\u4e3a200ns Thread \u4fdd\u5b58\u7cfb\u7edf\u7ea7\u522b\u5bc4\u5b58\u5668\u3001\u5207\u6362\u65f6\u95f4\u4e3a1000-1500ns","title":"Goroutine \u548c\u7ebf\u7a0b\u7684\u533a\u522b"},{"location":"post/golang/runtime/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/","text":"\u4e00.\u7f16\u8bd1\u9884\u5907\u77e5\u8bc6 \u62bd\u8c61\u8bed\u6cd5\u6811 \u6e90\u4ee3\u7801\u8bed\u6cd5\u7ed3\u6784 \u7684\u4e00\u79cd\u62bd\u8c61\u8868\u793a \u6811\u72b6 \u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u6e90\u4ee3\u7801\u7684\u4e00\u4e2a\u5143\u7d20 \u6bcf\u4e00\u4e2a\u5b50\u6811\u90fd\u8868\u793a\u8bed\u6cd5\u5143\u7d20 \u9759\u6001\u5355\u8d4b\u503c \u4e2d\u95f4\u4ee3\u7801\u7684\u7279\u6027 \u5bf9\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\uff0c\u51cf\u5c11\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4 go x := 1 x := 2 y := x // \u4f18\u5316\u540e x_1 := 1 x_2 := 2 y_1 := x_2 \u6307\u4ee4\u96c6 \u4e0d\u540c\u673a\u5668\u4e0d\u540c\u7684\u6307\u4ee4\u96c6(x86_64\u3001arm) \u4e8c.\u7f16\u8bd1\u539f\u7406 go \u7f16\u8bd1\u5668\u6e90\u4ee3\u7801 src/cmd/compile \u7f16\u8bd1\u5668\u7684\u7ec4\u6210 \u524d\u7aef \u8bcd\u6cd5\u5206\u6790 \u8bed\u6cd5\u5206\u6790 \u7c7b\u578b\u68c0\u67e5 \u4e2d\u95f4\u4ee3\u7801 \u540e\u7aef \u76ee\u6807\u4ee3\u7801\u751f\u6210(\u7ffb\u8bd1\u6210\u76ee\u6807\u673a\u5668\u7801) \u76ee\u6807\u4ee3\u7801\u4f18\u5316 \u7f16\u8bd1\u5668\u7684\u9636\u6bb5 \u8bcd\u6cd5\u548c\u8bed\u6cd5\u5206\u6790(\u4ece\u6e90\u6587\u4ef6\u5230\u8bed\u6cd5\u6811) \u8bcd\u6cd5\u5206\u6790\uff1a\u89e3\u6790\u4ee3\u7801\u6e90\u6587\u4ef6\u3001\u5c06\u5b57\u7b26\u4e32\u5e8f\u5217\u8f6c\u6362\u6210Token\u5e8f\u5217\uff08\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u8bcd\u6cd5\u89e3\u6790\u5668lexer\uff09 \u8bed\u6cd5\u5206\u6790\uff1a\u5c06token\u5e8f\u5217\u6309\u7167\u7f16\u7a0b\u5b9a\u4e49\u597d\u7684\u6587\u6cd5(Grammar)\u81ea\u4e0b\u800c\u4e0a\u6216\u8005\u81ea\u4e0a\u800c\u4e0b\u7684\u89c4\u7ea6\u5c06\u6bcf\u4e00\u4e2ago\u6e90\u6587\u4ef6\u5f52\u7eb3\u4e3aSourceFile\uff1b\u8bed\u6cd5\u5206\u6790\u4f1a\u628a Token \u5e8f\u5217\u8f6c\u6362\u6210\u6709\u610f\u4e49\u7684\u7ed3\u6784\u4f53 go // Token \u5e8f\u5217 package, json, import, (, io, ), \u2026 // SourceFile SourceFile = PackageClause \";\" { ImportDecl \";\" } { TopLevelDecl \";\" } . go \"json.go\": SourceFile { PackageName: \"json\", ImportDecl: []Import{ \"io\", }, TopLevelDecl: ... } \u7c7b\u578b\u68c0\u67e5\u548cAST\u8f6c\u6362 \u5bf9\u8bed\u6cd5\u6811\u4e2d\u7684\u5b9a\u4e49\u548c\u4f7f\u7528\u7c7b\u578b\u8fdb\u884c\u68c0\u67e5 \u5e38\u91cf\u3001\u7c7b\u578b\u3001\u548c\u51fd\u6570\u540d\u53ca\u7c7b\u578b \u53d8\u91cf\u7684\u8d4b\u503c\u548c\u521d\u59cb\u5316 \u51fd\u6570\u548c\u95ed\u5305\u7684\u4e3b\u4f53 \u54c8\u5e0c\u952e\u503c\u7684\u7c7b\u578b \u5bfc\u5165\u51fd\u6570\u4f53 \u5916\u90e8\u7684\u58f0\u660e Go\u76f8\u5173 \u66ff\u6362 make \u5173\u952e\u5b57\u4e3a\u5185\u5efa\u51fd\u6570 runtime.makeslice\u3001runtime.makechan \u7ed3\u6784\u4f53\u5bf9\u63a5\u53e3\u7684\u5b9e\u73b0 \u901a\u7528SSA\u751f\u6210 \u673a\u5668\u4ee3\u7801\u751f\u6210 \u4e0d\u540c\u7c7b\u578b\u7684cpu\u5206\u522b\u4f7f\u7528\u4e0d\u540c\u5305\u751f\u6210\u673a\u5668\u7801 amd64\u3001arm\u3001arm64\u3001mips\u3001mips64\u3001ppc64\u3001s390x\u3001x86 \u548c wasm Go \u8bed\u8a00\u7684\u7f16\u8bd1\u5668 src/cmd/compile/internal/gc/main.go \u76f8\u5173\u6587\u7ae0 https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-compile-intro/","title":"\u7f16\u8bd1\u539f\u7406"},{"location":"post/golang/runtime/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/#_1","text":"\u62bd\u8c61\u8bed\u6cd5\u6811 \u6e90\u4ee3\u7801\u8bed\u6cd5\u7ed3\u6784 \u7684\u4e00\u79cd\u62bd\u8c61\u8868\u793a \u6811\u72b6 \u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u6e90\u4ee3\u7801\u7684\u4e00\u4e2a\u5143\u7d20 \u6bcf\u4e00\u4e2a\u5b50\u6811\u90fd\u8868\u793a\u8bed\u6cd5\u5143\u7d20 \u9759\u6001\u5355\u8d4b\u503c \u4e2d\u95f4\u4ee3\u7801\u7684\u7279\u6027 \u5bf9\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\uff0c\u51cf\u5c11\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4 go x := 1 x := 2 y := x // \u4f18\u5316\u540e x_1 := 1 x_2 := 2 y_1 := x_2 \u6307\u4ee4\u96c6 \u4e0d\u540c\u673a\u5668\u4e0d\u540c\u7684\u6307\u4ee4\u96c6(x86_64\u3001arm)","title":"\u4e00.\u7f16\u8bd1\u9884\u5907\u77e5\u8bc6"},{"location":"post/golang/runtime/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/#_2","text":"go \u7f16\u8bd1\u5668\u6e90\u4ee3\u7801 src/cmd/compile \u7f16\u8bd1\u5668\u7684\u7ec4\u6210 \u524d\u7aef \u8bcd\u6cd5\u5206\u6790 \u8bed\u6cd5\u5206\u6790 \u7c7b\u578b\u68c0\u67e5 \u4e2d\u95f4\u4ee3\u7801 \u540e\u7aef \u76ee\u6807\u4ee3\u7801\u751f\u6210(\u7ffb\u8bd1\u6210\u76ee\u6807\u673a\u5668\u7801) \u76ee\u6807\u4ee3\u7801\u4f18\u5316 \u7f16\u8bd1\u5668\u7684\u9636\u6bb5 \u8bcd\u6cd5\u548c\u8bed\u6cd5\u5206\u6790(\u4ece\u6e90\u6587\u4ef6\u5230\u8bed\u6cd5\u6811) \u8bcd\u6cd5\u5206\u6790\uff1a\u89e3\u6790\u4ee3\u7801\u6e90\u6587\u4ef6\u3001\u5c06\u5b57\u7b26\u4e32\u5e8f\u5217\u8f6c\u6362\u6210Token\u5e8f\u5217\uff08\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u8bcd\u6cd5\u89e3\u6790\u5668lexer\uff09 \u8bed\u6cd5\u5206\u6790\uff1a\u5c06token\u5e8f\u5217\u6309\u7167\u7f16\u7a0b\u5b9a\u4e49\u597d\u7684\u6587\u6cd5(Grammar)\u81ea\u4e0b\u800c\u4e0a\u6216\u8005\u81ea\u4e0a\u800c\u4e0b\u7684\u89c4\u7ea6\u5c06\u6bcf\u4e00\u4e2ago\u6e90\u6587\u4ef6\u5f52\u7eb3\u4e3aSourceFile\uff1b\u8bed\u6cd5\u5206\u6790\u4f1a\u628a Token \u5e8f\u5217\u8f6c\u6362\u6210\u6709\u610f\u4e49\u7684\u7ed3\u6784\u4f53 go // Token \u5e8f\u5217 package, json, import, (, io, ), \u2026 // SourceFile SourceFile = PackageClause \";\" { ImportDecl \";\" } { TopLevelDecl \";\" } . go \"json.go\": SourceFile { PackageName: \"json\", ImportDecl: []Import{ \"io\", }, TopLevelDecl: ... } \u7c7b\u578b\u68c0\u67e5\u548cAST\u8f6c\u6362 \u5bf9\u8bed\u6cd5\u6811\u4e2d\u7684\u5b9a\u4e49\u548c\u4f7f\u7528\u7c7b\u578b\u8fdb\u884c\u68c0\u67e5 \u5e38\u91cf\u3001\u7c7b\u578b\u3001\u548c\u51fd\u6570\u540d\u53ca\u7c7b\u578b \u53d8\u91cf\u7684\u8d4b\u503c\u548c\u521d\u59cb\u5316 \u51fd\u6570\u548c\u95ed\u5305\u7684\u4e3b\u4f53 \u54c8\u5e0c\u952e\u503c\u7684\u7c7b\u578b \u5bfc\u5165\u51fd\u6570\u4f53 \u5916\u90e8\u7684\u58f0\u660e Go\u76f8\u5173 \u66ff\u6362 make \u5173\u952e\u5b57\u4e3a\u5185\u5efa\u51fd\u6570 runtime.makeslice\u3001runtime.makechan \u7ed3\u6784\u4f53\u5bf9\u63a5\u53e3\u7684\u5b9e\u73b0 \u901a\u7528SSA\u751f\u6210 \u673a\u5668\u4ee3\u7801\u751f\u6210 \u4e0d\u540c\u7c7b\u578b\u7684cpu\u5206\u522b\u4f7f\u7528\u4e0d\u540c\u5305\u751f\u6210\u673a\u5668\u7801 amd64\u3001arm\u3001arm64\u3001mips\u3001mips64\u3001ppc64\u3001s390x\u3001x86 \u548c wasm Go \u8bed\u8a00\u7684\u7f16\u8bd1\u5668 src/cmd/compile/internal/gc/main.go","title":"\u4e8c.\u7f16\u8bd1\u539f\u7406"},{"location":"post/golang/runtime/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/#_3","text":"https://draveness.me/golang/docs/part1-prerequisite/ch02-compile/golang-compile-intro/","title":"\u76f8\u5173\u6587\u7ae0"},{"location":"post/golang/runtime/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/","text":"\u4ec0\u4e48\u662f\u9003\u9038\u5206\u6790\uff1f \u5728\u7f16\u8bd1\u539f\u7406\u4e2d\uff0c\u5206\u6790\u6307\u9488\u7684\u52a8\u6001\u8303\u56f4\u7684\u65b9\u6cd5\u79f0\u4e3a\u9003\u9038\u5206\u6790\u3002 \u6307\u9488\u7684\u52a8\u6001\u8303\u56f4\uff1a \u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\u88ab\u591a\u4e2a\u65b9\u6cd5\u6216\u7ebf\u7a0b\u5f15\u7528\u65f6\uff0c\u79f0\u6307\u9488\u53d1\u751f\u4e86\u9003\u9038 Go\u8bed\u8a00\u7684\u9003\u9038\u5206\u6790\u662f\u7f16\u8bd1\u5668\u6267\u884c\u9759\u6001\u827e\u739b\u5206\u6790\u540e\uff0c\u5bf9\u5185\u5b58\u7ba1\u7406\u7684\u4f18\u5316\u548c\u7b80\u5316\uff0c\u51b3\u5b9a\u5185\u5b58\u5206\u914d\u5230\u6808\u4e0a\u8fd8\u662f\u5806\u4e0a\u3002 \u4ec0\u4e48\u65f6\u5019\u53d1\u751f\u9003\u9038\uff1f \u5f53\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u5bf9\u4e00\u4e2a\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u53d8\u91cf\u53ef\u80fd\u4f1a\u53d1\u751f\u9003\u9038\u3002 \u4f46\u662f\u53d8\u91cf\u8fd4\u56de\u540e\u6ca1\u88ab\u5f15\u7528\uff0c\u8fd8\u662f\u4f1a\u88ab\u5206\u914d\u5230\u6808\u4e0a\u3002 \u53d8\u91cf\u5728\u51fd\u6570\u5916\u90e8\u6709\u6ca1\u6709\u88ab\u5f15\u7528\uff0c\u5f15\u7528\u5206\u914d\u5230\u5806\u4e0a\u3001\u5426\u5219\u4e3a\u6808\u4e0a\u3002 \u76f8\u5173\u6587\u7ae0 https://qcrao91.gitbook.io/go/bian-yi-he-lian-jie/tao-yi-fen-xi-shi-zen-mo-jin-hang-de","title":"\u9003\u9038\u5206\u6790"},{"location":"post/golang/runtime/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/#_1","text":"\u5728\u7f16\u8bd1\u539f\u7406\u4e2d\uff0c\u5206\u6790\u6307\u9488\u7684\u52a8\u6001\u8303\u56f4\u7684\u65b9\u6cd5\u79f0\u4e3a\u9003\u9038\u5206\u6790\u3002 \u6307\u9488\u7684\u52a8\u6001\u8303\u56f4\uff1a \u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u6307\u9488\u88ab\u591a\u4e2a\u65b9\u6cd5\u6216\u7ebf\u7a0b\u5f15\u7528\u65f6\uff0c\u79f0\u6307\u9488\u53d1\u751f\u4e86\u9003\u9038 Go\u8bed\u8a00\u7684\u9003\u9038\u5206\u6790\u662f\u7f16\u8bd1\u5668\u6267\u884c\u9759\u6001\u827e\u739b\u5206\u6790\u540e\uff0c\u5bf9\u5185\u5b58\u7ba1\u7406\u7684\u4f18\u5316\u548c\u7b80\u5316\uff0c\u51b3\u5b9a\u5185\u5b58\u5206\u914d\u5230\u6808\u4e0a\u8fd8\u662f\u5806\u4e0a\u3002","title":"\u4ec0\u4e48\u662f\u9003\u9038\u5206\u6790\uff1f"},{"location":"post/golang/runtime/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/#_2","text":"\u5f53\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u5bf9\u4e00\u4e2a\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u53d8\u91cf\u53ef\u80fd\u4f1a\u53d1\u751f\u9003\u9038\u3002 \u4f46\u662f\u53d8\u91cf\u8fd4\u56de\u540e\u6ca1\u88ab\u5f15\u7528\uff0c\u8fd8\u662f\u4f1a\u88ab\u5206\u914d\u5230\u6808\u4e0a\u3002 \u53d8\u91cf\u5728\u51fd\u6570\u5916\u90e8\u6709\u6ca1\u6709\u88ab\u5f15\u7528\uff0c\u5f15\u7528\u5206\u914d\u5230\u5806\u4e0a\u3001\u5426\u5219\u4e3a\u6808\u4e0a\u3002","title":"\u4ec0\u4e48\u65f6\u5019\u53d1\u751f\u9003\u9038\uff1f"},{"location":"post/golang/runtime/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/#_3","text":"https://qcrao91.gitbook.io/go/bian-yi-he-lian-jie/tao-yi-fen-xi-shi-zen-mo-jin-hang-de","title":"\u76f8\u5173\u6587\u7ae0"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-map/","text":"1. \u4ec0\u4e48\u662fmap\uff1f \u5173\u8054\u6570\u7ec4 map \u5b57\u5178 \u7b26\u53f7\u8868 kv\u7ec4\u6210\u7684\u62bd\u8c61\u6570\u636e\u7ed3\u6784\uff0ckey\u5177\u6709\u552f\u4e00\u6027\uff0c\u652f\u6301\u589e\u5220\u6539\u67e5\uff0c\u5e73\u5747\u67e5\u627e\u6548\u7387\u4e3aO(1)\uff0c\u6700\u5dee\u4e3aO(n)\u3002 2. \u5b9e\u73b0\u65b9\u5f0f \u54c8\u5e0c\u67e5 \u5229\u7528hash func \u5206\u914dkey\u5230bucket\uff0c\u4e3b\u8981\u5f00\u9500\u5728hashfunc\u548c\u6570\u7ec4\u5e38\u6570\u8bbf\u95ee \u54c8\u5e0c\u8868\u78b0\u649e \u62c9\u94fe\u6cd5 \u5c06bucket\u5b9e\u73b0\u4e3a\u94fe\u8868\uff0c\u78b0\u649e\u65b0\u589e\u5728\u94fe\u8868\u540e\u63d2\u5165 \u94fe\u8868\u6cd5 \u78b0\u649e\u5728buckets\u6570\u7ec4\u540e\u589e\u52a0\u7a7a\u4f4d \u641c\u7d22\u6811 AVL\u6811 \u7ea2\u9ed1\u6811 \u641c\u7d22\u6811\u5b9e\u73b0\u7684key \u904d\u5386\u662f\u6709\u5e8f\u7684\uff0c\u800c\u54c8\u5e0c\u8868\u793a\u65e0\u5e8f\u7684\u3002 3. Go \u7684map\u600e\u4e48\u5b9e\u73b0\u7684\uff1f \u54c8\u5e0c\u67e5\u627e\u8868+\u94fe\u8868\u6cd5 \u4ee3\u7801\u7ed3\u6784 // A header for a Go map. type hmap struct { // \u5143\u7d20\u4e2a\u6570\uff0c\u8c03\u7528 len(map) \u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u6b64\u503c count int flags uint8 // buckets \u7684\u5bf9\u6570 log_2 B uint8 // overflow \u7684 bucket \u8fd1\u4f3c\u6570 noverflow uint16 // \u8ba1\u7b97 key \u7684\u54c8\u5e0c\u7684\u65f6\u5019\u4f1a\u4f20\u5165\u54c8\u5e0c\u51fd\u6570 hash0 uint32 // \u6307\u5411 buckets \u6570\u7ec4\uff0c\u5927\u5c0f\u4e3a 2^B // \u5982\u679c\u5143\u7d20\u4e2a\u6570\u4e3a0\uff0c\u5c31\u4e3a nil buckets unsafe.Pointer // \u6269\u5bb9\u7684\u65f6\u5019\uff0cbuckets \u957f\u5ea6\u4f1a\u662f oldbuckets \u7684\u4e24\u500d oldbuckets unsafe.Pointer // \u6307\u793a\u6269\u5bb9\u8fdb\u5ea6\uff0c\u5c0f\u4e8e\u6b64\u5730\u5740\u7684 buckets \u8fc1\u79fb\u5b8c\u6210 nevacuate uintptr extra *mapextra // optional fields } // mapextra holds fields that are not present on all maps. type mapextra struct { // If both key and elem do not contain pointers and are inline, then we mark bucket // type as containing no pointers. This avoids scanning such maps. // However, bmap.overflow is a pointer. In order to keep overflow buckets // alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow. // overflow and oldoverflow are only used if key and elem do not contain pointers. // overflow contains overflow buckets for hmap.buckets. // oldoverflow contains overflow buckets for hmap.oldbuckets. // The indirection allows to store a pointer to the slice in hiter. overflow *[]*bmap oldoverflow *[]*bmap // nextOverflow holds a pointer to a free overflow bucket. nextOverflow *bmap } // A bucket for a Go map. type bmap struct { // tophash generally contains the top byte of the hash value // for each key in this bucket. If tophash[0] < minTopHash, // tophash[0] is a bucket evacuation state instead. tophash [bucketCnt]uint8 // Followed by bucketCnt keys and then bucketCnt elems. // NOTE: packing all the keys together and then all the elems together makes the // code a bit more complicated than alternating key/elem/key/elem/... but it allows // us to eliminate padding which would be needed for, e.g., map[int64]int8. // Followed by an overflow pointer. } 4.\u5b58\u653ekey\u6d41\u7a0b/\u5982\u4f55\u5b9a\u4f4dkey\u7684\u6240\u5728\u4f4d\u7f6e\uff1f 10010111 | 000011110110110010001111001010100010010110010101010 \u2502 01010 // \u6700\u540eB\u4f4d\u4e3a10 \u653e\u5728\u7b2c10\u4e2abucket // \u7528hash\u7684\u524d8\u4f4d\u786e\u5b9a\u653e\u5728\u6876\u4e2d([8]keys,[8]values)\u7684\u54ea\u4e2a\u4f4d\u7f6e \u8ba1\u7b97key hash \u7528hash\u7684\u6700\u540eB\u4f4d\u786e\u5b9a\u5b58\u5728\u5728\u54ea\u4e2a\u6876([]bmap) \u7528hash\u7684\u524d8\u4f4d\u786e\u5b9a\u653e\u5728\u6876\u4e2d([8]keys,[8]values)\u7684\u54ea\u4e2a\u4f4d\u7f6e 5. map \u5728\u5f53\u505a\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u5728\u51fd\u6570\u5185\u4fee\u6539\u5f71\u54cdmap // makemap \u8fd4\u56de\u662f\u6307\u9488 func makemap(t *maptype, hint int, h *hmap) *hmap 6. Map \u4e24\u79cdget\u65b9\u5f0f var m = map[string]int{\"a\":0,\"b\":2} // \u7b2c\u4e00\u79cd fmt.Println(m[\"a\"]) // 0 // \u7b2c\u4e8c\u79cd a,ok := m[\"a\"] fmt.Println(a,ok) // 0 true // \u5e95\u5c42\u51fd\u6570\u5b9e\u73b0 // src/runtime/hashmap.go func mapaccess1(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer func mapaccess2(t *maptype, h *hmap, key unsafe.Pointer) (unsafe.Pointer, bool) 7. \u6269\u5bb9 \u88c5\u8f7d\u56e0\u5b50\u4e3a6.5 \u6269\u5bb9\u662f\u6e10\u8fdb\u5f0f\uff0c\u9632\u6b62\u4e00\u6b21\u642c\u8fc1key\u8fc7\u591a\u5f71\u54cd\u6027\u80fd \u89e6\u53d1\u6269\u5bb9\u7684\u65f6\u673a: \u65b0\u589e\u65b0\u5143\u7d20 bucket\u642c\u8fc1\u7684\u89e6\u53d1: \u8d4b\u503c\u3001\u5220\u9664\u65f6\uff0c\u6bcf\u6b21\u642c\u8fc1\u4e24\u4e2abucket // src/runtime/map.go // Maximum average load of a bucket that triggers growth is 6.5. // Represent as loadFactorNum/loadFactorDen, to allow integer math. loadFactorNum = 13 loadFactorDen = 2 loadFactor := count / (2^B) // \u6269\u5bb9\u6761\u4ef6 // Did not find mapping for key. Allocate new cell & add entry. // If we hit the max load factor or we have too many overflow buckets, // and we're not already in the middle of growing, start growing. // \u89e6\u53d1\u6700\u5927\u8d1f\u8f7d\u56e0\u5b50\u6216\u8005\u592a\u591a\u7684\u6ea2\u51fa\u6876 if !h.growing()/*\u6ca1\u6709\u6b63\u5728\u6269\u5bb9*/ && (overLoadFactor(h.count+1, h.B)/*\u5224\u65ad\u8d1f\u8f7d\u56e0\u5b50*/ || tooManyOverflowBuckets(h.noverflow, h.B)) { hashGrow(t, h) goto again // Growing the table invalidates everything, so try again } // \u8d1f\u8f7d\u56e0\u5b50\u8ba1\u7b97 // overLoadFactor reports whether count items placed in 1<<B buckets is over loadFactor. func overLoadFactor(count int, B uint8) bool { return count > bucketCnt && uintptr(count) > loadFactorNum*(bucketShift(B)/loadFactorDen) } // \u6ea2\u51fa\u6876 // tooManyOverflowBuckets reports whether noverflow buckets is too many for a map with 1<<B buckets. // Note that most of these overflow buckets must be in sparse use; // if use was dense, then we'd have already triggered regular map growth. func tooManyOverflowBuckets(noverflow uint16, B uint8) bool { // If the threshold is too low, we do extraneous work. // If the threshold is too high, maps that grow and shrink can hold on to lots of unused memory. // \"too many\" means (approximately) as many overflow buckets as regular buckets. // See incrnoverflow for more details. // B\u7684\u503c\u5927\u4e8e15 if B > 15 { B = 15 } // The compiler doesn't see here that B < 16; mask B to generate shorter shift code. return noverflow >= uint16(1)<<(B&15) } // \u6267\u884c\u6269\u5bb9 func hashGrow(t *maptype, h *hmap) { // If we've hit the load factor, get bigger. // Otherwise, there are too many overflow buckets, // so keep the same number of buckets and \"grow\" laterally. bigger := uint8(1) if !overLoadFactor(h.count+1, h.B) { bigger = 0 h.flags |= sameSizeGrow } // \u5c06buckets \u642c\u8fc1 oldbuckets oldbuckets := h.buckets // \u521b\u5efa\u65b0\u7684buckets newbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil) flags := h.flags &^ (iterator | oldIterator) if h.flags&iterator != 0 { flags |= oldIterator } // commit the grow (atomic wrt gc) h.B += bigger h.flags = flags h.oldbuckets = oldbuckets h.buckets = newbuckets // \u6269\u5bb9\u8fdb\u5ea6 h.nevacuate = 0 h.noverflow = 0 if h.extra != nil && h.extra.overflow != nil { // Promote current overflow buckets to the old generation. if h.extra.oldoverflow != nil { throw(\"oldoverflow is not nil\") } h.extra.oldoverflow = h.extra.overflow h.extra.overflow = nil } if nextOverflow != nil { if h.extra == nil { h.extra = new(mapextra) } h.extra.nextOverflow = nextOverflow } // the actual copying of the hash table data is done incrementally // growWork \u662f\u6e10\u8fdb\u5f0f\u6267\u884c\u642c\u8fc1\u7684\u51fd\u6570 // by growWork() and evacuate(). } func growWork(t *maptype, h *hmap, bucket uintptr) { // make sure we evacuate the oldbucket corresponding // to the bucket we're about to use evacuate(t, h, bucket&h.oldbucketmask()) // evacuate one more oldbucket to make progress on growing // \u5224\u65ad\u662f\u5426\u642c\u8fc1\u5b8c if h.growing() { evacuate(t, h, h.nevacuate) } } } 8.map \u6bd4\u8f83 \u901a\u8fc7\u904d\u5386\u6bd4\u8f83key\u3001val\uff0c\u65e0\u6cd5\u5bf9\u6bd4(map1==map2 \u4f1a\u65e0\u6cd5\u7f16\u8bd1)\u3002","title":"golang-map"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-map/#1-map","text":"\u5173\u8054\u6570\u7ec4 map \u5b57\u5178 \u7b26\u53f7\u8868 kv\u7ec4\u6210\u7684\u62bd\u8c61\u6570\u636e\u7ed3\u6784\uff0ckey\u5177\u6709\u552f\u4e00\u6027\uff0c\u652f\u6301\u589e\u5220\u6539\u67e5\uff0c\u5e73\u5747\u67e5\u627e\u6548\u7387\u4e3aO(1)\uff0c\u6700\u5dee\u4e3aO(n)\u3002","title":"1. \u4ec0\u4e48\u662fmap\uff1f"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-map/#2","text":"\u54c8\u5e0c\u67e5 \u5229\u7528hash func \u5206\u914dkey\u5230bucket\uff0c\u4e3b\u8981\u5f00\u9500\u5728hashfunc\u548c\u6570\u7ec4\u5e38\u6570\u8bbf\u95ee \u54c8\u5e0c\u8868\u78b0\u649e \u62c9\u94fe\u6cd5 \u5c06bucket\u5b9e\u73b0\u4e3a\u94fe\u8868\uff0c\u78b0\u649e\u65b0\u589e\u5728\u94fe\u8868\u540e\u63d2\u5165 \u94fe\u8868\u6cd5 \u78b0\u649e\u5728buckets\u6570\u7ec4\u540e\u589e\u52a0\u7a7a\u4f4d \u641c\u7d22\u6811 AVL\u6811 \u7ea2\u9ed1\u6811 \u641c\u7d22\u6811\u5b9e\u73b0\u7684key \u904d\u5386\u662f\u6709\u5e8f\u7684\uff0c\u800c\u54c8\u5e0c\u8868\u793a\u65e0\u5e8f\u7684\u3002","title":"2. \u5b9e\u73b0\u65b9\u5f0f"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-map/#3-go-map","text":"\u54c8\u5e0c\u67e5\u627e\u8868+\u94fe\u8868\u6cd5 \u4ee3\u7801\u7ed3\u6784 // A header for a Go map. type hmap struct { // \u5143\u7d20\u4e2a\u6570\uff0c\u8c03\u7528 len(map) \u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u6b64\u503c count int flags uint8 // buckets \u7684\u5bf9\u6570 log_2 B uint8 // overflow \u7684 bucket \u8fd1\u4f3c\u6570 noverflow uint16 // \u8ba1\u7b97 key \u7684\u54c8\u5e0c\u7684\u65f6\u5019\u4f1a\u4f20\u5165\u54c8\u5e0c\u51fd\u6570 hash0 uint32 // \u6307\u5411 buckets \u6570\u7ec4\uff0c\u5927\u5c0f\u4e3a 2^B // \u5982\u679c\u5143\u7d20\u4e2a\u6570\u4e3a0\uff0c\u5c31\u4e3a nil buckets unsafe.Pointer // \u6269\u5bb9\u7684\u65f6\u5019\uff0cbuckets \u957f\u5ea6\u4f1a\u662f oldbuckets \u7684\u4e24\u500d oldbuckets unsafe.Pointer // \u6307\u793a\u6269\u5bb9\u8fdb\u5ea6\uff0c\u5c0f\u4e8e\u6b64\u5730\u5740\u7684 buckets \u8fc1\u79fb\u5b8c\u6210 nevacuate uintptr extra *mapextra // optional fields } // mapextra holds fields that are not present on all maps. type mapextra struct { // If both key and elem do not contain pointers and are inline, then we mark bucket // type as containing no pointers. This avoids scanning such maps. // However, bmap.overflow is a pointer. In order to keep overflow buckets // alive, we store pointers to all overflow buckets in hmap.extra.overflow and hmap.extra.oldoverflow. // overflow and oldoverflow are only used if key and elem do not contain pointers. // overflow contains overflow buckets for hmap.buckets. // oldoverflow contains overflow buckets for hmap.oldbuckets. // The indirection allows to store a pointer to the slice in hiter. overflow *[]*bmap oldoverflow *[]*bmap // nextOverflow holds a pointer to a free overflow bucket. nextOverflow *bmap } // A bucket for a Go map. type bmap struct { // tophash generally contains the top byte of the hash value // for each key in this bucket. If tophash[0] < minTopHash, // tophash[0] is a bucket evacuation state instead. tophash [bucketCnt]uint8 // Followed by bucketCnt keys and then bucketCnt elems. // NOTE: packing all the keys together and then all the elems together makes the // code a bit more complicated than alternating key/elem/key/elem/... but it allows // us to eliminate padding which would be needed for, e.g., map[int64]int8. // Followed by an overflow pointer. }","title":"3. Go \u7684map\u600e\u4e48\u5b9e\u73b0\u7684\uff1f"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-map/#4keykey","text":"10010111 | 000011110110110010001111001010100010010110010101010 \u2502 01010 // \u6700\u540eB\u4f4d\u4e3a10 \u653e\u5728\u7b2c10\u4e2abucket // \u7528hash\u7684\u524d8\u4f4d\u786e\u5b9a\u653e\u5728\u6876\u4e2d([8]keys,[8]values)\u7684\u54ea\u4e2a\u4f4d\u7f6e \u8ba1\u7b97key hash \u7528hash\u7684\u6700\u540eB\u4f4d\u786e\u5b9a\u5b58\u5728\u5728\u54ea\u4e2a\u6876([]bmap) \u7528hash\u7684\u524d8\u4f4d\u786e\u5b9a\u653e\u5728\u6876\u4e2d([8]keys,[8]values)\u7684\u54ea\u4e2a\u4f4d\u7f6e","title":"4.\u5b58\u653ekey\u6d41\u7a0b/\u5982\u4f55\u5b9a\u4f4dkey\u7684\u6240\u5728\u4f4d\u7f6e\uff1f"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-map/#5-map-map","text":"// makemap \u8fd4\u56de\u662f\u6307\u9488 func makemap(t *maptype, hint int, h *hmap) *hmap","title":"5. map \u5728\u5f53\u505a\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u5728\u51fd\u6570\u5185\u4fee\u6539\u5f71\u54cdmap"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-map/#6-map-get","text":"var m = map[string]int{\"a\":0,\"b\":2} // \u7b2c\u4e00\u79cd fmt.Println(m[\"a\"]) // 0 // \u7b2c\u4e8c\u79cd a,ok := m[\"a\"] fmt.Println(a,ok) // 0 true // \u5e95\u5c42\u51fd\u6570\u5b9e\u73b0 // src/runtime/hashmap.go func mapaccess1(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer func mapaccess2(t *maptype, h *hmap, key unsafe.Pointer) (unsafe.Pointer, bool)","title":"6. Map \u4e24\u79cdget\u65b9\u5f0f"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-map/#7","text":"\u88c5\u8f7d\u56e0\u5b50\u4e3a6.5 \u6269\u5bb9\u662f\u6e10\u8fdb\u5f0f\uff0c\u9632\u6b62\u4e00\u6b21\u642c\u8fc1key\u8fc7\u591a\u5f71\u54cd\u6027\u80fd \u89e6\u53d1\u6269\u5bb9\u7684\u65f6\u673a: \u65b0\u589e\u65b0\u5143\u7d20 bucket\u642c\u8fc1\u7684\u89e6\u53d1: \u8d4b\u503c\u3001\u5220\u9664\u65f6\uff0c\u6bcf\u6b21\u642c\u8fc1\u4e24\u4e2abucket // src/runtime/map.go // Maximum average load of a bucket that triggers growth is 6.5. // Represent as loadFactorNum/loadFactorDen, to allow integer math. loadFactorNum = 13 loadFactorDen = 2 loadFactor := count / (2^B) // \u6269\u5bb9\u6761\u4ef6 // Did not find mapping for key. Allocate new cell & add entry. // If we hit the max load factor or we have too many overflow buckets, // and we're not already in the middle of growing, start growing. // \u89e6\u53d1\u6700\u5927\u8d1f\u8f7d\u56e0\u5b50\u6216\u8005\u592a\u591a\u7684\u6ea2\u51fa\u6876 if !h.growing()/*\u6ca1\u6709\u6b63\u5728\u6269\u5bb9*/ && (overLoadFactor(h.count+1, h.B)/*\u5224\u65ad\u8d1f\u8f7d\u56e0\u5b50*/ || tooManyOverflowBuckets(h.noverflow, h.B)) { hashGrow(t, h) goto again // Growing the table invalidates everything, so try again } // \u8d1f\u8f7d\u56e0\u5b50\u8ba1\u7b97 // overLoadFactor reports whether count items placed in 1<<B buckets is over loadFactor. func overLoadFactor(count int, B uint8) bool { return count > bucketCnt && uintptr(count) > loadFactorNum*(bucketShift(B)/loadFactorDen) } // \u6ea2\u51fa\u6876 // tooManyOverflowBuckets reports whether noverflow buckets is too many for a map with 1<<B buckets. // Note that most of these overflow buckets must be in sparse use; // if use was dense, then we'd have already triggered regular map growth. func tooManyOverflowBuckets(noverflow uint16, B uint8) bool { // If the threshold is too low, we do extraneous work. // If the threshold is too high, maps that grow and shrink can hold on to lots of unused memory. // \"too many\" means (approximately) as many overflow buckets as regular buckets. // See incrnoverflow for more details. // B\u7684\u503c\u5927\u4e8e15 if B > 15 { B = 15 } // The compiler doesn't see here that B < 16; mask B to generate shorter shift code. return noverflow >= uint16(1)<<(B&15) } // \u6267\u884c\u6269\u5bb9 func hashGrow(t *maptype, h *hmap) { // If we've hit the load factor, get bigger. // Otherwise, there are too many overflow buckets, // so keep the same number of buckets and \"grow\" laterally. bigger := uint8(1) if !overLoadFactor(h.count+1, h.B) { bigger = 0 h.flags |= sameSizeGrow } // \u5c06buckets \u642c\u8fc1 oldbuckets oldbuckets := h.buckets // \u521b\u5efa\u65b0\u7684buckets newbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil) flags := h.flags &^ (iterator | oldIterator) if h.flags&iterator != 0 { flags |= oldIterator } // commit the grow (atomic wrt gc) h.B += bigger h.flags = flags h.oldbuckets = oldbuckets h.buckets = newbuckets // \u6269\u5bb9\u8fdb\u5ea6 h.nevacuate = 0 h.noverflow = 0 if h.extra != nil && h.extra.overflow != nil { // Promote current overflow buckets to the old generation. if h.extra.oldoverflow != nil { throw(\"oldoverflow is not nil\") } h.extra.oldoverflow = h.extra.overflow h.extra.overflow = nil } if nextOverflow != nil { if h.extra == nil { h.extra = new(mapextra) } h.extra.nextOverflow = nextOverflow } // the actual copying of the hash table data is done incrementally // growWork \u662f\u6e10\u8fdb\u5f0f\u6267\u884c\u642c\u8fc1\u7684\u51fd\u6570 // by growWork() and evacuate(). } func growWork(t *maptype, h *hmap, bucket uintptr) { // make sure we evacuate the oldbucket corresponding // to the bucket we're about to use evacuate(t, h, bucket&h.oldbucketmask()) // evacuate one more oldbucket to make progress on growing // \u5224\u65ad\u662f\u5426\u642c\u8fc1\u5b8c if h.growing() { evacuate(t, h, h.nevacuate) } } }","title":"7. \u6269\u5bb9"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-map/#8map","text":"\u901a\u8fc7\u904d\u5386\u6bd4\u8f83key\u3001val\uff0c\u65e0\u6cd5\u5bf9\u6bd4(map1==map2 \u4f1a\u65e0\u6cd5\u7f16\u8bd1)\u3002","title":"8.map \u6bd4\u8f83"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-slice%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90/","text":"slice \u6e90\u4ee3\u7801 https://golang.org/src/runtime/slice.go type slice struct { array unsafe.Pointer // \u5e95\u5c42\u6570\u7ec4\u6307\u9488 len int // slice \u957f\u5ea6 cap int // \u5bb9\u91cf \u6700\u5927\u80fd\u591f\u5b58\u7684\u6570\u91cf cap >= len } // \u5207\u7247\u7684\u58f0\u660e var nilSlice []int newSlice := *new([]int) slice := []int{} makeSlice := make([]int, 0) // make \u53ef\u4ee5\u6307\u5b9alen\u548ccap \u7b2c\u4e8c\u4e2a\u662flen \u7b2c\u4e09\u4e2a\u662fcap splitSlice := ([]int{})[:] array := [...]int{} splitArray := array[:] fmt.Printf(\"var nilSlice []int p:%p len:%d cap:%d \\n\", nilSlice, len(nilSlice), cap(nilSlice)) fmt.Printf(\"newSlice := new([]int) p:%p len:%d cap:%d \\n\", newSlice, len(newSlice), cap(newSlice)) fmt.Printf(\"slice := []int{} p:%p len:%d cap:%d \\n\", slice, len(slice), cap(slice)) fmt.Printf(\"makeSlice := make([]int, 0) p:%p len:%d cap:%d \\n\", makeSlice, len(makeSlice), cap(makeSlice)) fmt.Printf(\"splitSlice := ([]int{1, 2})[:] p:%p len:%d cap:%d \\n\", splitSlice, len(splitSlice), cap(splitSlice)) fmt.Printf(\"array := [...]int{} \\n splitArray := array[:] p:%p len:%d cap:%d \\n\", splitArray, len(splitArray), cap(splitArray)) // var nilSlice []int // p:0x0 len:0 cap:0 \u7a7aslice // newSlice := new([]int) // p:0x0 len:0 cap:0 \u7a7aslice // slice := []int{} // p:0x119f428 len:0 cap:0 empty Slice // makeSlice := make([]int, 0) // p:0x119f428 len:0 cap:0 empty Slice // splitSlice := ([]int{1, 2})[:] // p:0x119f428 len:0 cap:0 empty Slice // array := [...]int{} // splitArray := array[:] // p:0x119f428 len:0 cap:0 empty Slice func() { var s1 []int fmt.Printf(\"s1 == nil %v \\n\", s1 == nil) // s1 == nil true s2 := []int{} fmt.Printf(\"s2 == nil %v \\n\", s2 == nil) // s2 == nil false s3 := make([]int, 0) fmt.Printf(\"s3 == nil %v \\n\", s3 == nil) // s3 == nil false }() // \u6307\u5b9a\u7d22\u5f159\u8d4b\u503c10 var s1 = make([]int, 0) fmt.Printf(\"s1:%v cap:%d len:%d\\n\", s1, cap(s1), len(s1)) // s1:[] cap:0 len:0 // \u622a\u53d6slice \u521b\u5efa\u65b0slice sa := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} sb := sa[2:4:6] // [2,3]data[low, high, max] {low,...,height-1} // sb := sa[:1:15] // panic: runtime error: slice bounds out of range [::15] with capacity 10 // \u5f53 high == low \u65f6\uff0c\u65b0 slice \u4e3a\u7a7a\u3002 fmt.Printf(\"sa %v :%p cap:%d len:%d\\n\", sa, sa, cap(sa), len(sa)) fmt.Printf(\"sb %v :%p cap:%d len:%d\\n\", sb, sb, cap(sb), len(sb)) // sa [0 1 2 3 4 5 6 7 8 9] :0xc0000ba000 cap:10 len:10 // sb [2 3] :0xc0000ba010 cap:4 len:2 // slice \u6269\u5bb9 var moreSlice = []int{0} for i := 0; i < 4096; i++ { oldCap := cap(moreSlice) moreSlice = append(moreSlice, i) newCap := cap(moreSlice) if oldCap != newCap { fmt.Printf(\"growCap old:%d -> new:%d %2.f%%\\n\", oldCap, newCap, (float64(newCap)-float64(oldCap))/float64(oldCap)*100) } } // growCap old:1 -> new:2 100% // growCap old:2 -> new:4 100% // growCap old:4 -> new:8 100% // growCap old:8 -> new:16 100% // growCap old:16 -> new:32 100% // growCap old:32 -> new:64 100% // growCap old:64 -> new:128 100% // growCap old:128 -> new:256 100% // growCap old:256 -> new:512 100% // growCap old:512 -> new:1024 100% // growCap old:1024 -> new:1280 25% // growCap old:1280 -> new:1696 32% // growCap old:1696 -> new:2304 36% // growCap old:2304 -> new:3072 33% // growCap old:3072 -> new:4096 33% // growCap old:4096 -> new:5120 25% s := []int{1, 2} s = append(s, 4) s = append(s, 5) s = append(s, 6) fmt.Printf(\"len=%d, cap=%d\", len(s), cap(s)) // len=5, cap=8% a1 := []int{1, 2, 3} a2 := a1 a2 = append(a2, 100) a2[1] = 10 fmt.Println(a1, a2) // [1 2 3] [1 10 3 100] \u6269\u5bb9\u6210\u65b0slice\u65e0\u5f71\u54cda1 func() { // \u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d s1 := make([]int, 5, 5) s2 := s1 s1[1] = 1 fmt.Printf(\"s1\uff1a%v \uff0cs2\uff1a%v \\n\", s1, s2) // s1\uff1a[0 1 0 0 0] \uff0cs2\uff1a[0 1 0 0 0] // \u6df1\u62f7\u8d1d s3 := make([]int, 5, 5) s4 := make([]int, 5, 5) copy(s4, s3) s3[1] = 1 fmt.Printf(\"s3\uff1a%v \uff0cs4\uff1a%v \\n\", s3, s4) // s3\uff1a[0 1 0 0 0] \uff0cs4\uff1a[0 0 0 0 0] }() FastHttp slice+sync.Pool \u7ed3\u6784\u590d\u7528 https://cbsheng.github.io/posts/fasthttp%E6%BA%90%E7%A0%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%88%86%E6%9E%90/ slice \u5185\u5b58\u6cc4\u9732 https://xargin.com/logic-of-slice-memory-leak/","title":"golang-slice\u6df1\u5ea6\u5206\u6790"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-slice%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90/#slice","text":"https://golang.org/src/runtime/slice.go type slice struct { array unsafe.Pointer // \u5e95\u5c42\u6570\u7ec4\u6307\u9488 len int // slice \u957f\u5ea6 cap int // \u5bb9\u91cf \u6700\u5927\u80fd\u591f\u5b58\u7684\u6570\u91cf cap >= len } // \u5207\u7247\u7684\u58f0\u660e var nilSlice []int newSlice := *new([]int) slice := []int{} makeSlice := make([]int, 0) // make \u53ef\u4ee5\u6307\u5b9alen\u548ccap \u7b2c\u4e8c\u4e2a\u662flen \u7b2c\u4e09\u4e2a\u662fcap splitSlice := ([]int{})[:] array := [...]int{} splitArray := array[:] fmt.Printf(\"var nilSlice []int p:%p len:%d cap:%d \\n\", nilSlice, len(nilSlice), cap(nilSlice)) fmt.Printf(\"newSlice := new([]int) p:%p len:%d cap:%d \\n\", newSlice, len(newSlice), cap(newSlice)) fmt.Printf(\"slice := []int{} p:%p len:%d cap:%d \\n\", slice, len(slice), cap(slice)) fmt.Printf(\"makeSlice := make([]int, 0) p:%p len:%d cap:%d \\n\", makeSlice, len(makeSlice), cap(makeSlice)) fmt.Printf(\"splitSlice := ([]int{1, 2})[:] p:%p len:%d cap:%d \\n\", splitSlice, len(splitSlice), cap(splitSlice)) fmt.Printf(\"array := [...]int{} \\n splitArray := array[:] p:%p len:%d cap:%d \\n\", splitArray, len(splitArray), cap(splitArray)) // var nilSlice []int // p:0x0 len:0 cap:0 \u7a7aslice // newSlice := new([]int) // p:0x0 len:0 cap:0 \u7a7aslice // slice := []int{} // p:0x119f428 len:0 cap:0 empty Slice // makeSlice := make([]int, 0) // p:0x119f428 len:0 cap:0 empty Slice // splitSlice := ([]int{1, 2})[:] // p:0x119f428 len:0 cap:0 empty Slice // array := [...]int{} // splitArray := array[:] // p:0x119f428 len:0 cap:0 empty Slice func() { var s1 []int fmt.Printf(\"s1 == nil %v \\n\", s1 == nil) // s1 == nil true s2 := []int{} fmt.Printf(\"s2 == nil %v \\n\", s2 == nil) // s2 == nil false s3 := make([]int, 0) fmt.Printf(\"s3 == nil %v \\n\", s3 == nil) // s3 == nil false }() // \u6307\u5b9a\u7d22\u5f159\u8d4b\u503c10 var s1 = make([]int, 0) fmt.Printf(\"s1:%v cap:%d len:%d\\n\", s1, cap(s1), len(s1)) // s1:[] cap:0 len:0 // \u622a\u53d6slice \u521b\u5efa\u65b0slice sa := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} sb := sa[2:4:6] // [2,3]data[low, high, max] {low,...,height-1} // sb := sa[:1:15] // panic: runtime error: slice bounds out of range [::15] with capacity 10 // \u5f53 high == low \u65f6\uff0c\u65b0 slice \u4e3a\u7a7a\u3002 fmt.Printf(\"sa %v :%p cap:%d len:%d\\n\", sa, sa, cap(sa), len(sa)) fmt.Printf(\"sb %v :%p cap:%d len:%d\\n\", sb, sb, cap(sb), len(sb)) // sa [0 1 2 3 4 5 6 7 8 9] :0xc0000ba000 cap:10 len:10 // sb [2 3] :0xc0000ba010 cap:4 len:2 // slice \u6269\u5bb9 var moreSlice = []int{0} for i := 0; i < 4096; i++ { oldCap := cap(moreSlice) moreSlice = append(moreSlice, i) newCap := cap(moreSlice) if oldCap != newCap { fmt.Printf(\"growCap old:%d -> new:%d %2.f%%\\n\", oldCap, newCap, (float64(newCap)-float64(oldCap))/float64(oldCap)*100) } } // growCap old:1 -> new:2 100% // growCap old:2 -> new:4 100% // growCap old:4 -> new:8 100% // growCap old:8 -> new:16 100% // growCap old:16 -> new:32 100% // growCap old:32 -> new:64 100% // growCap old:64 -> new:128 100% // growCap old:128 -> new:256 100% // growCap old:256 -> new:512 100% // growCap old:512 -> new:1024 100% // growCap old:1024 -> new:1280 25% // growCap old:1280 -> new:1696 32% // growCap old:1696 -> new:2304 36% // growCap old:2304 -> new:3072 33% // growCap old:3072 -> new:4096 33% // growCap old:4096 -> new:5120 25% s := []int{1, 2} s = append(s, 4) s = append(s, 5) s = append(s, 6) fmt.Printf(\"len=%d, cap=%d\", len(s), cap(s)) // len=5, cap=8% a1 := []int{1, 2, 3} a2 := a1 a2 = append(a2, 100) a2[1] = 10 fmt.Println(a1, a2) // [1 2 3] [1 10 3 100] \u6269\u5bb9\u6210\u65b0slice\u65e0\u5f71\u54cda1 func() { // \u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d s1 := make([]int, 5, 5) s2 := s1 s1[1] = 1 fmt.Printf(\"s1\uff1a%v \uff0cs2\uff1a%v \\n\", s1, s2) // s1\uff1a[0 1 0 0 0] \uff0cs2\uff1a[0 1 0 0 0] // \u6df1\u62f7\u8d1d s3 := make([]int, 5, 5) s4 := make([]int, 5, 5) copy(s4, s3) s3[1] = 1 fmt.Printf(\"s3\uff1a%v \uff0cs4\uff1a%v \\n\", s3, s4) // s3\uff1a[0 1 0 0 0] \uff0cs4\uff1a[0 0 0 0 0] }()","title":"slice \u6e90\u4ee3\u7801"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-slice%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90/#fasthttp-slicesyncpool","text":"https://cbsheng.github.io/posts/fasthttp%E6%BA%90%E7%A0%81%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%88%86%E6%9E%90/","title":"FastHttp slice+sync.Pool \u7ed3\u6784\u590d\u7528"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang-slice%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90/#slice_1","text":"https://xargin.com/logic-of-slice-memory-leak/","title":"slice \u5185\u5b58\u6cc4\u9732"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","text":"\u4e00.Slice // https://github.com/golang/go/blob/3b2a578166bdedd94110698c971ba8990771eb89/src/reflect/value.go#L1994 type SliceHeader struct { // \u6307\u5411\u5e95\u5c42\u6570\u7ec4\u7684\u6307\u9488 Data uintptr // \u5207\u7247\u5f53\u524d\u957f\u5ea6 Len int // \u5207\u7247\u5f53\u524d\u5bb9\u91cf Cap int } 1.1 Slice\u6269\u5bb9\u7b56\u7565 \u5982\u679c\u671f\u671b\u5bb9\u91cf>\u5f53\u524d\u5bb9\u91cf\u7684\u4e24\u500d\uff0c\u4f7f\u7528\u671f\u671b\u5bb9\u91cf \u5207\u7247\u957f\u5ea6<1024\uff0c\u5bb9\u91cf\u7ffb\u500d \u5207\u7247\u957f\u5ea6>1024\uff0c\u6bcf\u6b21\u589e\u52a025%\u5bb9\u91cf\uff0c\u76f4\u81f3\u65b0\u5bb9\u91cf\u5927\u4e8e\u671f\u671b\u5bb9\u91cf \u5927\u5207\u7247\u6269\u5bb9\u6216\u8005\u590d\u5236\u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u5927\u89c4\u6a21\u5185\u5b58\u62f7\u8d1d \u4e8c.\u54c8\u5e0c\u8868 \u54c8\u5e0c\u51fd\u6570 \u51b3\u5b9a\u54c8\u5e0c\u8bfb\u5199\u6027\u80fd\uff08\u952e\u503c\u6620\u5c04\uff09 \u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5 \u5f00\u653e\u5bfb\u5740\u6cd5 \u4f9d\u6b21\u63a2\u6d4b\u548c\u6bd4\u8f83\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4ee5\u5224\u65ad\u76ee\u6807\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u4e8e\u54c8\u5e0c\u8868\u4e2d \u6027\u80fd\u5f71\u54cd\u6700\u5927\u7684\u662f \u88c5\u8f7d\u56e0\u5b50 \uff08\u88c5\u8f7d\u56e0\u5b50:=\u5143\u7d20\u6570\u91cf\u00f7\u6876\u6570\u91cf\uff09 \u62c9\u94fe\u6cd5 \u5f15\u5165\u7ea2\u9ed1\u6811\u4ee5\u4f18\u5316\u6027\u80fd type hmap struct { count int flags uint8 B uint8 noverflow uint16 hash0 uint32 buckets unsafe.Pointer oldbuckets unsafe.Pointer nevacuate uintptr extra *mapextra } type mapextra struct { overflow *[]*bmap oldoverflow *[]*bmap nextOverflow *bmap } \u54c8\u5e0c\u6269\u5bb9\u6761\u4ef6 \u88c5\u8f7d\u56e0\u5b50\u8d85\u8fc76.5 \u54c8\u5e0c\u8868\u4f7f\u7528\u592a\u591a\u6ea2\u51fa\u6876 \u4e09.\u5b57\u7b26\u4e32 \u53ea\u8bfb\u7684\u7c7b\u578b \u505a\u62fc\u63a5\u548c\u7c7b\u578b\u8f6c\u6362\u7b49\u64cd\u4f5c\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u6027\u80fd\u7684\u635f\u8017 type StringHeader struct { Data uintptr Len int }","title":"golang\u6570\u636e\u7ed3\u6784"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#slice","text":"// https://github.com/golang/go/blob/3b2a578166bdedd94110698c971ba8990771eb89/src/reflect/value.go#L1994 type SliceHeader struct { // \u6307\u5411\u5e95\u5c42\u6570\u7ec4\u7684\u6307\u9488 Data uintptr // \u5207\u7247\u5f53\u524d\u957f\u5ea6 Len int // \u5207\u7247\u5f53\u524d\u5bb9\u91cf Cap int }","title":"\u4e00.Slice"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#11-slice","text":"\u5982\u679c\u671f\u671b\u5bb9\u91cf>\u5f53\u524d\u5bb9\u91cf\u7684\u4e24\u500d\uff0c\u4f7f\u7528\u671f\u671b\u5bb9\u91cf \u5207\u7247\u957f\u5ea6<1024\uff0c\u5bb9\u91cf\u7ffb\u500d \u5207\u7247\u957f\u5ea6>1024\uff0c\u6bcf\u6b21\u589e\u52a025%\u5bb9\u91cf\uff0c\u76f4\u81f3\u65b0\u5bb9\u91cf\u5927\u4e8e\u671f\u671b\u5bb9\u91cf \u5927\u5207\u7247\u6269\u5bb9\u6216\u8005\u590d\u5236\u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u5927\u89c4\u6a21\u5185\u5b58\u62f7\u8d1d","title":"1.1 Slice\u6269\u5bb9\u7b56\u7565"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","text":"\u54c8\u5e0c\u51fd\u6570 \u51b3\u5b9a\u54c8\u5e0c\u8bfb\u5199\u6027\u80fd\uff08\u952e\u503c\u6620\u5c04\uff09 \u51b2\u7a81\u89e3\u51b3\u65b9\u6cd5 \u5f00\u653e\u5bfb\u5740\u6cd5 \u4f9d\u6b21\u63a2\u6d4b\u548c\u6bd4\u8f83\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4ee5\u5224\u65ad\u76ee\u6807\u952e\u503c\u5bf9\u662f\u5426\u5b58\u5728\u4e8e\u54c8\u5e0c\u8868\u4e2d \u6027\u80fd\u5f71\u54cd\u6700\u5927\u7684\u662f \u88c5\u8f7d\u56e0\u5b50 \uff08\u88c5\u8f7d\u56e0\u5b50:=\u5143\u7d20\u6570\u91cf\u00f7\u6876\u6570\u91cf\uff09 \u62c9\u94fe\u6cd5 \u5f15\u5165\u7ea2\u9ed1\u6811\u4ee5\u4f18\u5316\u6027\u80fd type hmap struct { count int flags uint8 B uint8 noverflow uint16 hash0 uint32 buckets unsafe.Pointer oldbuckets unsafe.Pointer nevacuate uintptr extra *mapextra } type mapextra struct { overflow *[]*bmap oldoverflow *[]*bmap nextOverflow *bmap } \u54c8\u5e0c\u6269\u5bb9\u6761\u4ef6 \u88c5\u8f7d\u56e0\u5b50\u8d85\u8fc76.5 \u54c8\u5e0c\u8868\u4f7f\u7528\u592a\u591a\u6ea2\u51fa\u6876","title":"\u4e8c.\u54c8\u5e0c\u8868"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/golang%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","text":"\u53ea\u8bfb\u7684\u7c7b\u578b \u505a\u62fc\u63a5\u548c\u7c7b\u578b\u8f6c\u6362\u7b49\u64cd\u4f5c\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u6027\u80fd\u7684\u635f\u8017 type StringHeader struct { Data uintptr Len int }","title":"\u4e09.\u5b57\u7b26\u4e32"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/slice%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/","text":"slice \u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d go slice \u5e95\u5c42\u662f\u57fa\u4e8e\u6570\u7ec4\u5b9e\u73b0\u7684 var array [2]int //\u6570\u7ec4 var slice []int // \u5207\u7247 \u6d45\u62f7\u8d1d \u6e90\u5207\u7247\u548c\u76ee\u7684\u5207\u7247\u5171\u4eab\u540c\u4e00\u5e95\u5c42\u6570\u7ec4 s1 := make([]int, 5, 5) s2 := s1 s1[1] = 1 fmt.Printf(\"s1\uff1a%v \uff0cs2\uff1a%v \\n\", s1, s2) // s1\uff1a[0 1 0 0 0] \uff0cs2\uff1a[0 1 0 0 0] \u6df1\u62f7\u8d1d s3 \u6e90\u5207\u7247\u4fee\u6539\u4e0d\u5f71\u54cd s4 s3 := make([]int, 5, 5) s4 := make([]int, 5, 5) copy(s4, s3) s3[1] = 1 fmt.Printf(\"s3\uff1a%v \uff0cs4\uff1a%v \\n\", s3, s4) // s3\uff1a[0 1 0 0 0] \uff0cs4\uff1a[0 0 0 0 0] \u8d85\u51fa\u5e95\u5c42\u6570\u7ec4\u5bb9\u91cf\uff0c\u4f1a\u5bfc\u81f4\u4e5f\u4f1a\u5207\u7247\u6df1\u62f7\u8d1d s5 := []int{1, 2, 3, 4, 5} s6 := s5 s5 = append(s5, 6) fmt.Printf(\"s5\uff1a%v \uff0cs6\uff1a%v \\n\", s5, s6) // s5\uff1a[1 1 3 4 5 6] \uff0cs6\uff1a[1 1 3 4 5] s5[2] = 0 fmt.Printf(\"s5\uff1a%v \uff0cs6\uff1a%v \\n\", s5, s6) // s5\uff1a[1 2 0 4 5 6] \uff0cs6\uff1a[1 2 3 4 5] s6[2] = 8 fmt.Printf(\"s5\uff1a%v \uff0cs6\uff1a%v \\n\", s5, s6) // s5\uff1a[1 2 0 4 5 6] \uff0cs6\uff1a[1 2 8 4 5]","title":"slice\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/slice%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/#slice","text":"","title":"slice \u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/slice%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/#go-slice","text":"var array [2]int //\u6570\u7ec4 var slice []int // \u5207\u7247","title":"go slice \u5e95\u5c42\u662f\u57fa\u4e8e\u6570\u7ec4\u5b9e\u73b0\u7684"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/slice%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/#_1","text":"\u6e90\u5207\u7247\u548c\u76ee\u7684\u5207\u7247\u5171\u4eab\u540c\u4e00\u5e95\u5c42\u6570\u7ec4 s1 := make([]int, 5, 5) s2 := s1 s1[1] = 1 fmt.Printf(\"s1\uff1a%v \uff0cs2\uff1a%v \\n\", s1, s2) // s1\uff1a[0 1 0 0 0] \uff0cs2\uff1a[0 1 0 0 0]","title":"\u6d45\u62f7\u8d1d"},{"location":"post/golang/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/slice%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/#_2","text":"s3 \u6e90\u5207\u7247\u4fee\u6539\u4e0d\u5f71\u54cd s4 s3 := make([]int, 5, 5) s4 := make([]int, 5, 5) copy(s4, s3) s3[1] = 1 fmt.Printf(\"s3\uff1a%v \uff0cs4\uff1a%v \\n\", s3, s4) // s3\uff1a[0 1 0 0 0] \uff0cs4\uff1a[0 0 0 0 0] \u8d85\u51fa\u5e95\u5c42\u6570\u7ec4\u5bb9\u91cf\uff0c\u4f1a\u5bfc\u81f4\u4e5f\u4f1a\u5207\u7247\u6df1\u62f7\u8d1d s5 := []int{1, 2, 3, 4, 5} s6 := s5 s5 = append(s5, 6) fmt.Printf(\"s5\uff1a%v \uff0cs6\uff1a%v \\n\", s5, s6) // s5\uff1a[1 1 3 4 5 6] \uff0cs6\uff1a[1 1 3 4 5] s5[2] = 0 fmt.Printf(\"s5\uff1a%v \uff0cs6\uff1a%v \\n\", s5, s6) // s5\uff1a[1 2 0 4 5 6] \uff0cs6\uff1a[1 2 3 4 5] s6[2] = 8 fmt.Printf(\"s5\uff1a%v \uff0cs6\uff1a%v \\n\", s5, s6) // s5\uff1a[1 2 0 4 5 6] \uff0cs6\uff1a[1 2 8 4 5]","title":"\u6df1\u62f7\u8d1d"},{"location":"post/golang/%E6%A0%87%E5%87%86%E5%8C%85/context/","text":"\u4e00.context \u4f5c\u7528 \u200b \u5728goroutine\u5f62\u6210\u7684\u6811\u5f62\u7ed3\u6784\u4e2d\u8fdb\u884c\u4fe1\u53f7\u540c\u6b65\u4ee5\u51cf\u5c11\u8ba1\u7b97\u8d44\u6e90\u7684\u6d6a\u8d39 \u5728goroutine \u540c\u6b65\u7279\u5b9a\u6570\u636e \u53d6\u6d88\u4fe1\u53f7 \u5904\u7406\u8bf7\u6c42\u7684\u622a\u6b62\u65e5\u671f \u4e8c.context.Background()\u3001conetxt.TODO() \u533a\u522b type emptyCtx int func (*emptyCtx) Deadline() (deadline time.Time, ok bool) { return } func (*emptyCtx) Done() <-chan struct{} { return nil } func (*emptyCtx) Err() error { return nil } func (*emptyCtx) Value(key interface{}) interface{} { return nil } \u90fd\u662f\u7531emptyCtx \u5b9e\u73b0\u7684 \u4f7f\u7528\u8bed\u4e49\u4e0d\u540c background \u4e0a\u4e0b\u6587\u9ed8\u8ba4\u503c\uff0c\u884d\u751f\u6240\u6709\u4e0a\u4e0b\u6587 todo \u4e0d\u7f3a\u4f7f\u7528\u90a3\u79cd\u65f6\uff0c\u5c31\u9009todo \u4e09. \u7528\u6cd5 context.WithCancel() \u4f20\u9012\u53d6\u6d88\u4fe1\u53f7 context.WithDeadline() context.WithTimeout() context.WithValue() \u4e0a\u4e0b\u6587\u4f20\u503c","title":"context"},{"location":"post/golang/%E6%A0%87%E5%87%86%E5%8C%85/context/#context","text":"\u200b \u5728goroutine\u5f62\u6210\u7684\u6811\u5f62\u7ed3\u6784\u4e2d\u8fdb\u884c\u4fe1\u53f7\u540c\u6b65\u4ee5\u51cf\u5c11\u8ba1\u7b97\u8d44\u6e90\u7684\u6d6a\u8d39 \u5728goroutine \u540c\u6b65\u7279\u5b9a\u6570\u636e \u53d6\u6d88\u4fe1\u53f7 \u5904\u7406\u8bf7\u6c42\u7684\u622a\u6b62\u65e5\u671f","title":"\u4e00.context \u4f5c\u7528"},{"location":"post/golang/%E6%A0%87%E5%87%86%E5%8C%85/context/#contextbackgroundconetxttodo","text":"type emptyCtx int func (*emptyCtx) Deadline() (deadline time.Time, ok bool) { return } func (*emptyCtx) Done() <-chan struct{} { return nil } func (*emptyCtx) Err() error { return nil } func (*emptyCtx) Value(key interface{}) interface{} { return nil } \u90fd\u662f\u7531emptyCtx \u5b9e\u73b0\u7684 \u4f7f\u7528\u8bed\u4e49\u4e0d\u540c background \u4e0a\u4e0b\u6587\u9ed8\u8ba4\u503c\uff0c\u884d\u751f\u6240\u6709\u4e0a\u4e0b\u6587 todo \u4e0d\u7f3a\u4f7f\u7528\u90a3\u79cd\u65f6\uff0c\u5c31\u9009todo","title":"\u4e8c.context.Background()\u3001conetxt.TODO() \u533a\u522b"},{"location":"post/golang/%E6%A0%87%E5%87%86%E5%8C%85/context/#_1","text":"context.WithCancel() \u4f20\u9012\u53d6\u6d88\u4fe1\u53f7 context.WithDeadline() context.WithTimeout() context.WithValue() \u4e0a\u4e0b\u6587\u4f20\u503c","title":"\u4e09. \u7528\u6cd5"},{"location":"post/golang/%E6%A0%87%E5%87%86%E5%8C%85/sync/sync.Pool/","text":"sync.Pool pool \u4e0d\u9002\u7528\u65f6\u77ed\u671f\u7684\u4e34\u65f6\u5b58\u50a8\u5bf9\u8c61 pool\u4f1a\u968f\u65f6\u6e05\u9664\u4e14\u4e0d\u4f1a\u901a\u77e5 \u591a\u7ebf\u7a0b\u5b89\u5168 \u51cf\u5c11\u5206\u914d\u5f00\u9500\uff0c\u5bf9\u8c61\u91cd\u7528 # go1.15.6/src/sync/pool.go // Copyright 2013 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file. package sync import ( \"internal/race\" \"runtime\" \"sync/atomic\" \"unsafe\" ) // A Pool is a set of temporary objects that may be individually saved and // retrieved. // Pool \u662f\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\u96c6\u5408\uff0c\u53ef\u4ee5\u9010\u4e2a\u4fdd\u5b58\u548c\u56de\u6536\u3002 // // Any item stored in the Pool may be removed automatically at any time without // notification. If the Pool holds the only reference when this happens, the // item might be deallocated. // \u4efb\u4f55\u5bf9\u8c61\u5728pool\u4e2d\u53ef\u80fd\u88ab\u5728\u4efb\u4f55\u65f6\u95f4\u81ea\u52a8\u79fb\u9664\u5e76\u6ca1\u6709\u901a\u77e5\u3002\u5982\u679c\u53d1\u751f\uff0cpool\u552f\u4e00\u5f15\u7528\u53ef\u80fd\u4f1a\u88ab\u91ca\u653e\u3002 // A Pool is safe for use by multiple goroutines simultaneously. // poll \u591agoroutines\u540c\u65f6\u4f7f\u7528\u662f\u5b89\u5168\u7684\u3002 // Pool's purpose is to cache allocated but unused items for later reuse, // relieving pressure on the garbage collector. That is, it makes it easy to // build efficient, thread-safe free lists. However, it is not suitable for all // free lists. // pool\u7684\u76ee\u7684\u662f\u7f13\u5b58\u5df2\u5206\u914d\u7684\u4f46\u672a\u4f7f\u7528\u4e3a\u4e86\u4e4b\u540e\u91cd\u7528\u3002\u51cf\u5c11\u5185\u5b58\u56de\u6536\u7684\u538b\u529b\u3002\u8fd9\u6837\u53ef\u4ee5\u8f7b\u677e\u7684\u6784\u5efa\u9ad8\u6548\u7684\u3001\u7ebf\u7a0b\u5b89\u5168\u7684\u7a7a\u95f2\u5217\u8868\u3002\u4e0d\u9002\u7528\u6240\u6709\u7a7a\u95f2\u5217\u8868 // An appropriate use of a Pool is to manage a group of temporary items // silently shared among and potentially reused by concurrent independent // clients of a package. Pool provides a way to amortize allocation overhead // across many clients. // pool \u5408\u9002\u7528\u5904\u662f\u7ba1\u7406\u4e00\u7ec4\u4e34\u65f6items\u5728\u5e76\u53d1\u5ba2\u6237\u7aef\u4e4b\u95f4\u5171\u4eab\u91cd\u7528\uff0cpool \u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u51cf\u5c11\u591a\u4e2a\u5ba2\u6237\u7aef\u7684\u5206\u914d\u5f00\u9500 // An example of good use of a Pool is in the fmt package, which maintains a // dynamically-sized store of temporary output buffers. The store scales under // load (when many goroutines are actively printing) and shrinks when // quiescent. // \u4e00\u4e2a\u597d\u7684\u4f7f\u7528\u4f8b\u5b50\u662ffmt\u5305\uff0c\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u4e34\u65f6\u5b58\u50a8\u7684buff\uff0c\u5e76\u4e14\u5728\u8d1f\u8f7d\u662f\u6269\u5bb9\uff0c\u9759\u6b62\u65f6\u6536\u7f29\u3002 // On the other hand, a free list maintained as part of a short-lived object is // not a suitable use for a Pool, since the overhead does not amortize well in // that scenario. It is more efficient to have such objects implement their own // free list. // \u53e6\u4e00\u65b9\u9762\uff0c\u77ed\u671f\u7684\u5bf9\u8c61\u7ef4\u62a4\u7a7a\u95f2\u5217\u8868\u4e0d\u9002\u5408\u4f7f\u7528pool\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u65e0\u6cd5\u505a\u5230\u5f00\u9500\u5f88\u597d\uff0c\u66f4\u597d\u7684\u662f\u5b9e\u73b0\u81ea\u5df1\u7684\u7a7a\u95f2\u5217\u8868\u3002 // A Pool must not be copied after first use. // pool \u7b2c\u4e00\u6b21\u4f7f\u7528\u4e4b\u540e\u4e0d\u80fd\u62f7\u8d1d type Pool struct { noCopy noCopy // \u6570\u7ec4\u6570\u7ec4\u6307\u9488 \u6570\u7ec4\u5927\u5c0f\u7b49\u4e8eP(GMP\u7684p\u6570\u91cf) local unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal localSize uintptr // size of the local array victim unsafe.Pointer // local from previous cycle victimSize uintptr // size of victims array // New optionally specifies a function to generate // a value when Get would otherwise return nil. // It may not be changed concurrently with calls to Get. New func() interface{} } // Local per-P Pool appendix. type poolLocalInternal struct { private interface{} // Can be used only by the respective P. shared poolChain // Local P can pushHead/popHead; any P can popTail. } type poolLocal struct { poolLocalInternal // Prevents false sharing on widespread platforms with // 128 mod (cache line size) = 0 . pad [128 - unsafe.Sizeof(poolLocalInternal{})%128]byte } // from runtime func fastrand() uint32 var poolRaceHash [128]uint64 // poolRaceAddr returns an address to use as the synchronization point // for race detector logic. We don't use the actual pointer stored in x // directly, for fear of conflicting with other synchronization on that address. // Instead, we hash the pointer to get an index into poolRaceHash. // See discussion on golang.org/cl/31589. func poolRaceAddr(x interface{}) unsafe.Pointer { ptr := uintptr((*[2]unsafe.Pointer)(unsafe.Pointer(&x))[1]) h := uint32((uint64(uint32(ptr)) * 0x85ebca6b) >> 16) return unsafe.Pointer(&poolRaceHash[h%uint32(len(poolRaceHash))]) } // Put adds x to the pool. func (p *Pool) Put(x interface{}) { if x == nil { return } if race.Enabled { if fastrand()%4 == 0 { // Randomly drop x on floor. return } race.ReleaseMerge(poolRaceAddr(x)) race.Disable() } l, _ := p.pin() if l.private == nil { l.private = x x = nil } if x != nil { l.shared.pushHead(x) } runtime_procUnpin() if race.Enabled { race.Enable() } } // Get selects an arbitrary item from the Pool, removes it from the // Pool, and returns it to the caller. // Get may choose to ignore the pool and treat it as empty. // Callers should not assume any relation between values passed to Put and // the values returned by Get. // // If Get would otherwise return nil and p.New is non-nil, Get returns // the result of calling p.New. func (p *Pool) Get() interface{} { if race.Enabled { race.Disable() } l, pid := p.pin() x := l.private l.private = nil if x == nil { // Try to pop the head of the local shard. We prefer // the head over the tail for temporal locality of // reuse. x, _ = l.shared.popHead() if x == nil { x = p.getSlow(pid) } } runtime_procUnpin() if race.Enabled { race.Enable() if x != nil { race.Acquire(poolRaceAddr(x)) } } if x == nil && p.New != nil { x = p.New() } return x } func (p *Pool) getSlow(pid int) interface{} { // See the comment in pin regarding ordering of the loads. size := atomic.LoadUintptr(&p.localSize) // load-acquire locals := p.local // load-consume // Try to steal one element from other procs. for i := 0; i < int(size); i++ { l := indexLocal(locals, (pid+i+1)%int(size)) if x, _ := l.shared.popTail(); x != nil { return x } } // Try the victim cache. We do this after attempting to steal // from all primary caches because we want objects in the // victim cache to age out if at all possible. size = atomic.LoadUintptr(&p.victimSize) if uintptr(pid) >= size { return nil } locals = p.victim l := indexLocal(locals, pid) if x := l.private; x != nil { l.private = nil return x } for i := 0; i < int(size); i++ { l := indexLocal(locals, (pid+i)%int(size)) if x, _ := l.shared.popTail(); x != nil { return x } } // Mark the victim cache as empty for future gets don't bother // with it. atomic.StoreUintptr(&p.victimSize, 0) return nil } // pin pins the current goroutine to P, disables preemption and // returns poolLocal pool for the P and the P's id. // Caller must call runtime_procUnpin() when done with the pool. // pin\u5c06\u5f53\u524dgoroutine\u6307\u5411P\uff0c\u7981\u7528\u62a2\u5360\u5e76\u8fd4\u56deP\u548cP\u7684ID\u7684poolLocal pool // P \u5c31\u662f GMP \u8c03\u5ea6\u5668\u7684P\uff0c\u5c31\u662f\u5f53\u524d\u8c03\u5ea6\u5668p func (p *Pool) pin() (*poolLocal, int) { pid := runtime_procPin() // In pinSlow we store to local and then to localSize, here we load in opposite order. // Since we've disabled preemption, GC cannot happen in between. // Thus here we must observe local at least as large localSize. // We can observe a newer/larger local, it is fine (we must observe its zero-initialized-ness). s := atomic.LoadUintptr(&p.localSize) // load-acquire l := p.local // load-consume if uintptr(pid) < s { return indexLocal(l, pid), pid } return p.pinSlow() } func (p *Pool) pinSlow() (*poolLocal, int) { // Retry under the mutex. // Can not lock the mutex while pinned. runtime_procUnpin() allPoolsMu.Lock() defer allPoolsMu.Unlock() pid := runtime_procPin() // poolCleanup won't be called while we are pinned. s := p.localSize l := p.local if uintptr(pid) < s { return indexLocal(l, pid), pid } if p.local == nil { allPools = append(allPools, p) } // If GOMAXPROCS changes between GCs, we re-allocate the array and lose the old one. size := runtime.GOMAXPROCS(0) local := make([]poolLocal, size) atomic.StorePointer(&p.local, unsafe.Pointer(&local[0])) // store-release atomic.StoreUintptr(&p.localSize, uintptr(size)) // store-release return &local[pid], pid } func poolCleanup() { // This function is called with the world stopped, at the beginning of a garbage collection. // It must not allocate and probably should not call any runtime functions. // Because the world is stopped, no pool user can be in a // pinned section (in effect, this has all Ps pinned). // Drop victim caches from all pools. for _, p := range oldPools { p.victim = nil p.victimSize = 0 } // Move primary cache to victim cache. for _, p := range allPools { p.victim = p.local p.victimSize = p.localSize p.local = nil p.localSize = 0 } // The pools with non-empty primary caches now have non-empty // victim caches and no pools have primary caches. oldPools, allPools = allPools, nil } var ( allPoolsMu Mutex // allPools is the set of pools that have non-empty primary // caches. Protected by either 1) allPoolsMu and pinning or 2) // STW. allPools []*Pool // oldPools is the set of pools that may have non-empty victim // caches. Protected by STW. oldPools []*Pool ) func init() { runtime_registerPoolCleanup(poolCleanup) } func indexLocal(l unsafe.Pointer, i int) *poolLocal { lp := unsafe.Pointer(uintptr(l) + uintptr(i)*unsafe.Sizeof(poolLocal{})) return (*poolLocal)(lp) } // Implemented in runtime. func runtime_registerPoolCleanup(cleanup func()) func runtime_procPin() int func runtime_procUnpin()","title":"sync.Pool"},{"location":"post/golang/%E6%A0%87%E5%87%86%E5%8C%85/sync/sync.Pool/#syncpool","text":"pool \u4e0d\u9002\u7528\u65f6\u77ed\u671f\u7684\u4e34\u65f6\u5b58\u50a8\u5bf9\u8c61 pool\u4f1a\u968f\u65f6\u6e05\u9664\u4e14\u4e0d\u4f1a\u901a\u77e5 \u591a\u7ebf\u7a0b\u5b89\u5168 \u51cf\u5c11\u5206\u914d\u5f00\u9500\uff0c\u5bf9\u8c61\u91cd\u7528 # go1.15.6/src/sync/pool.go // Copyright 2013 The Go Authors. All rights reserved. // Use of this source code is governed by a BSD-style // license that can be found in the LICENSE file. package sync import ( \"internal/race\" \"runtime\" \"sync/atomic\" \"unsafe\" ) // A Pool is a set of temporary objects that may be individually saved and // retrieved. // Pool \u662f\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\u96c6\u5408\uff0c\u53ef\u4ee5\u9010\u4e2a\u4fdd\u5b58\u548c\u56de\u6536\u3002 // // Any item stored in the Pool may be removed automatically at any time without // notification. If the Pool holds the only reference when this happens, the // item might be deallocated. // \u4efb\u4f55\u5bf9\u8c61\u5728pool\u4e2d\u53ef\u80fd\u88ab\u5728\u4efb\u4f55\u65f6\u95f4\u81ea\u52a8\u79fb\u9664\u5e76\u6ca1\u6709\u901a\u77e5\u3002\u5982\u679c\u53d1\u751f\uff0cpool\u552f\u4e00\u5f15\u7528\u53ef\u80fd\u4f1a\u88ab\u91ca\u653e\u3002 // A Pool is safe for use by multiple goroutines simultaneously. // poll \u591agoroutines\u540c\u65f6\u4f7f\u7528\u662f\u5b89\u5168\u7684\u3002 // Pool's purpose is to cache allocated but unused items for later reuse, // relieving pressure on the garbage collector. That is, it makes it easy to // build efficient, thread-safe free lists. However, it is not suitable for all // free lists. // pool\u7684\u76ee\u7684\u662f\u7f13\u5b58\u5df2\u5206\u914d\u7684\u4f46\u672a\u4f7f\u7528\u4e3a\u4e86\u4e4b\u540e\u91cd\u7528\u3002\u51cf\u5c11\u5185\u5b58\u56de\u6536\u7684\u538b\u529b\u3002\u8fd9\u6837\u53ef\u4ee5\u8f7b\u677e\u7684\u6784\u5efa\u9ad8\u6548\u7684\u3001\u7ebf\u7a0b\u5b89\u5168\u7684\u7a7a\u95f2\u5217\u8868\u3002\u4e0d\u9002\u7528\u6240\u6709\u7a7a\u95f2\u5217\u8868 // An appropriate use of a Pool is to manage a group of temporary items // silently shared among and potentially reused by concurrent independent // clients of a package. Pool provides a way to amortize allocation overhead // across many clients. // pool \u5408\u9002\u7528\u5904\u662f\u7ba1\u7406\u4e00\u7ec4\u4e34\u65f6items\u5728\u5e76\u53d1\u5ba2\u6237\u7aef\u4e4b\u95f4\u5171\u4eab\u91cd\u7528\uff0cpool \u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u51cf\u5c11\u591a\u4e2a\u5ba2\u6237\u7aef\u7684\u5206\u914d\u5f00\u9500 // An example of good use of a Pool is in the fmt package, which maintains a // dynamically-sized store of temporary output buffers. The store scales under // load (when many goroutines are actively printing) and shrinks when // quiescent. // \u4e00\u4e2a\u597d\u7684\u4f7f\u7528\u4f8b\u5b50\u662ffmt\u5305\uff0c\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u4e34\u65f6\u5b58\u50a8\u7684buff\uff0c\u5e76\u4e14\u5728\u8d1f\u8f7d\u662f\u6269\u5bb9\uff0c\u9759\u6b62\u65f6\u6536\u7f29\u3002 // On the other hand, a free list maintained as part of a short-lived object is // not a suitable use for a Pool, since the overhead does not amortize well in // that scenario. It is more efficient to have such objects implement their own // free list. // \u53e6\u4e00\u65b9\u9762\uff0c\u77ed\u671f\u7684\u5bf9\u8c61\u7ef4\u62a4\u7a7a\u95f2\u5217\u8868\u4e0d\u9002\u5408\u4f7f\u7528pool\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u65e0\u6cd5\u505a\u5230\u5f00\u9500\u5f88\u597d\uff0c\u66f4\u597d\u7684\u662f\u5b9e\u73b0\u81ea\u5df1\u7684\u7a7a\u95f2\u5217\u8868\u3002 // A Pool must not be copied after first use. // pool \u7b2c\u4e00\u6b21\u4f7f\u7528\u4e4b\u540e\u4e0d\u80fd\u62f7\u8d1d type Pool struct { noCopy noCopy // \u6570\u7ec4\u6570\u7ec4\u6307\u9488 \u6570\u7ec4\u5927\u5c0f\u7b49\u4e8eP(GMP\u7684p\u6570\u91cf) local unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal localSize uintptr // size of the local array victim unsafe.Pointer // local from previous cycle victimSize uintptr // size of victims array // New optionally specifies a function to generate // a value when Get would otherwise return nil. // It may not be changed concurrently with calls to Get. New func() interface{} } // Local per-P Pool appendix. type poolLocalInternal struct { private interface{} // Can be used only by the respective P. shared poolChain // Local P can pushHead/popHead; any P can popTail. } type poolLocal struct { poolLocalInternal // Prevents false sharing on widespread platforms with // 128 mod (cache line size) = 0 . pad [128 - unsafe.Sizeof(poolLocalInternal{})%128]byte } // from runtime func fastrand() uint32 var poolRaceHash [128]uint64 // poolRaceAddr returns an address to use as the synchronization point // for race detector logic. We don't use the actual pointer stored in x // directly, for fear of conflicting with other synchronization on that address. // Instead, we hash the pointer to get an index into poolRaceHash. // See discussion on golang.org/cl/31589. func poolRaceAddr(x interface{}) unsafe.Pointer { ptr := uintptr((*[2]unsafe.Pointer)(unsafe.Pointer(&x))[1]) h := uint32((uint64(uint32(ptr)) * 0x85ebca6b) >> 16) return unsafe.Pointer(&poolRaceHash[h%uint32(len(poolRaceHash))]) } // Put adds x to the pool. func (p *Pool) Put(x interface{}) { if x == nil { return } if race.Enabled { if fastrand()%4 == 0 { // Randomly drop x on floor. return } race.ReleaseMerge(poolRaceAddr(x)) race.Disable() } l, _ := p.pin() if l.private == nil { l.private = x x = nil } if x != nil { l.shared.pushHead(x) } runtime_procUnpin() if race.Enabled { race.Enable() } } // Get selects an arbitrary item from the Pool, removes it from the // Pool, and returns it to the caller. // Get may choose to ignore the pool and treat it as empty. // Callers should not assume any relation between values passed to Put and // the values returned by Get. // // If Get would otherwise return nil and p.New is non-nil, Get returns // the result of calling p.New. func (p *Pool) Get() interface{} { if race.Enabled { race.Disable() } l, pid := p.pin() x := l.private l.private = nil if x == nil { // Try to pop the head of the local shard. We prefer // the head over the tail for temporal locality of // reuse. x, _ = l.shared.popHead() if x == nil { x = p.getSlow(pid) } } runtime_procUnpin() if race.Enabled { race.Enable() if x != nil { race.Acquire(poolRaceAddr(x)) } } if x == nil && p.New != nil { x = p.New() } return x } func (p *Pool) getSlow(pid int) interface{} { // See the comment in pin regarding ordering of the loads. size := atomic.LoadUintptr(&p.localSize) // load-acquire locals := p.local // load-consume // Try to steal one element from other procs. for i := 0; i < int(size); i++ { l := indexLocal(locals, (pid+i+1)%int(size)) if x, _ := l.shared.popTail(); x != nil { return x } } // Try the victim cache. We do this after attempting to steal // from all primary caches because we want objects in the // victim cache to age out if at all possible. size = atomic.LoadUintptr(&p.victimSize) if uintptr(pid) >= size { return nil } locals = p.victim l := indexLocal(locals, pid) if x := l.private; x != nil { l.private = nil return x } for i := 0; i < int(size); i++ { l := indexLocal(locals, (pid+i)%int(size)) if x, _ := l.shared.popTail(); x != nil { return x } } // Mark the victim cache as empty for future gets don't bother // with it. atomic.StoreUintptr(&p.victimSize, 0) return nil } // pin pins the current goroutine to P, disables preemption and // returns poolLocal pool for the P and the P's id. // Caller must call runtime_procUnpin() when done with the pool. // pin\u5c06\u5f53\u524dgoroutine\u6307\u5411P\uff0c\u7981\u7528\u62a2\u5360\u5e76\u8fd4\u56deP\u548cP\u7684ID\u7684poolLocal pool // P \u5c31\u662f GMP \u8c03\u5ea6\u5668\u7684P\uff0c\u5c31\u662f\u5f53\u524d\u8c03\u5ea6\u5668p func (p *Pool) pin() (*poolLocal, int) { pid := runtime_procPin() // In pinSlow we store to local and then to localSize, here we load in opposite order. // Since we've disabled preemption, GC cannot happen in between. // Thus here we must observe local at least as large localSize. // We can observe a newer/larger local, it is fine (we must observe its zero-initialized-ness). s := atomic.LoadUintptr(&p.localSize) // load-acquire l := p.local // load-consume if uintptr(pid) < s { return indexLocal(l, pid), pid } return p.pinSlow() } func (p *Pool) pinSlow() (*poolLocal, int) { // Retry under the mutex. // Can not lock the mutex while pinned. runtime_procUnpin() allPoolsMu.Lock() defer allPoolsMu.Unlock() pid := runtime_procPin() // poolCleanup won't be called while we are pinned. s := p.localSize l := p.local if uintptr(pid) < s { return indexLocal(l, pid), pid } if p.local == nil { allPools = append(allPools, p) } // If GOMAXPROCS changes between GCs, we re-allocate the array and lose the old one. size := runtime.GOMAXPROCS(0) local := make([]poolLocal, size) atomic.StorePointer(&p.local, unsafe.Pointer(&local[0])) // store-release atomic.StoreUintptr(&p.localSize, uintptr(size)) // store-release return &local[pid], pid } func poolCleanup() { // This function is called with the world stopped, at the beginning of a garbage collection. // It must not allocate and probably should not call any runtime functions. // Because the world is stopped, no pool user can be in a // pinned section (in effect, this has all Ps pinned). // Drop victim caches from all pools. for _, p := range oldPools { p.victim = nil p.victimSize = 0 } // Move primary cache to victim cache. for _, p := range allPools { p.victim = p.local p.victimSize = p.localSize p.local = nil p.localSize = 0 } // The pools with non-empty primary caches now have non-empty // victim caches and no pools have primary caches. oldPools, allPools = allPools, nil } var ( allPoolsMu Mutex // allPools is the set of pools that have non-empty primary // caches. Protected by either 1) allPoolsMu and pinning or 2) // STW. allPools []*Pool // oldPools is the set of pools that may have non-empty victim // caches. Protected by STW. oldPools []*Pool ) func init() { runtime_registerPoolCleanup(poolCleanup) } func indexLocal(l unsafe.Pointer, i int) *poolLocal { lp := unsafe.Pointer(uintptr(l) + uintptr(i)*unsafe.Sizeof(poolLocal{})) return (*poolLocal)(lp) } // Implemented in runtime. func runtime_registerPoolCleanup(cleanup func()) func runtime_procPin() int func runtime_procUnpin()","title":"sync.Pool"},{"location":"post/k8s/%E5%AE%B9%E5%99%A8%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/","text":"\u5bb9\u5668\u5316\u5b58\u50a8\u7684\u76f8\u5173\u6982\u5ff5 PV \u6301\u4e45\u5316\u5b58\u50a8\u6570\u636e\u5377 \u8fd9\u4e2aAPI\u5bf9\u8c61\u63cf\u8ff0\u7684\u662f\u4e00\u4e2a\u6301\u4e45\u5316\u5b58\u50a8\u5728\u5bbf\u4e3b\u673a\u4e0a\u7684\u76ee\u5f55\uff0c\u6bd4\u5982\u4e00\u4e2aNFS\u6302\u8f7d\u76ee\u5f55 yaml # nfs \u7684pv apiVersion: v1 kind: PersistentVolume metadata: name: nfs spec: storageClassName: manual capacity: storage: 1Gi accessModes: - ReadWriteMany nfs: server: 10.244.1.4 path: \"/\" PVC PVC \u63cf\u8ff0\u7684\u662fPOD\u6240\u5e0c\u671b\u4f7f\u7528\u7684\u6301\u4e45\u5316\u5b58\u50a8\u7684\u5c5e\u6027 \u6bd4\u5982 volume \u7684\u5927\u5c0f\u3001\u53ef\u8bfb\u5199\u6743\u9650\u7b49 yaml # PV apiVersion: v1 kind: PersistentVolumeClaim metadata: name: nfs spec: accessModes: - ReadWriteMany storageClassName: manual resources: requests: storage: 1Gi PV\u548cPVC\u7ed1\u5b9a PV\u548cPVC\u7684spec\u5b57\u6bb5\uff0cPV\u7684storage\u5927\u5c0f\u8981\u6ee1\u8db3PVC\u7684\u8981\u6c42 PV\u548cPVC\u7684storageClassName \u5b57\u6bb5\u5fc5\u987b\u4e00\u6837 ```yaml # \u5728pod\u4f7f\u7528PVC apiVersion: v1 kind: Pod metadata: labels: role: web-frontend spec: containers: name: web image: nginx ports: name: web containerPort: 80 volumeMounts: name: nfs mountPath: \"/usr/share/nginx/html\" volumes: name: nfs persistentVolumeClaim: claimName: nfs ``` PV\u548cPVC\u7684\u8bbe\u8ba1\uff0c\u548c\u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\u4e00\u81f4 PVC\u53ef\u4ee5\u7406\u89e3\u4e3a\u6301\u4e45\u5316\u5b58\u50a8\u7684\u63a5\u53e3\uff0c\u63d0\u4f9b\u6301\u4e45\u5316\u5b58\u50a8\u7684\u63cf\u8ff0\uff0c\u4f46\u4e0d\u63d0\u793a\u6301\u4e45\u5316\u5b58\u50a8\u7684\u5b9e\u73b0 PV\u662f\u6301\u4e45\u5316\u5b58\u50a8\u7684\u5b9e\u73b0 \u4e00\u822c\u662fNFS\u6216\u8005ceph \u64ae\u5408PV\u548cPVC\u7684\u662f\u7684PersistentVolumeController StorageClass","title":"\u5bb9\u5668\u6301\u4e45\u5316\u5b58\u50a8"},{"location":"post/k8s/%E5%AE%B9%E5%99%A8%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/#_1","text":"PV \u6301\u4e45\u5316\u5b58\u50a8\u6570\u636e\u5377 \u8fd9\u4e2aAPI\u5bf9\u8c61\u63cf\u8ff0\u7684\u662f\u4e00\u4e2a\u6301\u4e45\u5316\u5b58\u50a8\u5728\u5bbf\u4e3b\u673a\u4e0a\u7684\u76ee\u5f55\uff0c\u6bd4\u5982\u4e00\u4e2aNFS\u6302\u8f7d\u76ee\u5f55 yaml # nfs \u7684pv apiVersion: v1 kind: PersistentVolume metadata: name: nfs spec: storageClassName: manual capacity: storage: 1Gi accessModes: - ReadWriteMany nfs: server: 10.244.1.4 path: \"/\" PVC PVC \u63cf\u8ff0\u7684\u662fPOD\u6240\u5e0c\u671b\u4f7f\u7528\u7684\u6301\u4e45\u5316\u5b58\u50a8\u7684\u5c5e\u6027 \u6bd4\u5982 volume \u7684\u5927\u5c0f\u3001\u53ef\u8bfb\u5199\u6743\u9650\u7b49 yaml # PV apiVersion: v1 kind: PersistentVolumeClaim metadata: name: nfs spec: accessModes: - ReadWriteMany storageClassName: manual resources: requests: storage: 1Gi PV\u548cPVC\u7ed1\u5b9a PV\u548cPVC\u7684spec\u5b57\u6bb5\uff0cPV\u7684storage\u5927\u5c0f\u8981\u6ee1\u8db3PVC\u7684\u8981\u6c42 PV\u548cPVC\u7684storageClassName \u5b57\u6bb5\u5fc5\u987b\u4e00\u6837 ```yaml # \u5728pod\u4f7f\u7528PVC apiVersion: v1 kind: Pod metadata: labels: role: web-frontend spec: containers: name: web image: nginx ports: name: web containerPort: 80 volumeMounts: name: nfs mountPath: \"/usr/share/nginx/html\" volumes: name: nfs persistentVolumeClaim: claimName: nfs ``` PV\u548cPVC\u7684\u8bbe\u8ba1\uff0c\u548c\u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\u4e00\u81f4 PVC\u53ef\u4ee5\u7406\u89e3\u4e3a\u6301\u4e45\u5316\u5b58\u50a8\u7684\u63a5\u53e3\uff0c\u63d0\u4f9b\u6301\u4e45\u5316\u5b58\u50a8\u7684\u63cf\u8ff0\uff0c\u4f46\u4e0d\u63d0\u793a\u6301\u4e45\u5316\u5b58\u50a8\u7684\u5b9e\u73b0 PV\u662f\u6301\u4e45\u5316\u5b58\u50a8\u7684\u5b9e\u73b0 \u4e00\u822c\u662fNFS\u6216\u8005ceph \u64ae\u5408PV\u548cPVC\u7684\u662f\u7684PersistentVolumeController StorageClass","title":"\u5bb9\u5668\u5316\u5b58\u50a8\u7684\u76f8\u5173\u6982\u5ff5"},{"location":"post/redis/%E7%BC%93%E5%AD%98/","text":"\u7c7b\u578b \u672c\u5730\u7f13\u5b58 \u5728\u5185\u5b58\u4e2d\u8fdb\u884c\u7f13\u5b58\uff0c\u5229\u7528 map\u3001gocache\u3002 \u4f18\u70b9\uff1a\u5185\u5b58\u8bbf\u95ee\u3001\u6ca1\u6709\u8fdc\u7a0b\u4ea4\u4e92\u5f00\u9500 - \u5206\u5e03\u5f0f\u7f13\u5b58 \u826f\u597d\u7684\u6c34\u5e73\u6269\u5c55\u80fd\u529b\uff08\u7a7a\u95f4\uff09\u3001\u4f46\u662f\u9700\u6c42\u8fdc\u7a0b\u8bf7\u6c42 \u591a\u8282\u7f13\u5b58\uff08\u672c\u5730\u7f13\u5b58+\u5206\u5e03\u5f0f\u7f13\u5b58\uff09 \u672c\u5730\u7f13\u5b58 \u4fdd\u5b58\u8bbf\u95ee\u9891\u7387\u6700\u9ad8\u7684\u70ed\u70b9\u6570\u636e \u5176\u4f59\u653e\u5728\u5206\u5e03\u5f0f\u7f13\u5b58 \u4e3a\u4e86\u4fdd\u8bc1\u8f83\u9ad8\u6027\u80fd\uff0c\u90fd\u662f\u4f7f\u7528\u5185\u5b58\u6765\u4fdd\u5b58\u6570\u636e\uff0c\u7531\u4e8e\u6210\u672c\u548c\u5185\u5b58\u9650\u5236\uff0c\u5f53\u5b58\u50a8\u7684\u6570\u636e\u8d85\u8fc7\u7f13\u5b58\u5bb9\u91cf\u65f6\uff0c\u9700\u8981\u5bf9\u7f13\u5b58\u7684\u6570\u636e\u8fdb\u884c\u5254\u9664 FIFO \u6dd8\u6c70\u6700\u65e9\u6570\u636e LRU \u5254\u9664\u6700\u65e9\u6700\u5c11\u4f7f\u7528 LFU \u5254\u9664\u6700\u8fd1\u4f7f\u7528\u9891\u7387\u6700\u4f4e\u7684 redis \u652f\u6301\u7684\u57fa\u672c\u6570\u636e\u7ed3\u6784 string \u6700\u5e38\u7528\u7c7b\u578b\uff0c\u901a\u8fc7 sds\uff08simple dynamic string\uff09\u5b58\u50a8\uff0c\u5206\u914d\u5197\u4f59\u7a7a\u95f4\u51cf\u5c11\u5185\u5b58\u7684\u9891\u7e41\u5206\u914d \u4f46\u4e0d\u662f\u6240\u6709\u7c7b\u578b\u90fd\u7528 string \u4f8b\u5982 List \u548c\u5bf9\u8c61 \u7528 string \u5e8f\u5217\u5316\u5b58\u50a8\uff0c\u518d\u53cd\u5e8f\u5217\u5316\u53d6\u51fa\u3002 \u6700\u5408\u9002\u7684\u573a\u666f\u4f7f\u7528\u6700\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\u3002 \u4f7f\u7528\u573a\u666f\uff1a \u7f13\u5b58\u529f\u80fd \u8ba1\u6570\u5668 \u5171\u4eab\u7528\u6237 session hash \u7c7b\u4f3c\u4e8e map \u7ed3\u6784\u5316\u7684\u6570\u636e\uff0c\u64cd\u4f5c\u67d0\u4e2a\u5b57\u6bb5 list \u6709\u5e8f\u5217\u8868 \u5b58\u50a8\u5217\u8868\u578b\u7684\u6570\u636e\u7ed3\u6784 \u7c7b\u4f3c\u4e8e\u7c89\u4e1d\u5217\u8868\uff0c\u6587\u7ae0\u8bc4\u8bba\u5217\u8868 lrange \u8bfb\u53d6\u533a\u95f4\u6570\u636e \u5206\u9875\u67e5\u8be2 \u6d88\u606f\u961f\u5217 set \u53bb\u91cd \u4ea4\u96c6 \u5e76\u96c6 \u5dee\u96c6 sort set \u6709\u5e8f \u53bb\u91cd \u6392\u884c\u699c \u70ed\u641c\u699c \u6269\u5c55\u529f\u80fd bitmap \u5e03\u9686\u8fc7\u6ee4\u5668 BloomFilter HyperLogLog \u4e0d\u7cbe\u786e\u7684\u53bb\u91cd\u8ba1\u6570\u529f\u80fd Geospatial \u4fdd\u5b58\u5730\u7406\u4f4d\u7f6e\uff0c\u4f4d\u7f6e\u8ddd\u79bb\u8ba1\u7b97\u3001\u534a\u5f84\u8ba1\u7b97 \u9644\u8fd1\u7684\u4eba \u6700\u4f18\u5730\u56fe\u8def\u5f84 pub/sub \u8ba2\u9605 \u8ba2\u9605 pipeline \u6279\u91cf\u6267\u884c\u4e00\u7ec4\u6307\u4ee4 \u4e00\u6b21\u6027\u8fd4\u56de\u5168\u90e8\u7ed3\u679c \u51cf\u5c11\u9891\u7e41\u8fdc\u7a0b\u4ea4\u4e92 Lua \u811a\u672c\u547d\u4ee4 \u4e8b\u52a1 \u4e32\u884c\u5316\u6267\u884c \u5931\u8d25\u4e0d\u56de\u6eda \u6301\u4e45\u5316 rdb aof rdb \u628a redis \u5185\u5b58\u4e2d\u7684\u6570\u636e\u4ee5\u5feb\u7167\u7684\u5f62\u5f0f\u5199\u5165\u78c1\u76d8\uff0credis fork \u4e00\u4e2a\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u91c7\u7528\u4e8c\u8fdb\u5236\u538b\u7f29\u3002 \u9002\u5408\u707e\u5907\u3001\u4f46\u5bb9\u6613\u4e22\u5931\u4e00\u6bb5\u65f6\u95f4\u7684\u6570\u636e\uff0c\u4fdd\u5b58\u5feb\u7167\u670d\u52a1\u4e0d\u53ef\u7528 aof \u8ffd\u52a0\u8bb0\u5f55\u4fdd\u5b58 redis \u5199\u548c\u5220\u9664\u547d\u4ee4\u7684\u65e5\u5fd7 \u7075\u6d3b\u7684\u540c\u6b65\u7b56\u7565\uff0c\u652f\u6301\u79d2\u7ea7\u540c\u6b65\uff0c\u6bcf\u6b21\u4fee\u6539\u540c\u6b65\u548c\u4e0d\u540c\u6b65 \u7f3a\u70b9\u5c31\u662f\u76f8\u540c\u89c4\u6a21\u7684\u6570\u636e\u96c6\uff0cAOF \u8981\u5927\u4e8e RDB\uff0cAOF \u5728\u8fd0\u884c\u6548\u7387\u4e0a\u5f80\u5f80\u4f1a\u6162\u4e8e RDB \u9ad8\u53ef\u7528 Redis Cluster \u4f7f\u7528\u5206\u7247\u673a\u5236\uff0c\u5728\u5185\u90e8\u5206\u4e3a 16384 \u4e2a slot \u63d2\u69fd\uff0c\u5206\u5e03\u5728\u6240\u6709 master \u8282\u70b9\u4e0a\uff0c\u6bcf\u4e2a master \u8282\u70b9\u8d1f\u8d23\u4e00\u90e8\u5206 slot\u3002\u6570\u636e\u64cd\u4f5c\u65f6\u6309 key \u505a CRC16 \u6765\u8ba1\u7b97\u5728\u54ea\u4e2a slot\uff0c\u7531\u54ea\u4e2a master \u8fdb\u884c\u5904\u7406\u3002\u6570\u636e\u7684\u5197\u4f59\u662f\u901a\u8fc7 slave \u8282\u70b9\u6765\u4fdd\u969c\u3002 \u54e8\u5175 \u54e8\u5175+\u4e3b\u4ece\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6570\u636e\u4e0d\u4e22\u5931\uff0c\u4f46\u662f\u53ef\u4ee5\u4fdd\u8bc1\u96c6\u7fa4\u7684\u9ad8\u53ef\u7528 \u4e3b\u4ece master \u673a\u5668\u5199 slave \u673a\u5668\u8bfb \u7b2c\u4e00\u6b21 psync master \u5168\u91cf rdb \u540c\u6b65\u7ed9 slave\uff0c\u4e4b\u540e aof \u589e\u91cf\u540c\u6b65 key \u5931\u6548\u673a\u5668 \u4e3b\u52a8\u5220\u9664 \u88ab\u52a8\u5220\u9664\uff08key \u5230\u671f\uff09 \u5185\u5b58\u6dd8\u6c70 \u7f13\u5b58\u95ee\u9898","title":"\u7f13\u5b58"},{"location":"post/redis/%E7%BC%93%E5%AD%98/#_1","text":"\u672c\u5730\u7f13\u5b58 \u5728\u5185\u5b58\u4e2d\u8fdb\u884c\u7f13\u5b58\uff0c\u5229\u7528 map\u3001gocache\u3002 \u4f18\u70b9\uff1a\u5185\u5b58\u8bbf\u95ee\u3001\u6ca1\u6709\u8fdc\u7a0b\u4ea4\u4e92\u5f00\u9500 - \u5206\u5e03\u5f0f\u7f13\u5b58 \u826f\u597d\u7684\u6c34\u5e73\u6269\u5c55\u80fd\u529b\uff08\u7a7a\u95f4\uff09\u3001\u4f46\u662f\u9700\u6c42\u8fdc\u7a0b\u8bf7\u6c42 \u591a\u8282\u7f13\u5b58\uff08\u672c\u5730\u7f13\u5b58+\u5206\u5e03\u5f0f\u7f13\u5b58\uff09 \u672c\u5730\u7f13\u5b58 \u4fdd\u5b58\u8bbf\u95ee\u9891\u7387\u6700\u9ad8\u7684\u70ed\u70b9\u6570\u636e \u5176\u4f59\u653e\u5728\u5206\u5e03\u5f0f\u7f13\u5b58 \u4e3a\u4e86\u4fdd\u8bc1\u8f83\u9ad8\u6027\u80fd\uff0c\u90fd\u662f\u4f7f\u7528\u5185\u5b58\u6765\u4fdd\u5b58\u6570\u636e\uff0c\u7531\u4e8e\u6210\u672c\u548c\u5185\u5b58\u9650\u5236\uff0c\u5f53\u5b58\u50a8\u7684\u6570\u636e\u8d85\u8fc7\u7f13\u5b58\u5bb9\u91cf\u65f6\uff0c\u9700\u8981\u5bf9\u7f13\u5b58\u7684\u6570\u636e\u8fdb\u884c\u5254\u9664 FIFO \u6dd8\u6c70\u6700\u65e9\u6570\u636e LRU \u5254\u9664\u6700\u65e9\u6700\u5c11\u4f7f\u7528 LFU \u5254\u9664\u6700\u8fd1\u4f7f\u7528\u9891\u7387\u6700\u4f4e\u7684","title":"\u7c7b\u578b"},{"location":"post/redis/%E7%BC%93%E5%AD%98/#redis","text":"","title":"redis"},{"location":"post/redis/%E7%BC%93%E5%AD%98/#_2","text":"string \u6700\u5e38\u7528\u7c7b\u578b\uff0c\u901a\u8fc7 sds\uff08simple dynamic string\uff09\u5b58\u50a8\uff0c\u5206\u914d\u5197\u4f59\u7a7a\u95f4\u51cf\u5c11\u5185\u5b58\u7684\u9891\u7e41\u5206\u914d \u4f46\u4e0d\u662f\u6240\u6709\u7c7b\u578b\u90fd\u7528 string \u4f8b\u5982 List \u548c\u5bf9\u8c61 \u7528 string \u5e8f\u5217\u5316\u5b58\u50a8\uff0c\u518d\u53cd\u5e8f\u5217\u5316\u53d6\u51fa\u3002 \u6700\u5408\u9002\u7684\u573a\u666f\u4f7f\u7528\u6700\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\u3002 \u4f7f\u7528\u573a\u666f\uff1a \u7f13\u5b58\u529f\u80fd \u8ba1\u6570\u5668 \u5171\u4eab\u7528\u6237 session hash \u7c7b\u4f3c\u4e8e map \u7ed3\u6784\u5316\u7684\u6570\u636e\uff0c\u64cd\u4f5c\u67d0\u4e2a\u5b57\u6bb5 list \u6709\u5e8f\u5217\u8868 \u5b58\u50a8\u5217\u8868\u578b\u7684\u6570\u636e\u7ed3\u6784 \u7c7b\u4f3c\u4e8e\u7c89\u4e1d\u5217\u8868\uff0c\u6587\u7ae0\u8bc4\u8bba\u5217\u8868 lrange \u8bfb\u53d6\u533a\u95f4\u6570\u636e \u5206\u9875\u67e5\u8be2 \u6d88\u606f\u961f\u5217 set \u53bb\u91cd \u4ea4\u96c6 \u5e76\u96c6 \u5dee\u96c6 sort set \u6709\u5e8f \u53bb\u91cd \u6392\u884c\u699c \u70ed\u641c\u699c","title":"\u652f\u6301\u7684\u57fa\u672c\u6570\u636e\u7ed3\u6784"},{"location":"post/redis/%E7%BC%93%E5%AD%98/#_3","text":"bitmap \u5e03\u9686\u8fc7\u6ee4\u5668 BloomFilter HyperLogLog \u4e0d\u7cbe\u786e\u7684\u53bb\u91cd\u8ba1\u6570\u529f\u80fd Geospatial \u4fdd\u5b58\u5730\u7406\u4f4d\u7f6e\uff0c\u4f4d\u7f6e\u8ddd\u79bb\u8ba1\u7b97\u3001\u534a\u5f84\u8ba1\u7b97 \u9644\u8fd1\u7684\u4eba \u6700\u4f18\u5730\u56fe\u8def\u5f84 pub/sub \u8ba2\u9605 \u8ba2\u9605 pipeline \u6279\u91cf\u6267\u884c\u4e00\u7ec4\u6307\u4ee4 \u4e00\u6b21\u6027\u8fd4\u56de\u5168\u90e8\u7ed3\u679c \u51cf\u5c11\u9891\u7e41\u8fdc\u7a0b\u4ea4\u4e92 Lua \u811a\u672c\u547d\u4ee4 \u4e8b\u52a1 \u4e32\u884c\u5316\u6267\u884c \u5931\u8d25\u4e0d\u56de\u6eda","title":"\u6269\u5c55\u529f\u80fd"},{"location":"post/redis/%E7%BC%93%E5%AD%98/#rdb-aof","text":"rdb \u628a redis \u5185\u5b58\u4e2d\u7684\u6570\u636e\u4ee5\u5feb\u7167\u7684\u5f62\u5f0f\u5199\u5165\u78c1\u76d8\uff0credis fork \u4e00\u4e2a\u5b50\u8fdb\u7a0b\u6267\u884c\uff0c\u91c7\u7528\u4e8c\u8fdb\u5236\u538b\u7f29\u3002 \u9002\u5408\u707e\u5907\u3001\u4f46\u5bb9\u6613\u4e22\u5931\u4e00\u6bb5\u65f6\u95f4\u7684\u6570\u636e\uff0c\u4fdd\u5b58\u5feb\u7167\u670d\u52a1\u4e0d\u53ef\u7528 aof \u8ffd\u52a0\u8bb0\u5f55\u4fdd\u5b58 redis \u5199\u548c\u5220\u9664\u547d\u4ee4\u7684\u65e5\u5fd7 \u7075\u6d3b\u7684\u540c\u6b65\u7b56\u7565\uff0c\u652f\u6301\u79d2\u7ea7\u540c\u6b65\uff0c\u6bcf\u6b21\u4fee\u6539\u540c\u6b65\u548c\u4e0d\u540c\u6b65 \u7f3a\u70b9\u5c31\u662f\u76f8\u540c\u89c4\u6a21\u7684\u6570\u636e\u96c6\uff0cAOF \u8981\u5927\u4e8e RDB\uff0cAOF \u5728\u8fd0\u884c\u6548\u7387\u4e0a\u5f80\u5f80\u4f1a\u6162\u4e8e RDB","title":"\u6301\u4e45\u5316 rdb aof"},{"location":"post/redis/%E7%BC%93%E5%AD%98/#_4","text":"Redis Cluster \u4f7f\u7528\u5206\u7247\u673a\u5236\uff0c\u5728\u5185\u90e8\u5206\u4e3a 16384 \u4e2a slot \u63d2\u69fd\uff0c\u5206\u5e03\u5728\u6240\u6709 master \u8282\u70b9\u4e0a\uff0c\u6bcf\u4e2a master \u8282\u70b9\u8d1f\u8d23\u4e00\u90e8\u5206 slot\u3002\u6570\u636e\u64cd\u4f5c\u65f6\u6309 key \u505a CRC16 \u6765\u8ba1\u7b97\u5728\u54ea\u4e2a slot\uff0c\u7531\u54ea\u4e2a master \u8fdb\u884c\u5904\u7406\u3002\u6570\u636e\u7684\u5197\u4f59\u662f\u901a\u8fc7 slave \u8282\u70b9\u6765\u4fdd\u969c\u3002 \u54e8\u5175 \u54e8\u5175+\u4e3b\u4ece\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6570\u636e\u4e0d\u4e22\u5931\uff0c\u4f46\u662f\u53ef\u4ee5\u4fdd\u8bc1\u96c6\u7fa4\u7684\u9ad8\u53ef\u7528 \u4e3b\u4ece master \u673a\u5668\u5199 slave \u673a\u5668\u8bfb \u7b2c\u4e00\u6b21 psync master \u5168\u91cf rdb \u540c\u6b65\u7ed9 slave\uff0c\u4e4b\u540e aof \u589e\u91cf\u540c\u6b65 key \u5931\u6548\u673a\u5668 \u4e3b\u52a8\u5220\u9664 \u88ab\u52a8\u5220\u9664\uff08key \u5230\u671f\uff09 \u5185\u5b58\u6dd8\u6c70 \u7f13\u5b58\u95ee\u9898","title":"\u9ad8\u53ef\u7528"},{"location":"post/redis/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/","text":"redis \u7f13\u5b58\u95ee\u9898 \u7f13\u5b58\u96ea\u5d29 \u7f13\u5b58\u5927\u6279\u91cf\u5931\u6548\uff08\u4f8b\u5982\u70ed\u70b9\u6570\u636e\u7684 key \u5931\u6548\u65f6\u95f4\u90fd\u662f\u540c\u4e00\u65f6\u523b\uff09\uff0c\u5927\u91cf\u8bf7\u6c42\u76f4\u63a5\u6253\u5230\u6570\u636e\u5e93\u4e0a\uff0c\u6570\u636e\u5e93\u625b\u4e0d\u4f4f\u6302\u4e86\uff0c\u5c31\u7b97\u91cd\u542f\u6570\u636e\u5e93\uff0c\u53c8\u88ab\u65b0\u7684\u6d41\u91cf\u6253\u6b7b\u3002 \u89e3\u51b3 key \u7684\u5931\u6548\u65f6\u95f4\u52a0\u4e2a\u968f\u673a\u503c\uff0c\u6216\u8005\u6c38\u4e0d\u8fc7\u671f\uff0c\u6570\u636e\u66f4\u65b0\u518d\u5237\u65b0\u7f13\u5b58\u3002 setRedis\uff08Key\uff0cvalue\uff0ctime + Math.random() * 10000\uff09\uff1b \u7f13\u5b58\u7a7f\u900f \u8bf7\u6c42\u7684\u6570\u636e\u5728\u7f13\u5b58\u548c\u6570\u636e\u5e93\u4e2d\u90fd\u4e0d\u5b58\u5728\uff08id -1 \u6216\u8005\u7279\u522b\u5927\u7684id\u503c\uff09\uff0c\u5927\u5e76\u53d1\u8bf7\u6c42\u843d\u5230\u6570\u636e\u5e93\u4e0a\u3002 \u89e3\u51b3 1. \u5728\u63a5\u53e3\u5c42\u589e\u52a0\u53c2\u6570\u9a8c\u8bc1\u3001\u7528\u6237\u9274\u6743\u3001\u4f8b\u5982 id <= 0 return\uff1b 2. ip \u591a\u6b21\u8bf7\u6c42\u9650\u5236\uff0c\u8d85\u8fc7\u9608\u503c\u9ed1\u540d\u5355\uff1b 3. redis \u5e03\u9686\u8fc7\u6ee4\u5668\uff1b \u5f15\u7533 \u5206\u9875\u67e5\u8be2\uff0c\u5982\u679c\u6ca1\u6709\u5bf9\u5206\u9875\u53c2\u6570\u505a\u9650\u5236\uff0c\u67e5\u8be2\u5927\u9875\u5bfc\u81f4\u6570\u636e\u5e93\u6162\u67e5\u8be2\uff0c\u5f71\u54cd\u6570\u636e\u5e93\u3002 \u7f13\u5b58\u51fb\u7a7f \u5bf9\u4e00\u4e2a key \u4e0d\u505c\u7684\u5927\u5e76\u53d1\u8bbf\u95ee\uff0c\u5728key\u5931\u6548\u7684\u77ac\u95f4\uff0c\u6301\u7eed\u7684\u5927\u5e76\u53d1\u7a7f\u900f\u7f13\u5b58\uff0c\u76f4\u63a5\u8bf7\u6c42\u6570\u636e\u5e93\u3002 \u89e3\u51b3 1. \u70ed\u70b9\u6570\u636e\u6c38\u4e0d\u8fc7\u671f\uff1b 2. \u4e92\u65a5\u9501 \u5f15\u7533 \u4e8b\u524d redis HA\u3001\u4e3b\u4ece+\u54e8\u5175\u3001Redis cluster \u907f\u514d\u66f2\u5267\u5d29\u6e83 \u4e8b\u540e \u672c\u5730\u7f13\u5b58\u3001\u9650\u6d41+\u964d\u7ea7\u3001\u907f\u514d Mysql \u88ab\u6253\u6b7b\uff1b\u9650\u6d41\u727a\u7272\u90e8\u5206\u7528\u6237\u4f53\u9a8c\uff0c\u4fdd\u8bc1\u6570\u636e\u5e93\u4e0d\u6b7b\uff1b","title":"\u7f13\u5b58\u95ee\u9898"},{"location":"post/redis/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/#redis","text":"","title":"redis \u7f13\u5b58\u95ee\u9898"},{"location":"post/redis/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/#_1","text":"\u7f13\u5b58\u5927\u6279\u91cf\u5931\u6548\uff08\u4f8b\u5982\u70ed\u70b9\u6570\u636e\u7684 key \u5931\u6548\u65f6\u95f4\u90fd\u662f\u540c\u4e00\u65f6\u523b\uff09\uff0c\u5927\u91cf\u8bf7\u6c42\u76f4\u63a5\u6253\u5230\u6570\u636e\u5e93\u4e0a\uff0c\u6570\u636e\u5e93\u625b\u4e0d\u4f4f\u6302\u4e86\uff0c\u5c31\u7b97\u91cd\u542f\u6570\u636e\u5e93\uff0c\u53c8\u88ab\u65b0\u7684\u6d41\u91cf\u6253\u6b7b\u3002","title":"\u7f13\u5b58\u96ea\u5d29"},{"location":"post/redis/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/#_2","text":"key \u7684\u5931\u6548\u65f6\u95f4\u52a0\u4e2a\u968f\u673a\u503c\uff0c\u6216\u8005\u6c38\u4e0d\u8fc7\u671f\uff0c\u6570\u636e\u66f4\u65b0\u518d\u5237\u65b0\u7f13\u5b58\u3002 setRedis\uff08Key\uff0cvalue\uff0ctime + Math.random() * 10000\uff09\uff1b","title":"\u89e3\u51b3"},{"location":"post/redis/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/#_3","text":"\u8bf7\u6c42\u7684\u6570\u636e\u5728\u7f13\u5b58\u548c\u6570\u636e\u5e93\u4e2d\u90fd\u4e0d\u5b58\u5728\uff08id -1 \u6216\u8005\u7279\u522b\u5927\u7684id\u503c\uff09\uff0c\u5927\u5e76\u53d1\u8bf7\u6c42\u843d\u5230\u6570\u636e\u5e93\u4e0a\u3002","title":"\u7f13\u5b58\u7a7f\u900f"},{"location":"post/redis/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/#_4","text":"1. \u5728\u63a5\u53e3\u5c42\u589e\u52a0\u53c2\u6570\u9a8c\u8bc1\u3001\u7528\u6237\u9274\u6743\u3001\u4f8b\u5982 id <= 0 return\uff1b 2. ip \u591a\u6b21\u8bf7\u6c42\u9650\u5236\uff0c\u8d85\u8fc7\u9608\u503c\u9ed1\u540d\u5355\uff1b 3. redis \u5e03\u9686\u8fc7\u6ee4\u5668\uff1b \u5f15\u7533 \u5206\u9875\u67e5\u8be2\uff0c\u5982\u679c\u6ca1\u6709\u5bf9\u5206\u9875\u53c2\u6570\u505a\u9650\u5236\uff0c\u67e5\u8be2\u5927\u9875\u5bfc\u81f4\u6570\u636e\u5e93\u6162\u67e5\u8be2\uff0c\u5f71\u54cd\u6570\u636e\u5e93\u3002","title":"\u89e3\u51b3"},{"location":"post/redis/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/#_5","text":"\u5bf9\u4e00\u4e2a key \u4e0d\u505c\u7684\u5927\u5e76\u53d1\u8bbf\u95ee\uff0c\u5728key\u5931\u6548\u7684\u77ac\u95f4\uff0c\u6301\u7eed\u7684\u5927\u5e76\u53d1\u7a7f\u900f\u7f13\u5b58\uff0c\u76f4\u63a5\u8bf7\u6c42\u6570\u636e\u5e93\u3002","title":"\u7f13\u5b58\u51fb\u7a7f"},{"location":"post/redis/%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/#_6","text":"1. \u70ed\u70b9\u6570\u636e\u6c38\u4e0d\u8fc7\u671f\uff1b 2. \u4e92\u65a5\u9501 \u5f15\u7533 \u4e8b\u524d redis HA\u3001\u4e3b\u4ece+\u54e8\u5175\u3001Redis cluster \u907f\u514d\u66f2\u5267\u5d29\u6e83 \u4e8b\u540e \u672c\u5730\u7f13\u5b58\u3001\u9650\u6d41+\u964d\u7ea7\u3001\u907f\u514d Mysql \u88ab\u6253\u6b7b\uff1b\u9650\u6d41\u727a\u7272\u90e8\u5206\u7528\u6237\u4f53\u9a8c\uff0c\u4fdd\u8bc1\u6570\u636e\u5e93\u4e0d\u6b7b\uff1b","title":"\u89e3\u51b3"},{"location":"post/%E5%85%B6%E4%BB%96/%E6%8F%90%E9%AB%98%E7%94%9F%E4%BA%A7%E5%8A%9B%E7%9A%84%E5%B7%A5%E5%85%B7/","text":"Golang \u7f16\u8f91\u5668 Goland(\u63a8\u8350) vscode(\u66ff\u4ee3) \u641c\u7d22\u3001\u5f00\u53d1\u6548\u7387\u5de5\u5177 chrome utools Mac \u805a\u7126\u641c\u7d22\u7684\u7ec8\u6781\u7248 redash \u6570\u636e\u5206\u6790\u7684dashboard \u6570\u636e\u5e93 \u5ba2\u6237\u7aef datagrip Navicat \u5ba1\u6838 Yearning \u4ecb\u7ecd https://mp.weixin.qq.com/s/vKdSab60Q1m4pNcSVfgytA portainer docker\u5bb9\u5668\u7ba1\u7406dashboard,\u652f\u6301webhook\u89e6\u53d1\u90e8\u7f72\u5bb9\u5668\uff0c\u53ef\u4ee5\u914d\u5408ci\u5de5\u5177\u90e8\u7f72\u670d\u52a1\u3002 - \u53c2\u8003\u6587\u7ae0 https://medium.com/better-programming/even-the-smallest-side-project-deserves-its-ci-cd-pipeline-281f80f39fdf AnotherRedisDesktopManager Linux\u3001Mac\u3001Win\u7684redis \u5ba2\u6237\u7aef bloomrpc grpc \u8c03\u8bd5\u5de5\u5177\u5ba2\u6237\u7aef \u601d\u7ef4\u5bfc\u56fe xmind processon termainal zsh + Iterm +tmux blog hugo + xxx.github.io + github action(\u81ea\u52a8\u90e8\u7f72) + markdown API \u6587\u6863 YApi \u662f\u4e00\u4e2a\u53ef\u672c\u5730\u90e8\u7f72\u7684\u3001\u6253\u901a\u524d\u540e\u7aef\u53caQA\u7684\u3001\u53ef\u89c6\u5316\u7684\u63a5\u53e3\u7ba1\u7406\u5e73\u53f0\uff0c\u652f\u6301\u81ea\u5b9a\u4e49OAuth Postman \u53ef\u53d8\u53d8\u91cf\u8fdb\u884c\u73af\u5883\u5207\u6362 \u6301\u7eed\u66f4\u65b0 2020\u5e7412\u670815\u65e518:43:39","title":"\u751f\u4ea7\u529b\u5de5\u5177"},{"location":"post/%E5%85%B6%E4%BB%96/%E6%8F%90%E9%AB%98%E7%94%9F%E4%BA%A7%E5%8A%9B%E7%9A%84%E5%B7%A5%E5%85%B7/#golang","text":"Goland(\u63a8\u8350) vscode(\u66ff\u4ee3)","title":"Golang \u7f16\u8f91\u5668"},{"location":"post/%E5%85%B6%E4%BB%96/%E6%8F%90%E9%AB%98%E7%94%9F%E4%BA%A7%E5%8A%9B%E7%9A%84%E5%B7%A5%E5%85%B7/#_1","text":"chrome utools Mac \u805a\u7126\u641c\u7d22\u7684\u7ec8\u6781\u7248 redash \u6570\u636e\u5206\u6790\u7684dashboard \u6570\u636e\u5e93 \u5ba2\u6237\u7aef datagrip Navicat \u5ba1\u6838 Yearning \u4ecb\u7ecd https://mp.weixin.qq.com/s/vKdSab60Q1m4pNcSVfgytA portainer docker\u5bb9\u5668\u7ba1\u7406dashboard,\u652f\u6301webhook\u89e6\u53d1\u90e8\u7f72\u5bb9\u5668\uff0c\u53ef\u4ee5\u914d\u5408ci\u5de5\u5177\u90e8\u7f72\u670d\u52a1\u3002 - \u53c2\u8003\u6587\u7ae0 https://medium.com/better-programming/even-the-smallest-side-project-deserves-its-ci-cd-pipeline-281f80f39fdf AnotherRedisDesktopManager Linux\u3001Mac\u3001Win\u7684redis \u5ba2\u6237\u7aef bloomrpc grpc \u8c03\u8bd5\u5de5\u5177\u5ba2\u6237\u7aef \u601d\u7ef4\u5bfc\u56fe xmind processon termainal zsh + Iterm +tmux blog hugo + xxx.github.io + github action(\u81ea\u52a8\u90e8\u7f72) + markdown API \u6587\u6863 YApi \u662f\u4e00\u4e2a\u53ef\u672c\u5730\u90e8\u7f72\u7684\u3001\u6253\u901a\u524d\u540e\u7aef\u53caQA\u7684\u3001\u53ef\u89c6\u5316\u7684\u63a5\u53e3\u7ba1\u7406\u5e73\u53f0\uff0c\u652f\u6301\u81ea\u5b9a\u4e49OAuth Postman \u53ef\u53d8\u53d8\u91cf\u8fdb\u884c\u73af\u5883\u5207\u6362","title":"\u641c\u7d22\u3001\u5f00\u53d1\u6548\u7387\u5de5\u5177"},{"location":"post/%E5%85%B6%E4%BB%96/%E6%8F%90%E9%AB%98%E7%94%9F%E4%BA%A7%E5%8A%9B%E7%9A%84%E5%B7%A5%E5%85%B7/#20201215184339","text":"","title":"\u6301\u7eed\u66f4\u65b0 2020\u5e7412\u670815\u65e518:43:39"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/","text":"\u7b2c\u4e03\u7ae0 \u4e8b\u52a1 1.\u4e3a\u4ec0\u4e48\u9700\u8981\u4e8b\u52a1 \u7f51\u7edc\u3001\u5e94\u7528\u7a0b\u5e8f\u3001\u8f6f\u4ef6\u786c\u4ef6\u4f1a\u5728\u4efb\u610f\u65f6\u523b\u5d29\u6e83\u3002 \u5e76\u53d1\u3001\u6570\u636e\u7ade\u4e89 \u4e8b\u52a1\u662f\u5e94\u7528\u7a0b\u5e8f\u5c06\u591a\u4e2a\u8bfb\u5199\u64cd\u4f5c\u7ec4\u5408\u6210\u4e00\u4e2a\u903b\u8f91\u5355\u5143\u7684\u4e00\u79cd\u65b9\u5f0f 2. ACID Atomicity\u3001Consistency\u3001Isolation\u3001Durability Atomicity \u4e8b\u52a1\u662f\u539f\u5b50\u6027\u4e0d\u53ef\u5207\u5206 Consistency \u5bf9\u6570\u636e\u7684\u4e00\u7ec4\u7279\u5b9a\u7ea6\u675f\u5fc5\u987b\u59cb\u7ec8\u6210\u7acb \u4e8b\u52a1\u6267\u884c\u8d26\u6237A\u51cf\u5c11\u5fc5\u987bB\u5bf9\u5e94\u589e\u52a0\uff0c\u8d26\u6237\u6574\u4f53\u4e0a\u5fc5\u987b\u501f\u8d37\u76f8\u62b5 Isolation \u540c\u65f6\u6267\u884c\u7684\u4e8b\u52a1\u662f\u9694\u79bb\u7684 Durability \u4e8b\u52a1\u6267\u884c\u5b8c\u6210\uff0c\u5199\u5165\u6570\u636e\u4e0d\u4f1a\u4e22\u5931 \u4e00\u4e2a\u4e8b\u52a1\u8bfb\u53d6\u53e6\u4e00\u4e2a\u4e8b\u52a1\u7684\u672a\u88ab\u6267\u884c\u7684\u5199\u5165\uff08\u201c\u810f\u8bfb\u201d\uff09\u3002 2.1\u4e3a\u4ec0\u4e48\u9700\u8981\u5f31\u9694\u79bb\u7ea7\u522b\uff1f \u5f53\u4e24\u4e2a\u4e8b\u52a1\u4e0d\u89e6\u53ca\u76f8\u540c\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u5b89\u5168\u7684\u5e76\u53d1\u8fd0\u884c\uff0c\u4e24\u8005\u4e0d\u4f9d\u8d56\u53e6\u4e00\u4e2a\u3002 \u5f53\u4fee\u6539\u540c\u4e00\u6570\u636e\u65f6\uff0c\u4f1a\u51fa\u73b0\u5e76\u53d1\u95ee\u9898\uff0c\u6570\u636e\u5e93\u901a\u8fc7\u4e8b\u52a1\u9694\u79bb\u89e3\u51b3 \u53ef\u5e8f\u5217\u5316 \u4e32\u884c\u6267\u884c\uff0c\u6027\u80fd\u635f\u5931 \u4e0d\u53ef\u4e32\u884c\u5316(\u5f31\u9694\u79bb\u7ea7\u522b) \u8bfb\u672a\u63d0\u4ea4 \u9632\u6b62\u810f\u5199 \u4e0d\u9632\u6b62 \u810f\u8bfb (\u4e00\u4e2a\u4e8b\u52a1\u4e3a\u63d0\u4ea4\u6216\u8005\u7ec8\u6b62\uff0c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u770b\u5230\u672a\u63d0\u4ea4\u7684\u6570\u636e) \u8bfb\u5df2\u63d0\u4ea4(\u6700\u57fa\u672c\u7684\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b) \u53ea\u80fd\u770b\u5230\u5df2\u63d0\u4ea4\u7684\u6570\u636e(\u6ca1\u6709\u85cf\u8bfb) \u53ea\u4f1a\u8986\u76d6\u5df2\u7ecf\u5199\u5165\u7684\u6570\u636e(\u6ca1\u6709\u810f\u5199) \u884c\u9501(row-level lock)\u9632\u6b62\u810f\u5199\uff0c\u4fee\u6539\u5bf9\u8c61\u65f6\uff0c\u5fc5\u987b\u5148\u83b7\u5f97\u9501 \u4f46\u884c\u7ea7\u9501\u4f1a\u963b\u585e\u8bfb\u8bf7\u6c42\uff0c\u4e0d\u80fd\u8bbf\u95ee\u6570\u636e\uff0c\u6240\u4ee5\u5bf9\u4fee\u6539\u524d\u6570\u636e\u8fdb\u884c\u5feb\u7167\uff0c\u8ba9\u8bfb\u53d6\u6c42\u53bb\u4ece\u5feb\u7167\u83b7\u53d6\u6570\u636e \u5feb\u7167\u9694\u79bb\u548c\u53ef\u91cd\u590d\u8bfb \u53ef\u91cd\u590d\u8bfb \u53ef\u91cd\u590d\u8bfb\u6307\u7684\u662f\u540c\u4e00\u884c\u5728\u540c\u4e00\u4e2a\u4e8b\u52a1\u4e0b\u65e0\u8bba\u600e\u4e48\u8bfb\u53d6\u90fd\u662f\u540c\u4e00\u4e2a\u7ed3\u679c \u6570\u636e\u5e93\u5fc5\u987b\u53ef\u80fd\u4fdd\u7559\u4e00\u4e2a\u5bf9\u8c61\u7684\u51e0\u4e2a\u4e0d\u540c\u7684\u63d0\u4ea4\u7248\u672c\uff0c\u56e0\u4e3a\u5404\u79cd\u6b63\u5728\u8fdb\u884c\u7684\u4e8b\u52a1\u53ef\u80fd\u9700\u8981\u770b\u5230\u6570\u636e\u5e93\u5728\u4e0d\u540c\u7684\u65f6\u95f4\u70b9\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u5b83\u5e76\u6392\u7ef4\u62a4\u7740\u591a\u4e2a\u7248\u672c\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u8fd9\u79cd\u6280\u672f\u88ab\u79f0\u4e3a \u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236 \u4f7f\u7528\u591a\u7248\u672c\u5bf9\u8c61\u5b9e\u73b0\u5feb\u7167\u9694\u79bb \u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u6709\u4e00\u4e2a created_by \u5b57\u6bb5\uff0c\u5176\u4e2d\u5305\u542b\u5c06\u8be5\u884c\u63d2\u5165\u5230\u8868\u4e2d\u7684\u7684\u4e8b\u52a1ID \u6bcf\u884c\u90fd\u6709\u4e00\u4e2a deleted_by \u5b57\u6bb5\uff0c\u6700\u521d\u662f\u7a7a\u7684\u3002\u5982\u679c\u67d0\u4e2a\u4e8b\u52a1\u5220\u9664\u4e86\u4e00\u884c\uff0c\u90a3\u4e48\u8be5\u884c\u5b9e\u9645\u4e0a\u5e76\u672a\u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\uff0c\u800c\u662f\u901a\u8fc7\u5c06 deleted_by \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u8bf7\u6c42\u5220\u9664\u7684\u4e8b\u52a1\u7684ID\u6765\u6807\u8bb0\u4e3a\u5220\u9664 \u5728\u7a0d\u540e\u7684\u65f6\u95f4\uff0c\u5f53\u786e\u5b9a\u6ca1\u6709\u4e8b\u52a1\u53ef\u4ee5\u518d\u8bbf\u95ee\u5df2\u5220\u9664\u7684\u6570\u636e\u65f6\uff0c\u6570\u636e\u5e93\u4e2d\u7684\u5783\u573e\u6536\u96c6\u8fc7\u7a0b\u4f1a\u5c06\u6240\u6709\u5e26\u6709\u5220\u9664\u6807\u8bb0\u7684\u884c\u79fb\u9664\uff0c\u5e76\u91ca\u653e\u5176\u7a7a\u95f4 \u89c2\u5bdf\u4e00\u81f4\u6027\u5feb\u7167\u7684\u53ef\u89c1\u6027\u89c4\u5219(\u53ef\u89c1\u4e00\u4e2a\u5bf9\u8c61) \u8bfb\u4e8b\u52a1\u5f00\u59cb\u65f6\uff0c\u521b\u5efa\u8be5\u5bf9\u8c61\u7684\u4e8b\u52a1\u5df2\u7ecf\u63d0\u4ea4\u3002 \u5bf9\u8c61\u672a\u88ab\u6807\u8bb0\u4e3a\u5220\u9664\uff0c\u6216\u5982\u679c\u88ab\u6807\u8bb0\u4e3a\u5220\u9664\uff0c\u8bf7\u6c42\u5220\u9664\u7684\u4e8b\u52a1\u5728\u8bfb\u4e8b\u52a1\u5f00\u59cb\u65f6\u5c1a\u672a\u63d0\u4ea4\u3002 \u5feb\u7167\u9694\u79bb\u5f71\u54cd\u7d22\u5f15 \u4e00\u79cd\u9009\u62e9\u662f\u4f7f\u7d22\u5f15\u7b80\u5355\u5730\u6307\u5411\u5bf9\u8c61\u7684\u6240\u6709\u7248\u672c \u5e76\u4e14\u9700\u8981\u7d22\u5f15\u67e5\u8be2\u6765\u8fc7\u6ee4\u6389\u5f53\u524d\u4e8b\u52a1\u4e0d\u53ef\u89c1\u7684\u4efb\u4f55\u5bf9\u8c61\u7248\u672c \u5f53\u5783\u573e\u6536\u96c6\u5220\u9664\u4efb\u4f55\u4e8b\u52a1\u4e0d\u518d\u53ef\u89c1\u7684\u65e7\u5bf9\u8c61\u7248\u672c\u65f6\uff0c\u76f8\u5e94\u7684\u7d22\u5f15\u6761\u76ee\u4e5f\u53ef\u4ee5\u88ab\u5220\u9664\u3002 \u4f7f\u7528\u4ec5\u8ffd\u52a0\u7684B\u6811\uff0c\u6bcf\u4e2a\u5199\u5165\u4e8b\u52a1\uff08\u6216\u4e00\u6279\u4e8b\u52a1\uff09\u90fd\u4f1a\u521b\u5efa\u4e00\u9897\u65b0\u7684B\u6811\uff0c\u5f53\u521b\u5efa\u65f6\uff0c\u4ece\u8be5\u7279\u5b9a\u6811\u6839\u751f\u957f\u7684\u6811\u5c31\u662f\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u4e00\u81f4\u6027\u5feb\u7167 \u6ca1\u5fc5\u8981\u6839\u636e\u4e8b\u52a1ID\u8fc7\u6ee4\u6389\u5bf9\u8c61\uff0c\u56e0\u4e3a\u540e\u7eed\u5199\u5165\u4e0d\u80fd\u4fee\u6539\u73b0\u6709\u7684B\u6811\uff1b\u5b83\u4eec\u53ea\u80fd\u521b\u5efa\u65b0\u7684\u6811\u6839\u3002\u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u9700\u8981\u4e00\u4e2a\u8d1f\u8d23\u538b\u7f29\u548c\u5783\u573e\u6536\u96c6\u7684\u540e\u53f0\u8fdb\u7a0b\u3002 \u53ef\u91cd\u590d\u8bfb\u4e0e\u547d\u540d\u6df7\u6dc6 \u5728Oracle\u4e2d\u79f0\u4e3a \u53ef\u5e8f\u5217\u5316\uff08Serializable\uff09* \u7684\uff0c \u5728PostgreSQL\u548cMySQL\u4e2d\u79f0\u4e3a* \u53ef\u91cd\u590d\u8bfb\uff08repeatable read\uff09 \u301023\u3011\u3002 2.2 \u9632\u6b62\u4e22\u5931\u66f4\u65b0 \u5982\u679c\u5e94\u7528\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u503c\uff0c\u4fee\u6539\u5199\u56de\u4fee\u6539\u7684\u503c\uff08\u8bfb\u53d6-\u4fee\u6539-\u5199\u5165\u5e8f\u5217\uff09\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u4e22\u5931\u66f4\u65b0\u7684\u95ee\u9898\u3002 \u5982\u679c\u4e24\u4e2a\u4e8b\u52a1\u540c\u65f6\u6267\u884c\uff0c\u5219\u5176\u4e2d\u4e00\u4e2a\u7684\u4fee\u6539\u53ef\u80fd\u4f1a\u4e22\u5931\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u4e2a\u5199\u5165\u7684\u5185\u5bb9\u5e76\u6ca1\u6709\u5305\u62ec\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u7684\u4fee\u6539\uff08\u6709\u65f6\u4f1a\u8bf4\u540e\u9762\u5199\u5165 \u72e0\u63cd\uff08clobber\uff09 \u4e86\u524d\u9762\u7684\u5199\u5165\uff09\u8fd9\u79cd\u6a21\u5f0f\u53d1\u751f\u5728\u5404\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff1a \u589e\u52a0\u8ba1\u6570\u5668\u6216\u66f4\u65b0\u8d26\u6237\u4f59\u989d\uff08\u9700\u8981\u8bfb\u53d6\u5f53\u524d\u503c\uff0c\u8ba1\u7b97\u65b0\u503c\u5e76\u5199\u56de\u66f4\u65b0\u540e\u7684\u503c\uff09 \u5728\u590d\u6742\u503c\u4e2d\u8fdb\u884c\u672c\u5730\u4fee\u6539\uff1a\u4f8b\u5982\uff0c\u5c06\u5143\u7d20\u6dfb\u52a0\u5230JSON\u6587\u6863\u4e2d\u7684\u4e00\u4e2a\u5217\u8868\uff08\u9700\u8981\u89e3\u6790\u6587\u6863\uff0c\u8fdb\u884c\u66f4\u6539\u5e76\u5199\u56de\u4fee\u6539\u7684\u6587\u6863\uff09 \u4e24\u4e2a\u7528\u6237\u540c\u65f6\u7f16\u8f91wiki\u9875\u9762\uff0c\u6bcf\u4e2a\u7528\u6237\u901a\u8fc7\u5c06\u6574\u4e2a\u9875\u9762\u5185\u5bb9\u53d1\u9001\u5230\u670d\u52a1\u5668\u6765\u4fdd\u5b58\u5176\u66f4\u6539\uff0c\u8986\u5199\u6570\u636e\u5e93\u4e2d\u5f53\u524d\u7684\u4efb\u4f55\u5185\u5bb9\u3002 \u89e3\u51b3\uff1a - \u539f\u5b50\u5199 UPDATE counters SET value = value + 1 WHERE key = 'foo'; \u663e\u5f0f\u9501\u5b9a BEGIN TRANSACTION; SELECT * FROM figures WHERE name = 'robot' AND game_id = 222 FOR UPDATE; -- \u68c0\u67e5\u73a9\u5bb6\u7684\u64cd\u4f5c\u662f\u5426\u6709\u6548\uff0c\u7136\u540e\u66f4\u65b0\u5148\u524dSELECT\u8fd4\u56de\u68cb\u5b50\u7684\u4f4d\u7f6e\u3002 UPDATE figures SET position = 'c4' WHERE id = 1234; COMMIT; \u6bd4\u8f83\u5e76\u8bbe\u7f6e\uff08CAS\uff09compare and set \u4f46\u662f\uff0c\u5982\u679c\u6570\u636e\u5e93\u5141\u8bb8 WHERE \u5b50\u53e5\u4ece\u65e7\u5feb\u7167\u4e2d\u8bfb\u53d6\uff0c\u5219\u6b64\u8bed\u53e5\u53ef\u80fd\u65e0\u6cd5\u9632\u6b62\u4e22\u5931\u66f4\u65b0\uff0c\u56e0\u4e3a\u5373\u4f7f\u53d1\u751f\u4e86\u53e6\u4e00\u4e2a\u5e76\u53d1\u5199\u5165\uff0c WHERE \u6761\u4ef6\u4e5f\u53ef\u80fd\u4e3a\u771f\u3002\u5728\u4f9d\u8d56\u6570\u636e\u5e93\u7684CAS\u64cd\u4f5c\u524d\u8981\u68c0\u67e5\u5176\u662f\u5426\u5b89\u5168\u3002 -- \u6839\u636e\u6570\u636e\u5e93\u7684\u5b9e\u73b0\u60c5\u51b5\uff0c\u8fd9\u53ef\u80fd\u4e5f\u53ef\u80fd\u4e0d\u5b89\u5168 UPDATE wiki_pages SET content = '\u65b0\u5185\u5bb9' WHERE id = 1234 AND content = '\u65e7\u5185\u5bb9'; 2.3 \u51b2\u7a81\u89e3\u51b3\u548c\u590d\u5236 \u201c \u6700\u540e\u5199\u5165\u80dc\u5229\uff08\u4e22\u5f03\u5e76\u53d1\u5199\u5165\uff09 \u201d\u4e2d\u6240\u8ff0\u3002\u4e0d\u5e78\u7684\u662f\uff0cLWW\u662f\u8bb8\u591a\u590d\u5236\u6570\u636e\u5e93\u4e2d\u7684\u9ed8\u8ba4\u65b9\u6848\u3002","title":"\u7b2c\u4e03\u7ae0\u4e8b\u52a1"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#_1","text":"","title":"\u7b2c\u4e03\u7ae0 \u4e8b\u52a1"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#1","text":"\u7f51\u7edc\u3001\u5e94\u7528\u7a0b\u5e8f\u3001\u8f6f\u4ef6\u786c\u4ef6\u4f1a\u5728\u4efb\u610f\u65f6\u523b\u5d29\u6e83\u3002 \u5e76\u53d1\u3001\u6570\u636e\u7ade\u4e89 \u4e8b\u52a1\u662f\u5e94\u7528\u7a0b\u5e8f\u5c06\u591a\u4e2a\u8bfb\u5199\u64cd\u4f5c\u7ec4\u5408\u6210\u4e00\u4e2a\u903b\u8f91\u5355\u5143\u7684\u4e00\u79cd\u65b9\u5f0f","title":"1.\u4e3a\u4ec0\u4e48\u9700\u8981\u4e8b\u52a1"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#2-acid-atomicityconsistencyisolationdurability","text":"Atomicity \u4e8b\u52a1\u662f\u539f\u5b50\u6027\u4e0d\u53ef\u5207\u5206 Consistency \u5bf9\u6570\u636e\u7684\u4e00\u7ec4\u7279\u5b9a\u7ea6\u675f\u5fc5\u987b\u59cb\u7ec8\u6210\u7acb \u4e8b\u52a1\u6267\u884c\u8d26\u6237A\u51cf\u5c11\u5fc5\u987bB\u5bf9\u5e94\u589e\u52a0\uff0c\u8d26\u6237\u6574\u4f53\u4e0a\u5fc5\u987b\u501f\u8d37\u76f8\u62b5 Isolation \u540c\u65f6\u6267\u884c\u7684\u4e8b\u52a1\u662f\u9694\u79bb\u7684 Durability \u4e8b\u52a1\u6267\u884c\u5b8c\u6210\uff0c\u5199\u5165\u6570\u636e\u4e0d\u4f1a\u4e22\u5931 \u4e00\u4e2a\u4e8b\u52a1\u8bfb\u53d6\u53e6\u4e00\u4e2a\u4e8b\u52a1\u7684\u672a\u88ab\u6267\u884c\u7684\u5199\u5165\uff08\u201c\u810f\u8bfb\u201d\uff09\u3002","title":"2. ACID Atomicity\u3001Consistency\u3001Isolation\u3001Durability"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#21","text":"\u5f53\u4e24\u4e2a\u4e8b\u52a1\u4e0d\u89e6\u53ca\u76f8\u540c\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u5b89\u5168\u7684\u5e76\u53d1\u8fd0\u884c\uff0c\u4e24\u8005\u4e0d\u4f9d\u8d56\u53e6\u4e00\u4e2a\u3002 \u5f53\u4fee\u6539\u540c\u4e00\u6570\u636e\u65f6\uff0c\u4f1a\u51fa\u73b0\u5e76\u53d1\u95ee\u9898\uff0c\u6570\u636e\u5e93\u901a\u8fc7\u4e8b\u52a1\u9694\u79bb\u89e3\u51b3 \u53ef\u5e8f\u5217\u5316 \u4e32\u884c\u6267\u884c\uff0c\u6027\u80fd\u635f\u5931 \u4e0d\u53ef\u4e32\u884c\u5316(\u5f31\u9694\u79bb\u7ea7\u522b) \u8bfb\u672a\u63d0\u4ea4 \u9632\u6b62\u810f\u5199 \u4e0d\u9632\u6b62 \u810f\u8bfb (\u4e00\u4e2a\u4e8b\u52a1\u4e3a\u63d0\u4ea4\u6216\u8005\u7ec8\u6b62\uff0c\u53e6\u4e00\u4e2a\u4e8b\u52a1\u53ef\u4ee5\u770b\u5230\u672a\u63d0\u4ea4\u7684\u6570\u636e) \u8bfb\u5df2\u63d0\u4ea4(\u6700\u57fa\u672c\u7684\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b) \u53ea\u80fd\u770b\u5230\u5df2\u63d0\u4ea4\u7684\u6570\u636e(\u6ca1\u6709\u85cf\u8bfb) \u53ea\u4f1a\u8986\u76d6\u5df2\u7ecf\u5199\u5165\u7684\u6570\u636e(\u6ca1\u6709\u810f\u5199) \u884c\u9501(row-level lock)\u9632\u6b62\u810f\u5199\uff0c\u4fee\u6539\u5bf9\u8c61\u65f6\uff0c\u5fc5\u987b\u5148\u83b7\u5f97\u9501 \u4f46\u884c\u7ea7\u9501\u4f1a\u963b\u585e\u8bfb\u8bf7\u6c42\uff0c\u4e0d\u80fd\u8bbf\u95ee\u6570\u636e\uff0c\u6240\u4ee5\u5bf9\u4fee\u6539\u524d\u6570\u636e\u8fdb\u884c\u5feb\u7167\uff0c\u8ba9\u8bfb\u53d6\u6c42\u53bb\u4ece\u5feb\u7167\u83b7\u53d6\u6570\u636e \u5feb\u7167\u9694\u79bb\u548c\u53ef\u91cd\u590d\u8bfb \u53ef\u91cd\u590d\u8bfb \u53ef\u91cd\u590d\u8bfb\u6307\u7684\u662f\u540c\u4e00\u884c\u5728\u540c\u4e00\u4e2a\u4e8b\u52a1\u4e0b\u65e0\u8bba\u600e\u4e48\u8bfb\u53d6\u90fd\u662f\u540c\u4e00\u4e2a\u7ed3\u679c \u6570\u636e\u5e93\u5fc5\u987b\u53ef\u80fd\u4fdd\u7559\u4e00\u4e2a\u5bf9\u8c61\u7684\u51e0\u4e2a\u4e0d\u540c\u7684\u63d0\u4ea4\u7248\u672c\uff0c\u56e0\u4e3a\u5404\u79cd\u6b63\u5728\u8fdb\u884c\u7684\u4e8b\u52a1\u53ef\u80fd\u9700\u8981\u770b\u5230\u6570\u636e\u5e93\u5728\u4e0d\u540c\u7684\u65f6\u95f4\u70b9\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u5b83\u5e76\u6392\u7ef4\u62a4\u7740\u591a\u4e2a\u7248\u672c\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u8fd9\u79cd\u6280\u672f\u88ab\u79f0\u4e3a \u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236 \u4f7f\u7528\u591a\u7248\u672c\u5bf9\u8c61\u5b9e\u73b0\u5feb\u7167\u9694\u79bb \u8868\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u6709\u4e00\u4e2a created_by \u5b57\u6bb5\uff0c\u5176\u4e2d\u5305\u542b\u5c06\u8be5\u884c\u63d2\u5165\u5230\u8868\u4e2d\u7684\u7684\u4e8b\u52a1ID \u6bcf\u884c\u90fd\u6709\u4e00\u4e2a deleted_by \u5b57\u6bb5\uff0c\u6700\u521d\u662f\u7a7a\u7684\u3002\u5982\u679c\u67d0\u4e2a\u4e8b\u52a1\u5220\u9664\u4e86\u4e00\u884c\uff0c\u90a3\u4e48\u8be5\u884c\u5b9e\u9645\u4e0a\u5e76\u672a\u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\uff0c\u800c\u662f\u901a\u8fc7\u5c06 deleted_by \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u8bf7\u6c42\u5220\u9664\u7684\u4e8b\u52a1\u7684ID\u6765\u6807\u8bb0\u4e3a\u5220\u9664 \u5728\u7a0d\u540e\u7684\u65f6\u95f4\uff0c\u5f53\u786e\u5b9a\u6ca1\u6709\u4e8b\u52a1\u53ef\u4ee5\u518d\u8bbf\u95ee\u5df2\u5220\u9664\u7684\u6570\u636e\u65f6\uff0c\u6570\u636e\u5e93\u4e2d\u7684\u5783\u573e\u6536\u96c6\u8fc7\u7a0b\u4f1a\u5c06\u6240\u6709\u5e26\u6709\u5220\u9664\u6807\u8bb0\u7684\u884c\u79fb\u9664\uff0c\u5e76\u91ca\u653e\u5176\u7a7a\u95f4","title":"2.1\u4e3a\u4ec0\u4e48\u9700\u8981\u5f31\u9694\u79bb\u7ea7\u522b\uff1f"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#_2","text":"\u8bfb\u4e8b\u52a1\u5f00\u59cb\u65f6\uff0c\u521b\u5efa\u8be5\u5bf9\u8c61\u7684\u4e8b\u52a1\u5df2\u7ecf\u63d0\u4ea4\u3002 \u5bf9\u8c61\u672a\u88ab\u6807\u8bb0\u4e3a\u5220\u9664\uff0c\u6216\u5982\u679c\u88ab\u6807\u8bb0\u4e3a\u5220\u9664\uff0c\u8bf7\u6c42\u5220\u9664\u7684\u4e8b\u52a1\u5728\u8bfb\u4e8b\u52a1\u5f00\u59cb\u65f6\u5c1a\u672a\u63d0\u4ea4\u3002","title":"\u89c2\u5bdf\u4e00\u81f4\u6027\u5feb\u7167\u7684\u53ef\u89c1\u6027\u89c4\u5219(\u53ef\u89c1\u4e00\u4e2a\u5bf9\u8c61)"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#_3","text":"\u4e00\u79cd\u9009\u62e9\u662f\u4f7f\u7d22\u5f15\u7b80\u5355\u5730\u6307\u5411\u5bf9\u8c61\u7684\u6240\u6709\u7248\u672c \u5e76\u4e14\u9700\u8981\u7d22\u5f15\u67e5\u8be2\u6765\u8fc7\u6ee4\u6389\u5f53\u524d\u4e8b\u52a1\u4e0d\u53ef\u89c1\u7684\u4efb\u4f55\u5bf9\u8c61\u7248\u672c \u5f53\u5783\u573e\u6536\u96c6\u5220\u9664\u4efb\u4f55\u4e8b\u52a1\u4e0d\u518d\u53ef\u89c1\u7684\u65e7\u5bf9\u8c61\u7248\u672c\u65f6\uff0c\u76f8\u5e94\u7684\u7d22\u5f15\u6761\u76ee\u4e5f\u53ef\u4ee5\u88ab\u5220\u9664\u3002 \u4f7f\u7528\u4ec5\u8ffd\u52a0\u7684B\u6811\uff0c\u6bcf\u4e2a\u5199\u5165\u4e8b\u52a1\uff08\u6216\u4e00\u6279\u4e8b\u52a1\uff09\u90fd\u4f1a\u521b\u5efa\u4e00\u9897\u65b0\u7684B\u6811\uff0c\u5f53\u521b\u5efa\u65f6\uff0c\u4ece\u8be5\u7279\u5b9a\u6811\u6839\u751f\u957f\u7684\u6811\u5c31\u662f\u6570\u636e\u5e93\u7684\u4e00\u4e2a\u4e00\u81f4\u6027\u5feb\u7167 \u6ca1\u5fc5\u8981\u6839\u636e\u4e8b\u52a1ID\u8fc7\u6ee4\u6389\u5bf9\u8c61\uff0c\u56e0\u4e3a\u540e\u7eed\u5199\u5165\u4e0d\u80fd\u4fee\u6539\u73b0\u6709\u7684B\u6811\uff1b\u5b83\u4eec\u53ea\u80fd\u521b\u5efa\u65b0\u7684\u6811\u6839\u3002\u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u9700\u8981\u4e00\u4e2a\u8d1f\u8d23\u538b\u7f29\u548c\u5783\u573e\u6536\u96c6\u7684\u540e\u53f0\u8fdb\u7a0b\u3002","title":"\u5feb\u7167\u9694\u79bb\u5f71\u54cd\u7d22\u5f15"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#_4","text":"\u5728Oracle\u4e2d\u79f0\u4e3a \u53ef\u5e8f\u5217\u5316\uff08Serializable\uff09* \u7684\uff0c \u5728PostgreSQL\u548cMySQL\u4e2d\u79f0\u4e3a* \u53ef\u91cd\u590d\u8bfb\uff08repeatable read\uff09 \u301023\u3011\u3002","title":"\u53ef\u91cd\u590d\u8bfb\u4e0e\u547d\u540d\u6df7\u6dc6"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#22","text":"\u5982\u679c\u5e94\u7528\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u503c\uff0c\u4fee\u6539\u5199\u56de\u4fee\u6539\u7684\u503c\uff08\u8bfb\u53d6-\u4fee\u6539-\u5199\u5165\u5e8f\u5217\uff09\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u4e22\u5931\u66f4\u65b0\u7684\u95ee\u9898\u3002 \u5982\u679c\u4e24\u4e2a\u4e8b\u52a1\u540c\u65f6\u6267\u884c\uff0c\u5219\u5176\u4e2d\u4e00\u4e2a\u7684\u4fee\u6539\u53ef\u80fd\u4f1a\u4e22\u5931\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u4e2a\u5199\u5165\u7684\u5185\u5bb9\u5e76\u6ca1\u6709\u5305\u62ec\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u7684\u4fee\u6539\uff08\u6709\u65f6\u4f1a\u8bf4\u540e\u9762\u5199\u5165 \u72e0\u63cd\uff08clobber\uff09 \u4e86\u524d\u9762\u7684\u5199\u5165\uff09\u8fd9\u79cd\u6a21\u5f0f\u53d1\u751f\u5728\u5404\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff1a \u589e\u52a0\u8ba1\u6570\u5668\u6216\u66f4\u65b0\u8d26\u6237\u4f59\u989d\uff08\u9700\u8981\u8bfb\u53d6\u5f53\u524d\u503c\uff0c\u8ba1\u7b97\u65b0\u503c\u5e76\u5199\u56de\u66f4\u65b0\u540e\u7684\u503c\uff09 \u5728\u590d\u6742\u503c\u4e2d\u8fdb\u884c\u672c\u5730\u4fee\u6539\uff1a\u4f8b\u5982\uff0c\u5c06\u5143\u7d20\u6dfb\u52a0\u5230JSON\u6587\u6863\u4e2d\u7684\u4e00\u4e2a\u5217\u8868\uff08\u9700\u8981\u89e3\u6790\u6587\u6863\uff0c\u8fdb\u884c\u66f4\u6539\u5e76\u5199\u56de\u4fee\u6539\u7684\u6587\u6863\uff09 \u4e24\u4e2a\u7528\u6237\u540c\u65f6\u7f16\u8f91wiki\u9875\u9762\uff0c\u6bcf\u4e2a\u7528\u6237\u901a\u8fc7\u5c06\u6574\u4e2a\u9875\u9762\u5185\u5bb9\u53d1\u9001\u5230\u670d\u52a1\u5668\u6765\u4fdd\u5b58\u5176\u66f4\u6539\uff0c\u8986\u5199\u6570\u636e\u5e93\u4e2d\u5f53\u524d\u7684\u4efb\u4f55\u5185\u5bb9\u3002 \u89e3\u51b3\uff1a - \u539f\u5b50\u5199 UPDATE counters SET value = value + 1 WHERE key = 'foo';","title":"2.2 \u9632\u6b62\u4e22\u5931\u66f4\u65b0"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#_5","text":"BEGIN TRANSACTION; SELECT * FROM figures WHERE name = 'robot' AND game_id = 222 FOR UPDATE; -- \u68c0\u67e5\u73a9\u5bb6\u7684\u64cd\u4f5c\u662f\u5426\u6709\u6548\uff0c\u7136\u540e\u66f4\u65b0\u5148\u524dSELECT\u8fd4\u56de\u68cb\u5b50\u7684\u4f4d\u7f6e\u3002 UPDATE figures SET position = 'c4' WHERE id = 1234; COMMIT;","title":"\u663e\u5f0f\u9501\u5b9a"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#cascompare-and-set","text":"\u4f46\u662f\uff0c\u5982\u679c\u6570\u636e\u5e93\u5141\u8bb8 WHERE \u5b50\u53e5\u4ece\u65e7\u5feb\u7167\u4e2d\u8bfb\u53d6\uff0c\u5219\u6b64\u8bed\u53e5\u53ef\u80fd\u65e0\u6cd5\u9632\u6b62\u4e22\u5931\u66f4\u65b0\uff0c\u56e0\u4e3a\u5373\u4f7f\u53d1\u751f\u4e86\u53e6\u4e00\u4e2a\u5e76\u53d1\u5199\u5165\uff0c WHERE \u6761\u4ef6\u4e5f\u53ef\u80fd\u4e3a\u771f\u3002\u5728\u4f9d\u8d56\u6570\u636e\u5e93\u7684CAS\u64cd\u4f5c\u524d\u8981\u68c0\u67e5\u5176\u662f\u5426\u5b89\u5168\u3002 -- \u6839\u636e\u6570\u636e\u5e93\u7684\u5b9e\u73b0\u60c5\u51b5\uff0c\u8fd9\u53ef\u80fd\u4e5f\u53ef\u80fd\u4e0d\u5b89\u5168 UPDATE wiki_pages SET content = '\u65b0\u5185\u5bb9' WHERE id = 1234 AND content = '\u65e7\u5185\u5bb9';","title":"\u6bd4\u8f83\u5e76\u8bbe\u7f6e\uff08CAS\uff09compare and set"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%83%E7%AB%A0%E4%BA%8B%E5%8A%A1/#23","text":"\u201c \u6700\u540e\u5199\u5165\u80dc\u5229\uff08\u4e22\u5f03\u5e76\u53d1\u5199\u5165\uff09 \u201d\u4e2d\u6240\u8ff0\u3002\u4e0d\u5e78\u7684\u662f\uff0cLWW\u662f\u8bb8\u591a\u590d\u5236\u6570\u636e\u5e93\u4e2d\u7684\u9ed8\u8ba4\u65b9\u6848\u3002","title":"2.3 \u51b2\u7a81\u89e3\u51b3\u548c\u590d\u5236"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/","text":"\u7b2c\u4e94\u7ae0 \u590d\u5236(\u6570\u636e\u540c\u6b65) 1. \u591a\u53f0\u673a\u5668 l\u4e4b\u95f4\u9700\u8981\u590d\u5236\u7684\u539f\u56e0 ? \u8ba9\u6570\u636e\u4e0e\u7528\u6237\u5728\u5730\u7406\u4e0a\u66f4\u63a5\u8fd1\uff0c \u51cf\u5c11\u5ef6\u8fdf \u5373\u4f7f\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u51fa\u6545\u969c\uff0c\u7cfb\u7edf\u4e5f\u80fd\u4f7f\u7528\uff0c \u9ad8\u53ef\u7528 \u96c6\u7fa4\u4f38\u7f29\u6269\u5bb9\uff0c\u63d0\u9ad8\u8bf7\u6c42\u5e76\u53d1\uff0c \u63d0\u9ad8\u541e\u5410\u91cf 2. \u5e38\u89c1\u590d\u5236\u7684\u65b9\u5f0f? \u5355\u9886\u5bfc single leader \u591a\u9886\u5bfc multi leader \u65e0\u9886\u5bfc laderless 2.1 Leader \u4e3b\u5e93 2.2 Follower \u53ea\u8bfb\u526f\u672c only read replicas \u4ece\u5e93 slavee \u5907\u5e93 \u70ed\u5907 hot \u80fd\u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u526f\u672c \u6e29\u5907 warm \u53ea\u8ffd\u6c42\u9886\u5bfc\u8005\uff0c\u4e0d\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 \u51b7\u5907 cold 2.3 \u540c\u6b65\u590d\u5236\u4e0e\u5f02\u6b65\u590d\u5236 \u534a\u540c\u6b65\u590d\u5236 \u4e24\u4e2a\u4ece\u8282\u70b9\uff0c\u4e00\u4e2a\u8282\u70b9\u540c\u6b65\uff0c\u53e6\u4e00\u4e2a\u5f02\u6b65 \u94fe\u5f0f\u590d\u5236 \u5f02\u6b65\u590d\u5236 2.4 \u6dfb\u52a0\u65b0\u4ece\u5e93 \u5168\u91cf\u5feb\u7167snapshot+\u589e\u91cf\u540c\u6b65(binglog\u3001aof) 2.5 \u8282\u70b9\u5b95\u673a \u76d1\u63a7\u62a5\u8b66\u3001 \u6545\u969c\u5207\u6362\u3001 \u4e3b\u4ece\u66ff\u6362\u3001 \u54e8\u5175\u673a\u5236 2.6 \u590d\u5236\u65e5\u5fd7\u7684\u5b9e\u73b0 \u57fa\u4e8e\u8bed\u53e5\u590d\u5236(binglog) \u9884\u5199\u5f0f\u65e5\u5fd7(WAL(write ahead log)) \u903b\u8f91\u65e5\u5fd7\u590d\u5236(\u76f4\u63a5\u590d\u5236\u53d8\u66f4\u7684\u6570\u636e) \u57fa\u4e8e\u89e6\u53d1\u5668(\u4e8b\u4ef6\u89e6\u53d1\u3001\u90e8\u5206\u590d\u5236) 3. \u590d\u5236\u5ef6\u8fdf 3.1 \u95ee\u9898 \u8bfb\u5df1\u4e4b\u5199 \u7528\u6237\u81ea\u5df1\u4fee\u6539\u7684\u5185\u5bb9\u4ece\u4e3b\u5e93\u8bfb(\u4f8b\u5982\u4fee\u6539\u81ea\u5df1\u7528\u6237\u8d44\u6599\u4ece\u4e3b\u5e93\u8bfb\uff0c\u67e5\u770b\u5176\u5b83\u7528\u6237\u4ece\u4ece\u5e93) \u5ba2\u6237\u7aef\u8bb0\u5f55\u4fee\u6539\u65f6\u95f4\u3001\u5224\u65ad\u5185\u5bb9\u662f\u5426\u6700\u65b0\uff0c\u4e0d\u591f\u65b0\u5207\u6362\u6570\u636e\u8bfb\u53d6(\u9700\u8981\u4f9d\u8d56\u65f6\u949f\u540c\u6b65) \u5982\u679c\u7528\u6237\u591a\u8bbe\u5907(\u624b\u673a\u3001\u5e73\u677f)\u9700\u8981\u4fdd\u6301\u90fd\u8fde\u63a5\u540c\u4e00\u4e3b\u5e93 \u5355\u8c03\u8bfbMonotonic reads( \u7528\u6237\u9996\u5148\u4ece\u65b0\u526f\u672c\u8bfb\u53d6\uff0c\u7136\u540e\u4ece\u65e7\u526f\u672c\u8bfb\u53d6\u3002\u65f6\u5149\u5012\u6d41\u3002\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u5f02\u5e38\uff0c\u6211\u4eec\u9700\u8981\u5355\u8c03\u7684\u8bfb\u53d6 ) \u786e\u4fdd\u7528\u6237\u603b\u662f\u4ece\u540c\u4e00\u526f\u672c\u8bfb\u53d6 (\u6839\u636e\u7528\u6237id\u6563\u5217\u526f\u672c\uff0c\u800c\u4e0d\u662f\u968f\u673a\u9009\u62e9\u526f\u672c\uff0c\u4f46\u5982\u679c\u67e5\u8be2\u5931\u8d25\uff0c\u518d\u5207\u6362\u5176\u4ed6\u526f\u672c) \u4e00\u81f4\u524d\u7f00\u8bfb ``` \u7b2c\u4e09\u4e2a\u590d\u5236\u5ef6\u8fdf\u4f8b\u5b50\u8fdd\u53cd\u4e86\u56e0\u679c\u5f8b\u3002 \u60f3\u8c61\u4e00\u4e0bPoons\u5148\u751f\u548cCake\u592b\u4eba\u4e4b\u95f4\u7684\u4ee5\u4e0b\u7b80\u77ed\u5bf9\u8bdd\uff1a Mr. Poons\u200b Mrs. Cake\uff0c\u4f60\u80fd\u770b\u5230\u591a\u8fdc\u7684\u672a\u6765\uff1f Mrs. Cake\u200b \u901a\u5e38\u7ea6\u5341\u79d2\u949f\uff0cMr. Poons. \u8fd9\u4e24\u53e5\u8bdd\u4e4b\u95f4\u6709\u56e0\u679c\u5173\u7cfb\uff1aCake\u592b\u4eba\u542c\u5230\u4e86Poons\u5148\u751f\u7684\u95ee\u9898\u5e76\u56de\u7b54\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u200b \u73b0\u5728\uff0c\u60f3\u8c61\u7b2c\u4e09\u4e2a\u4eba\u6b63\u5728\u901a\u8fc7\u4ece\u5e93\u6765\u542c\u8fd9\u4e2a\u5bf9\u8bdd\u3002 Cake\u592b\u4eba\u8bf4\u7684\u5185\u5bb9\u662f\u4ece\u4e00\u4e2a\u5ef6\u8fdf\u5f88\u4f4e\u7684\u4ece\u5e93\u8bfb\u53d6\u7684\uff0c\u4f46Poons\u5148\u751f\u6240\u8bf4\u7684\u5185\u5bb9\uff0c\u4ece\u5e93\u7684\u5ef6\u8fdf\u8981\u5927\u7684\u591a\uff08\u89c1\u56fe5-5\uff09\u3002 \u4e8e\u662f\uff0c\u8fd9\u4e2a\u89c2\u5bdf\u8005\u4f1a\u542c\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a Mrs. Cake\u200b \u901a\u5e38\u7ea6\u5341\u79d2\u949f\uff0cMr. Poons. Mr. Poons\u200b Mrs. Cake\uff0c\u4f60\u80fd\u770b\u5230\u591a\u8fdc\u7684\u672a\u6765\uff1f ``` \u5982\u679c\u5199\u5165\u6309\u67d0\u4e2a\u987a\u5e8f\u53d1\u751f\uff0c\u90a3\u4e48\u8bfb\u53d6\u4e5f\u5fc5\u987b\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u3002 3.2 \u590d\u5236\u5ef6\u8fdf\u89e3\u51b3\u65b9\u6848 \u901a\u8fc7\u4e3b\u5e93\u8fdb\u884c\u67d0\u79cd\u8bfb\u53d6 3.3 \u591a\u4e3b\u590d\u5236 \u5e94\u7528\u573a\u666f \u8fd0\u7ef4\u591a\u4e2a\u6570\u636e\u4e2d\u5fc3(\u5bb9\u5fcd\u5355\u70b9\u6545\u969c\uff0c\u5730\u7406\u4e0a\u66f4\u63a5\u8fd1\u7528\u6237)\uff0c\u4e00\u4e2a\u4e3b\u5e93\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3 \u6027\u80fd \u5bb9\u5fcd\u6570\u636e\u4e2d\u5fc3\u505c\u673a \u5bb9\u5fcd\u7f51\u7edc\u95ee\u9898 \u9700\u8981\u79bb\u7ebf\u64cd\u4f5c\u7684\u5ba2\u6237\u7aef \u5e94\u7528\u8bbe\u5907\u65ad\u7f51\u9700\u8981\u7ee7\u7eed\u5de5\u4f5c \u6bcf\u4e00\u4e2a\u8bbe\u5907\u90fd\u662f\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3 CouchDB \u534f\u540c\u7f16\u8f91 Google Docs \u591a\u9886\u5bfc\u590d\u5236\u52a0\u901f\u534f\u4f5c\uff0c\u4f46\u662f\u4f1a\u6709\u5199\u5165\u51b2\u7a81 3.4 \u5904\u7406\u5199\u5165\u51b2\u7a81 \u540c\u6b65\u4e0e\u5f02\u6b65\u68c0\u6d4b\u51b2\u7a81 \u540c\u6b65\u68c0\u6d4b\u51b2\u7a81\u53ea\u9002\u5408\u5355\u4e3b (\u591a\u4e3b\u590d\u5236\u7684\u4e3b\u8981\u4f18\u70b9)\u5f02\u6b65\u5141\u8bb8\u6bcf\u4e2a\u526f\u672c\u72ec\u7acb\u63a5\u53d7\u5199\u5165 \u907f\u514d\u51b2\u7a81 \u5f53\u7528\u6237\u7f16\u8f91\u81ea\u5df1\u7684\u6570\u636e\u65f6\uff0c\u4fdd\u8bc1\u7528\u6237\u7684\u7528\u6237\u90fd\u8def\u7531\u540c\u4e00\u6570\u636e\u4e2d\u5fc3\uff0c\u5e76\u4f7f\u7528\u8be5\u6570\u636e\u4e2d\u5fc3\u7684\u9886\u5bfc\u8fdb\u884c\u8bfb\u5199 \u6536\u655b\u81f3\u4e00\u81f4\u72b6\u6001 \u6240\u6709\u526f\u672c\u5fc5\u987b\u5728\u6240\u6709\u53d8\u66f4\u5b8c\u6210\u65f6\u6536\u655b\u81f3\u4e00\u4e2a\u76f8\u540c\u7684\u6700\u7ec8\u503c \u6bcf\u4e2a\u5199\u5165\u552f\u4e00id(id\u9ad8(\u65f6\u95f4\u6233\u76f8\u5173)\u5177\u6709\u4f18\u5148\u7ea7\u5199\u5165\u80dc\u5229 \u5199\u65f6\u6267\u884c\u548c\u8bfb\u65f6\u6267\u884c \u9884\u7f6e\u51b2\u7a81\u89e3\u51b3\u811a\u672c CouchDB \u81ea\u52a8\u51b2\u7a81\u89e3\u51b3 \u65e0\u51b2\u7a81\u590d\u5236\u6570\u636e\u7c7b\u578b \u662f\u53ef\u4ee5\u7531\u591a\u4e2a\u7528\u6237\u540c\u65f6\u7f16\u8f91\u7684\u96c6\u5408\uff0c\u6620\u5c04\uff0c\u6709\u5e8f\u5217\u8868\uff0c\u8ba1\u6570\u5668\u7b49\u7684\u4e00\u7cfb\u5217\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u4eec\u4ee5\u5408\u7406\u7684\u65b9\u5f0f\u81ea\u52a8\u89e3\u51b3\u51b2\u7a81 \u53ef\u5408\u5e76\u6301\u4e45\u6570\u636e\u7ed3\u6784 git \u7248\u672c\u63a7\u5236 \u53ef\u6267\u884c\u8f6c\u6362 \u4e13\u4e3a\u540c\u65f6\u7f16\u8f91\u9879\u76ee\u7684\u6709\u5e8f\u5217\u8868\u800c\u8bbe\u8ba1\u7684\uff0c\u4f8b\u5982\u6784\u6210\u6587\u672c\u6587\u6863\u7684\u5b57\u7b26\u5217\u8868 Google Docs 3.5 \u591a\u4e3b\u590d\u5236\u62d3\u6251 4 \u65e0\u4e3b\u590d\u5236\uff08\u5ba2\u6237\u7aef\u5904\u7406\u9519\u8bef\uff09 \u4e00\u4e9b\u6570\u636e\u5b58\u50a8\u7cfb\u7edf\u91c7\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u653e\u5f03\u4e3b\u5e93\u7684\u6982\u5ff5\uff0c\u5e76\u5141\u8bb8\u4efb\u4f55\u526f\u672c\u76f4\u63a5\u63a5\u53d7\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u5199\u5165\u3002 AWS Dynamo\u3001 Riak\uff0cCassandra\u548cVoldemort \u8bfb\u8bf7\u6c42\u4e5f\u88ab\u5e76\u884c\u5730\u53d1\u9001\u5230\u591a\u4e2a\u8282\u70b9 \u5ba2\u6237\u7aef\u53d1\u73b0\u526f\u672c3\u5177\u6709\u9648\u65e7\u503c\uff0c\u5e76\u5c06\u65b0\u503c\u5199\u56de\u5230\u8be5\u526f\u672c \u5982\u679c\u6709n\u4e2a\u526f\u672c\uff0c\u6bcf\u4e2a\u5199\u5165\u5fc5\u987b\u7531w\u8282\u70b9\u786e\u8ba4\u624d\u80fd\u88ab\u8ba4\u4e3a\u662f\u6210\u529f\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u5fc5\u987b\u81f3\u5c11\u4e3a\u6bcf\u4e2a\u8bfb\u53d6\u67e5\u8be2r\u4e2a\u8282\u70b9\u3002 \uff08\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c$n = 3\uff0cw = 2\uff0cr = 2$\uff09\u3002\u53ea\u8981$w + r> n$\uff0c\u6211\u4eec\u671f\u671b\u5728\u8bfb\u53d6\u65f6\u83b7\u5f97\u6700\u65b0\u7684\u503c\uff0c\u56e0\u4e3ar\u4e2a\u8bfb\u53d6\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u6700\u65b0\u7684\u3002\u9075\u5faa\u8fd9\u4e9br\u503c\uff0cw\u503c\u7684\u8bfb\u5199\u79f0\u4e3a \u6cd5\u5b9a\u4eba\u6570\uff08quorum\uff09 ^vii \u3002 \u76d1\u89c6\u4f60\u7684\u6570\u636e\u5e93\u662f\u5426\u8fd4\u56de\u6700\u65b0\u7684\u7ed3\u679c \u68c0\u6d4b\u5e76\u53d1\u5199\u5165 \u6700\u540e\u5199\u5165\u80dc\u5229(\u5bf9\u5176\u5e76\u53d1\u5199\u5165) \u5408\u5e76\u540c\u65f6\u5199\u5165\u7684\u503c \u7248\u672c\u5411\u91cf\uff1a\u5f53\u8bfb\u53d6\u503c\u65f6\uff0c\u7248\u672c\u5411\u91cf\u4f1a\u4ece\u6570\u636e\u5e93\u526f\u672c\u53d1\u9001\u5230\u5ba2\u6237\u7aef\uff0c\u5e76\u4e14\u968f\u540e\u5199\u5165\u503c\u65f6\u9700\u8981\u5c06\u5176\u53d1\u9001\u56de\u6570\u636e\u5e93\u3002\uff08Riak\u5c06\u7248\u672c\u5411\u91cf\u7f16\u7801\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u79f0\u4e3a \u56e0\u679c\u4e0a\u4e0b\u6587\uff08causal context\uff09 \uff09\u3002\u7248\u672c\u5411\u91cf\u5141\u8bb8\u6570\u636e\u5e93\u533a\u5206\u8986\u76d6\u5199\u5165\u548c\u5e76\u53d1\u5199\u5165","title":"\u7b2c\u4e94\u7ae0\u590d\u5236"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#_1","text":"","title":"\u7b2c\u4e94\u7ae0 \u590d\u5236(\u6570\u636e\u540c\u6b65)"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#1","text":"l\u4e4b\u95f4\u9700\u8981\u590d\u5236\u7684\u539f\u56e0 ? \u8ba9\u6570\u636e\u4e0e\u7528\u6237\u5728\u5730\u7406\u4e0a\u66f4\u63a5\u8fd1\uff0c \u51cf\u5c11\u5ef6\u8fdf \u5373\u4f7f\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u51fa\u6545\u969c\uff0c\u7cfb\u7edf\u4e5f\u80fd\u4f7f\u7528\uff0c \u9ad8\u53ef\u7528 \u96c6\u7fa4\u4f38\u7f29\u6269\u5bb9\uff0c\u63d0\u9ad8\u8bf7\u6c42\u5e76\u53d1\uff0c \u63d0\u9ad8\u541e\u5410\u91cf","title":"1. \u591a\u53f0\u673a\u5668"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#2","text":"\u5355\u9886\u5bfc single leader \u591a\u9886\u5bfc multi leader \u65e0\u9886\u5bfc laderless","title":"2. \u5e38\u89c1\u590d\u5236\u7684\u65b9\u5f0f?"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#21-leader","text":"\u4e3b\u5e93","title":"2.1 Leader"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#22-follower","text":"\u53ea\u8bfb\u526f\u672c only read replicas \u4ece\u5e93 slavee \u5907\u5e93 \u70ed\u5907 hot \u80fd\u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u526f\u672c \u6e29\u5907 warm \u53ea\u8ffd\u6c42\u9886\u5bfc\u8005\uff0c\u4e0d\u5904\u7406\u5ba2\u6237\u7aef\u8bf7\u6c42 \u51b7\u5907 cold","title":"2.2 Follower"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#23","text":"\u534a\u540c\u6b65\u590d\u5236 \u4e24\u4e2a\u4ece\u8282\u70b9\uff0c\u4e00\u4e2a\u8282\u70b9\u540c\u6b65\uff0c\u53e6\u4e00\u4e2a\u5f02\u6b65 \u94fe\u5f0f\u590d\u5236 \u5f02\u6b65\u590d\u5236","title":"2.3 \u540c\u6b65\u590d\u5236\u4e0e\u5f02\u6b65\u590d\u5236"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#24","text":"\u5168\u91cf\u5feb\u7167snapshot+\u589e\u91cf\u540c\u6b65(binglog\u3001aof)","title":"2.4 \u6dfb\u52a0\u65b0\u4ece\u5e93"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#25","text":"\u76d1\u63a7\u62a5\u8b66\u3001 \u6545\u969c\u5207\u6362\u3001 \u4e3b\u4ece\u66ff\u6362\u3001 \u54e8\u5175\u673a\u5236","title":"2.5 \u8282\u70b9\u5b95\u673a"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#26","text":"\u57fa\u4e8e\u8bed\u53e5\u590d\u5236(binglog) \u9884\u5199\u5f0f\u65e5\u5fd7(WAL(write ahead log)) \u903b\u8f91\u65e5\u5fd7\u590d\u5236(\u76f4\u63a5\u590d\u5236\u53d8\u66f4\u7684\u6570\u636e) \u57fa\u4e8e\u89e6\u53d1\u5668(\u4e8b\u4ef6\u89e6\u53d1\u3001\u90e8\u5206\u590d\u5236)","title":"2.6 \u590d\u5236\u65e5\u5fd7\u7684\u5b9e\u73b0"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#3","text":"","title":"3. \u590d\u5236\u5ef6\u8fdf"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#31","text":"\u8bfb\u5df1\u4e4b\u5199 \u7528\u6237\u81ea\u5df1\u4fee\u6539\u7684\u5185\u5bb9\u4ece\u4e3b\u5e93\u8bfb(\u4f8b\u5982\u4fee\u6539\u81ea\u5df1\u7528\u6237\u8d44\u6599\u4ece\u4e3b\u5e93\u8bfb\uff0c\u67e5\u770b\u5176\u5b83\u7528\u6237\u4ece\u4ece\u5e93) \u5ba2\u6237\u7aef\u8bb0\u5f55\u4fee\u6539\u65f6\u95f4\u3001\u5224\u65ad\u5185\u5bb9\u662f\u5426\u6700\u65b0\uff0c\u4e0d\u591f\u65b0\u5207\u6362\u6570\u636e\u8bfb\u53d6(\u9700\u8981\u4f9d\u8d56\u65f6\u949f\u540c\u6b65) \u5982\u679c\u7528\u6237\u591a\u8bbe\u5907(\u624b\u673a\u3001\u5e73\u677f)\u9700\u8981\u4fdd\u6301\u90fd\u8fde\u63a5\u540c\u4e00\u4e3b\u5e93 \u5355\u8c03\u8bfbMonotonic reads( \u7528\u6237\u9996\u5148\u4ece\u65b0\u526f\u672c\u8bfb\u53d6\uff0c\u7136\u540e\u4ece\u65e7\u526f\u672c\u8bfb\u53d6\u3002\u65f6\u5149\u5012\u6d41\u3002\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u5f02\u5e38\uff0c\u6211\u4eec\u9700\u8981\u5355\u8c03\u7684\u8bfb\u53d6 ) \u786e\u4fdd\u7528\u6237\u603b\u662f\u4ece\u540c\u4e00\u526f\u672c\u8bfb\u53d6 (\u6839\u636e\u7528\u6237id\u6563\u5217\u526f\u672c\uff0c\u800c\u4e0d\u662f\u968f\u673a\u9009\u62e9\u526f\u672c\uff0c\u4f46\u5982\u679c\u67e5\u8be2\u5931\u8d25\uff0c\u518d\u5207\u6362\u5176\u4ed6\u526f\u672c) \u4e00\u81f4\u524d\u7f00\u8bfb ``` \u7b2c\u4e09\u4e2a\u590d\u5236\u5ef6\u8fdf\u4f8b\u5b50\u8fdd\u53cd\u4e86\u56e0\u679c\u5f8b\u3002 \u60f3\u8c61\u4e00\u4e0bPoons\u5148\u751f\u548cCake\u592b\u4eba\u4e4b\u95f4\u7684\u4ee5\u4e0b\u7b80\u77ed\u5bf9\u8bdd\uff1a Mr. Poons\u200b Mrs. Cake\uff0c\u4f60\u80fd\u770b\u5230\u591a\u8fdc\u7684\u672a\u6765\uff1f Mrs. Cake\u200b \u901a\u5e38\u7ea6\u5341\u79d2\u949f\uff0cMr. Poons. \u8fd9\u4e24\u53e5\u8bdd\u4e4b\u95f4\u6709\u56e0\u679c\u5173\u7cfb\uff1aCake\u592b\u4eba\u542c\u5230\u4e86Poons\u5148\u751f\u7684\u95ee\u9898\u5e76\u56de\u7b54\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u200b \u73b0\u5728\uff0c\u60f3\u8c61\u7b2c\u4e09\u4e2a\u4eba\u6b63\u5728\u901a\u8fc7\u4ece\u5e93\u6765\u542c\u8fd9\u4e2a\u5bf9\u8bdd\u3002 Cake\u592b\u4eba\u8bf4\u7684\u5185\u5bb9\u662f\u4ece\u4e00\u4e2a\u5ef6\u8fdf\u5f88\u4f4e\u7684\u4ece\u5e93\u8bfb\u53d6\u7684\uff0c\u4f46Poons\u5148\u751f\u6240\u8bf4\u7684\u5185\u5bb9\uff0c\u4ece\u5e93\u7684\u5ef6\u8fdf\u8981\u5927\u7684\u591a\uff08\u89c1\u56fe5-5\uff09\u3002 \u4e8e\u662f\uff0c\u8fd9\u4e2a\u89c2\u5bdf\u8005\u4f1a\u542c\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a Mrs. Cake\u200b \u901a\u5e38\u7ea6\u5341\u79d2\u949f\uff0cMr. Poons. Mr. Poons\u200b Mrs. Cake\uff0c\u4f60\u80fd\u770b\u5230\u591a\u8fdc\u7684\u672a\u6765\uff1f ``` \u5982\u679c\u5199\u5165\u6309\u67d0\u4e2a\u987a\u5e8f\u53d1\u751f\uff0c\u90a3\u4e48\u8bfb\u53d6\u4e5f\u5fc5\u987b\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u3002","title":"3.1 \u95ee\u9898"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#32","text":"\u901a\u8fc7\u4e3b\u5e93\u8fdb\u884c\u67d0\u79cd\u8bfb\u53d6","title":"3.2 \u590d\u5236\u5ef6\u8fdf\u89e3\u51b3\u65b9\u6848"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#33","text":"\u5e94\u7528\u573a\u666f \u8fd0\u7ef4\u591a\u4e2a\u6570\u636e\u4e2d\u5fc3(\u5bb9\u5fcd\u5355\u70b9\u6545\u969c\uff0c\u5730\u7406\u4e0a\u66f4\u63a5\u8fd1\u7528\u6237)\uff0c\u4e00\u4e2a\u4e3b\u5e93\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3 \u6027\u80fd \u5bb9\u5fcd\u6570\u636e\u4e2d\u5fc3\u505c\u673a \u5bb9\u5fcd\u7f51\u7edc\u95ee\u9898 \u9700\u8981\u79bb\u7ebf\u64cd\u4f5c\u7684\u5ba2\u6237\u7aef \u5e94\u7528\u8bbe\u5907\u65ad\u7f51\u9700\u8981\u7ee7\u7eed\u5de5\u4f5c \u6bcf\u4e00\u4e2a\u8bbe\u5907\u90fd\u662f\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3 CouchDB \u534f\u540c\u7f16\u8f91 Google Docs \u591a\u9886\u5bfc\u590d\u5236\u52a0\u901f\u534f\u4f5c\uff0c\u4f46\u662f\u4f1a\u6709\u5199\u5165\u51b2\u7a81","title":"3.3 \u591a\u4e3b\u590d\u5236"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#34","text":"\u540c\u6b65\u4e0e\u5f02\u6b65\u68c0\u6d4b\u51b2\u7a81 \u540c\u6b65\u68c0\u6d4b\u51b2\u7a81\u53ea\u9002\u5408\u5355\u4e3b (\u591a\u4e3b\u590d\u5236\u7684\u4e3b\u8981\u4f18\u70b9)\u5f02\u6b65\u5141\u8bb8\u6bcf\u4e2a\u526f\u672c\u72ec\u7acb\u63a5\u53d7\u5199\u5165 \u907f\u514d\u51b2\u7a81 \u5f53\u7528\u6237\u7f16\u8f91\u81ea\u5df1\u7684\u6570\u636e\u65f6\uff0c\u4fdd\u8bc1\u7528\u6237\u7684\u7528\u6237\u90fd\u8def\u7531\u540c\u4e00\u6570\u636e\u4e2d\u5fc3\uff0c\u5e76\u4f7f\u7528\u8be5\u6570\u636e\u4e2d\u5fc3\u7684\u9886\u5bfc\u8fdb\u884c\u8bfb\u5199 \u6536\u655b\u81f3\u4e00\u81f4\u72b6\u6001 \u6240\u6709\u526f\u672c\u5fc5\u987b\u5728\u6240\u6709\u53d8\u66f4\u5b8c\u6210\u65f6\u6536\u655b\u81f3\u4e00\u4e2a\u76f8\u540c\u7684\u6700\u7ec8\u503c \u6bcf\u4e2a\u5199\u5165\u552f\u4e00id(id\u9ad8(\u65f6\u95f4\u6233\u76f8\u5173)\u5177\u6709\u4f18\u5148\u7ea7\u5199\u5165\u80dc\u5229 \u5199\u65f6\u6267\u884c\u548c\u8bfb\u65f6\u6267\u884c \u9884\u7f6e\u51b2\u7a81\u89e3\u51b3\u811a\u672c CouchDB \u81ea\u52a8\u51b2\u7a81\u89e3\u51b3 \u65e0\u51b2\u7a81\u590d\u5236\u6570\u636e\u7c7b\u578b \u662f\u53ef\u4ee5\u7531\u591a\u4e2a\u7528\u6237\u540c\u65f6\u7f16\u8f91\u7684\u96c6\u5408\uff0c\u6620\u5c04\uff0c\u6709\u5e8f\u5217\u8868\uff0c\u8ba1\u6570\u5668\u7b49\u7684\u4e00\u7cfb\u5217\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u4eec\u4ee5\u5408\u7406\u7684\u65b9\u5f0f\u81ea\u52a8\u89e3\u51b3\u51b2\u7a81 \u53ef\u5408\u5e76\u6301\u4e45\u6570\u636e\u7ed3\u6784 git \u7248\u672c\u63a7\u5236 \u53ef\u6267\u884c\u8f6c\u6362 \u4e13\u4e3a\u540c\u65f6\u7f16\u8f91\u9879\u76ee\u7684\u6709\u5e8f\u5217\u8868\u800c\u8bbe\u8ba1\u7684\uff0c\u4f8b\u5982\u6784\u6210\u6587\u672c\u6587\u6863\u7684\u5b57\u7b26\u5217\u8868 Google Docs","title":"3.4 \u5904\u7406\u5199\u5165\u51b2\u7a81"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#35","text":"","title":"3.5 \u591a\u4e3b\u590d\u5236\u62d3\u6251"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0%E5%A4%8D%E5%88%B6/#4","text":"\u4e00\u4e9b\u6570\u636e\u5b58\u50a8\u7cfb\u7edf\u91c7\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u653e\u5f03\u4e3b\u5e93\u7684\u6982\u5ff5\uff0c\u5e76\u5141\u8bb8\u4efb\u4f55\u526f\u672c\u76f4\u63a5\u63a5\u53d7\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u5199\u5165\u3002 AWS Dynamo\u3001 Riak\uff0cCassandra\u548cVoldemort \u8bfb\u8bf7\u6c42\u4e5f\u88ab\u5e76\u884c\u5730\u53d1\u9001\u5230\u591a\u4e2a\u8282\u70b9 \u5ba2\u6237\u7aef\u53d1\u73b0\u526f\u672c3\u5177\u6709\u9648\u65e7\u503c\uff0c\u5e76\u5c06\u65b0\u503c\u5199\u56de\u5230\u8be5\u526f\u672c \u5982\u679c\u6709n\u4e2a\u526f\u672c\uff0c\u6bcf\u4e2a\u5199\u5165\u5fc5\u987b\u7531w\u8282\u70b9\u786e\u8ba4\u624d\u80fd\u88ab\u8ba4\u4e3a\u662f\u6210\u529f\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u5fc5\u987b\u81f3\u5c11\u4e3a\u6bcf\u4e2a\u8bfb\u53d6\u67e5\u8be2r\u4e2a\u8282\u70b9\u3002 \uff08\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c$n = 3\uff0cw = 2\uff0cr = 2$\uff09\u3002\u53ea\u8981$w + r> n$\uff0c\u6211\u4eec\u671f\u671b\u5728\u8bfb\u53d6\u65f6\u83b7\u5f97\u6700\u65b0\u7684\u503c\uff0c\u56e0\u4e3ar\u4e2a\u8bfb\u53d6\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u6700\u65b0\u7684\u3002\u9075\u5faa\u8fd9\u4e9br\u503c\uff0cw\u503c\u7684\u8bfb\u5199\u79f0\u4e3a \u6cd5\u5b9a\u4eba\u6570\uff08quorum\uff09 ^vii \u3002 \u76d1\u89c6\u4f60\u7684\u6570\u636e\u5e93\u662f\u5426\u8fd4\u56de\u6700\u65b0\u7684\u7ed3\u679c \u68c0\u6d4b\u5e76\u53d1\u5199\u5165 \u6700\u540e\u5199\u5165\u80dc\u5229(\u5bf9\u5176\u5e76\u53d1\u5199\u5165) \u5408\u5e76\u540c\u65f6\u5199\u5165\u7684\u503c \u7248\u672c\u5411\u91cf\uff1a\u5f53\u8bfb\u53d6\u503c\u65f6\uff0c\u7248\u672c\u5411\u91cf\u4f1a\u4ece\u6570\u636e\u5e93\u526f\u672c\u53d1\u9001\u5230\u5ba2\u6237\u7aef\uff0c\u5e76\u4e14\u968f\u540e\u5199\u5165\u503c\u65f6\u9700\u8981\u5c06\u5176\u53d1\u9001\u56de\u6570\u636e\u5e93\u3002\uff08Riak\u5c06\u7248\u672c\u5411\u91cf\u7f16\u7801\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b83\u79f0\u4e3a \u56e0\u679c\u4e0a\u4e0b\u6587\uff08causal context\uff09 \uff09\u3002\u7248\u672c\u5411\u91cf\u5141\u8bb8\u6570\u636e\u5e93\u533a\u5206\u8986\u76d6\u5199\u5165\u548c\u5e76\u53d1\u5199\u5165","title":"4 \u65e0\u4e3b\u590d\u5236\uff08\u5ba2\u6237\u7aef\u5904\u7406\u9519\u8bef\uff09"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%86%E5%8C%BA/","text":"\u7b2c\u516d\u7ae0 \u5206\u533a 1. \u4e3a\u4ec0\u4e48\u5206\u533a \u4e3b\u8981\u4e3a\u4e86\u53ef\u4f38\u7f29\u6027 \u5c06\u67e5\u8be2\u548c\u8d1f\u8f7d\u5747\u5300\u7684\u5206\u5e03\u5728\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u907f\u514d\u70ed\u70b9 2.\u600e\u4e48\u5206\u533a \u952e\u503c\u6570\u636e\u7684\u5206\u533a \u6839\u636e\u952e\u7684\u8303\u56f4\u5206\u533a \u597d\u5904 \u987a\u5e8f\u952e\u4fdd\u5b58 \u8303\u56f4\u626b\u63cf\u7b80\u5355\u6548\u7387\u9ad8 \u7c7b\u4f3csstable\u3001lsm tree \u7f3a\u70b9 \u6709\u70ed\u70b9\u95ee\u9898 \u5982\u679c\u6839\u636e\u65f6\u95f4\u8303\u56f4\u5206\u533a\uff0c\u6bcf\u5929\u4e00\u4e2a\u5206\u533a\uff0c\u90a3\u4e48\u5199\u5165\u90fd\u4f1a\u5728\u540c\u4e00\u5206\u533a\uff0c\u53ef\u4ee5\u65f6\u95f4\u6233\u52a0\u4e0a\u5176\u4ed6\u533a\u5206\u65b9\u5f0f\uff0c\u518d\u7ec6\u5206 \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u5f53\u5206\u533a\u53d8\u5f97\u592a\u5927\u65f6\uff0c\u901a\u5e38\u5c06\u5206\u533a\u5206\u6210\u4e24\u4e2a\u5b50\u5206\u533a\uff0c\u52a8\u6001\u5730\u518d\u5e73\u8861\u5206\u533a\u3002 \u6839\u636e\u952e\u7684\u6563\u5217\u5206\u533a \u5904\u4e8e\u5206\u533a\u76ee\u7684\u6563\u5217\u51fd\u6570\u4e0d\u9700\u8981\u592a\u5f3a\u5927 Cassandra\u548cMongoDB\u4f7f\u7528MD5 Voldemort\u4f7f\u7528Fowler-Noll-Vo\u51fd\u6570 \u53ef\u4ee5\u5747\u5300\u5206\u5e03\uff0c\u51cf\u5c11\u70ed\u70b9 \u4f1a\u5931\u53bb\u8303\u56f4\u67e5\u8be2 Cassandra\u91c7\u53d6\u4e86\u6298\u8877\u7684\u7b56\u7565\uff0c\u4f7f\u7528\u7531\u591a\u4e2a\u5217\u7ec4\u6210\u7684\u590d\u5408\u4e3b\u952e\u6765\u58f0\u660e \u952e\u4e2d\u53ea\u6709\u7b2c\u4e00\u5217\u4f1a\u4f5c\u4e3a\u6563\u5217\u7684\u4f9d\u636e\uff0c\u800c\u5176\u4ed6\u5217\u5219\u88ab\u7528\u4f5cCasssandra\u7684SSTables\u4e2d\u6392\u5e8f\u6570\u636e\u7684\u8fde\u63a5\u7d22\u5f15 \u4e24\u79cd\u65b9\u6cd5\u642d\u914d\u4f7f\u7528\u4e5f\u662f\u53ef\u884c\u7684\uff0c\u4f8b\u5982\u4f7f\u7528\u590d\u5408\u4e3b\u952e\uff1a\u4f7f\u7528\u952e\u7684\u4e00\u90e8\u5206\u6765\u6807\u8bc6\u5206\u533a\uff0c\u800c\u4f7f\u7528\u53e6\u4e00\u90e8\u5206\u4f5c\u4e3a\u6392\u5e8f\u987a\u5e8f\u3002 \u6d88\u9664\u70ed\u70b9\u3001\u8d1f\u8f7d\u503e\u659c \u5728\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9\u4e0a\uff0c\u4e00\u4e2a\u62e5\u6709\u6570\u767e\u4e07\u8ffd\u968f\u8005\u7684\u540d\u4eba\u7528\u6237\u5728\u505a\u67d0\u4e8b\u65f6\u53ef\u80fd\u4f1a\u5f15\u53d1\u4e00\u573a\u98ce\u66b4\u301014\u3011\u3002\u8fd9\u4e2a\u4e8b\u4ef6\u53ef\u80fd\u5bfc\u81f4\u5927\u91cf\u5199\u5165\u540c\u4e00\u4e2a\u952e\uff08\u952e\u53ef\u80fd\u662f\u540d\u4eba\u7684\u7528\u6237ID\uff0c\u6216\u8005\u4eba\u4eec\u6b63\u5728\u8bc4\u8bba\u7684\u52a8\u4f5c\u7684ID\uff09\u3002\u54c8\u5e0c\u7b56\u7565\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u4e24\u4e2a\u76f8\u540cID\u7684\u54c8\u5e0c\u503c\u4ecd\u7136\u662f\u76f8\u540c\u7684 \u5982\u679c\u4e00\u4e2a\u4e3b\u952e\u88ab\u8ba4\u4e3a\u662f\u975e\u5e38\u706b\u7206\u7684\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728\u4e3b\u952e\u7684\u5f00\u59cb\u6216\u7ed3\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u968f\u673a\u6570\u3002\u53ea\u8981\u4e00\u4e2a\u4e24\u4f4d\u6570\u7684\u5341\u8fdb\u5236\u968f\u673a\u6570\u5c31\u53ef\u4ee5\u5c06\u4e3b\u952e\u5206\u6563\u4e3a100\u79cd\u4e0d\u540c\u7684\u4e3b\u952e,\u4ece\u800c\u5b58\u50a8\u5728\u4e0d\u540c\u7684\u5206\u533a\u4e2d\u3002 \u7136\u800c\uff0c\u5c06\u4e3b\u952e\u8fdb\u884c\u5206\u5272\u4e4b\u540e\uff0c\u4efb\u4f55\u8bfb\u53d6\u90fd\u5fc5\u987b\u8981\u505a\u989d\u5916\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5fc5\u987b\u4ece\u6240\u6709100\u4e2a\u4e3b\u952e\u5206\u5e03\u4e2d\u8bfb\u53d6\u6570\u636e\u5e76\u5c06\u5176\u5408\u5e76\u3002\u6b64\u6280\u672f\u8fd8\u9700\u8981\u989d\u5916\u7684\u8bb0\u5f55\uff1a\u53ea\u9700\u8981\u5bf9\u5c11\u91cf\u70ed\u70b9\u9644\u52a0\u968f\u673a\u6570\uff1b\u5bf9\u4e8e\u5199\u5165\u541e\u5410\u91cf\u4f4e\u7684\u7edd\u5927\u591a\u6570\u4e3b\u952e\u6765\u8bf4\u662f\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u3002\u56e0\u6b64\uff0c\u60a8\u8fd8\u9700\u8981\u4e00\u4e9b\u65b9\u6cd5\u6765\u8ddf\u8e2a\u54ea\u4e9b\u952e\u9700\u8981\u88ab\u5206\u5272\u3002 3. \u5206\u533a\u548c\u6b21\u7ea7\u7d22\u5f15 3.1\u4e8c\u7ea7\u7d22\u5f15\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u5206\u533a \u57fa\u4e8e\u6587\u6863\u7684\u5206\u533a document-based \u5728\u8fd9\u79cd\u7d22\u5f15\u65b9\u6cd5\u4e2d\uff0c\u6bcf\u4e2a\u5206\u533a\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff1a\u6bcf\u4e2a\u5206\u533a\u7ef4\u62a4\u81ea\u5df1\u7684\u4e8c\u7ea7\u7d22\u5f15\uff0c\u4ec5\u8986\u76d6\u8be5\u5206\u533a\u4e2d\u7684\u6587\u6863\u3002\u5b83\u4e0d\u5173\u5fc3\u5b58\u50a8\u5728\u5176\u4ed6\u5206\u533a\u7684\u6570\u636e\u3002\u65e0\u8bba\u4f55\u65f6\u60a8\u9700\u8981\u5199\u5165\u6570\u636e\u5e93\uff08\u6dfb\u52a0\uff0c\u5220\u9664\u6216\u66f4\u65b0\u6587\u6863\uff09\uff0c\u53ea\u9700\u5904\u7406\u5305\u542b\u60a8\u6b63\u5728\u7f16\u5199\u7684\u6587\u6863ID\u7684\u5206\u533a\u5373\u53ef\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c \u6587\u6863\u5206\u533a\u7d22\u5f15 \u4e5f\u88ab\u79f0\u4e3a \u672c\u5730\u7d22\u5f15\uff08local index\uff09 \u76f8\u5173\u6570\u636e\u5e93 MongoDB Elasticsearch Riak Cassndra SolrCould VoltDB \u57fa\u4e8e\u5173\u952e\u8bcd\u7684\u5206\u533a term-based \u6765\u81ea\u6240\u6709\u5206\u533a\u7684\u7ea2\u8272\u6c7d\u8f66\u5728\u7ea2\u8272\u7d22\u5f15\u4e2d\uff0c\u5e76\u4e14\u7d22\u5f15\u662f\u5206\u533a\u7684\uff0c\u9996\u5b57\u6bcd\u4ece a \u5230 r \u7684\u989c\u8272\u5728\u5206\u533a0\u4e2d\uff0c s \u5230 z \u7684\u5728\u5206\u533a1\u3002\u6c7d\u8f66\u5236\u9020\u5546\u7684\u7d22\u5f15\u4e5f\u4e0e\u4e4b\u7c7b\u4f3c\uff08\u5206\u533a\u8fb9\u754c\u5728 f \u548c h \u4e4b\u95f4\uff09 \u5173\u952e\u8bcd\u5206\u533a\u7684\u5168\u5c40\u7d22\u5f15\u4f18\u4e8e\u6587\u6863\u5206\u533a\u7d22\u5f15\u7684\u5730\u65b9\u70b9\u662f\u5b83\u53ef\u4ee5\u4f7f\u8bfb\u53d6\u66f4\u6709\u6548\u7387\uff1a\u4e0d\u9700\u8981 \u5206\u6563/\u6536\u96c6 \u6240\u6709\u5206\u533a\uff0c\u5ba2\u6237\u7aef\u53ea\u9700\u8981\u5411\u5305\u542b\u5173\u952e\u8bcd\u7684\u5206\u533a\u53d1\u51fa\u8bf7\u6c42 4.\u5206\u533a\u518d\u5e73\u8861 4.1\u9700\u8981\u5e73\u8861\u7684\u539f\u56e0 \u67e5\u8be2\u541e\u5410\u91cf\u589e\u52a0\uff0c\u6dfb\u52a0cpu \u6570\u636e\u96c6\u5927\u5c0f\u589e\u52a0\uff0c\u589e\u52a0\u78c1\u76d8\u548c\u5185\u5b58 \u673a\u5668\u6545\u969c \u9700\u8981\u5c06\u8bf7\u6c42\u548c\u6570\u636e\u4ece\u8282\u70b9\u8fc1\u79fb\u65b0\u8282\u70b9 \u5c06\u8d1f\u8f7d\u4ece\u96c6\u7fa4\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u5411\u53e6\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8\u7684\u8fc7\u7a0b\u79f0\u4e3a \u518d\u5e73\u8861\uff08rebalancing\uff09 4.2 \u5e73\u8861\u7b56\u7565 Hash mod n(\u4e0d\u5efa\u8bae \u53cd\u9762) hash(key) mod 10 \u4f1a\u8fd4\u56de\u4e00\u4e2a\u4ecb\u4e8e0\u548c9\u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u6570\u636e\u5747\u5300\u5206\u5e03\u57280-9\u8282\u70b9\u4e2d\uff0c\u5982\u679c\u8282\u70b9\u589e\u52a0\u51cf\u5c11\u8fc1\u79fb\u6570\u636e\u91cf\u8fc7\u5927 \u56fa\u5b9a\u6570\u91cf\u5206\u533a Redis Cluster\u5305\u542b\u4e8616384\u4e2a\u54c8\u5e0c\u69fd\uff0c\u6bcf\u4e2aKey\u901a\u8fc7\u8ba1\u7b97\u540e\u90fd\u4f1a\u843d\u5728\u5177\u4f53\u4e00\u4e2a\u69fd\u4f4d\u4e0a\uff0c\u800c\u8fd9\u4e2a\u69fd\u4f4d\u662f\u5c5e\u4e8e\u54ea\u4e2a\u5b58\u50a8\u8282\u70b9\u7684\uff0c\u5219\u7531\u7528\u6237\u81ea\u5df1\u5b9a\u4e49\u5206\u914d\u3002 redis cluster \u5bf9\u4e8e\u69fd\u4f4d\u7684\u8f6c\u79fb\u548c\u5206\u6d3e\uff0cRedis\u96c6\u7fa4\u662f\u4e0d\u4f1a\u81ea\u52a8\u8fdb\u884c\u7684\uff0c\u800c\u662f\u9700\u8981\u4eba\u5de5\u914d\u7f6e\u7684\u3002\u6240\u4ee5Redis\u96c6\u7fa4\u7684\u9ad8\u53ef\u7528\u662f\u4f9d\u8d56\u4e8e\u8282\u70b9\u7684\u4e3b\u4ece\u590d\u5236\u4e0e\u4e3b\u4ece\u95f4\u7684\u81ea\u52a8\u6545\u969c\u8f6c\u79fb \u901a\u8fc7\u4e3a\u66f4\u5f3a\u5927\u7684\u8282\u70b9\u5206\u914d\u66f4\u591a\u7684\u5206\u533a\uff0c\u53ef\u4ee5\u5f3a\u5236\u8fd9\u4e9b\u8282\u70b9\u627f\u8f7d\u66f4\u591a\u7684\u8d1f\u8f7d\u3002\u5728Riak \u301015\u3011\uff0cElasticsearch \u301024\u3011\uff0cCouchbase \u301010\u3011\u548cVoldemort \u301025\u3011\u4e2d\u4f7f\u7528\u4e86\u8fd9\u79cd\u518d\u5e73\u8861\u7684\u65b9\u6cd5\u3002 4.3 \u518d\u5e73\u8861\u4e4b\u540e\uff0c\u6570\u636e\u8fdb\u884c\u4e86\u8282\u70b9\u95f4\u8fc1\u79fb\uff0c\u600e\u4e48\u6b63\u786e\u8def\u7531\u5ba2\u6237\u7aef\u8bf7\u6c42\u6b63\u786e\u8282\u70b9\u3002 \u670d\u52a1\u53d1\u73b0 - ZooKeeper - Espresso - HBase - SolrCould - Kafka - Etcd - Gossip - Redis Cluster - Cassandra - Riak","title":"\u7b2c\u516d\u7ae0\u5206\u533a"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%86%E5%8C%BA/#_1","text":"","title":"\u7b2c\u516d\u7ae0 \u5206\u533a"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%86%E5%8C%BA/#1","text":"\u4e3b\u8981\u4e3a\u4e86\u53ef\u4f38\u7f29\u6027 \u5c06\u67e5\u8be2\u548c\u8d1f\u8f7d\u5747\u5300\u7684\u5206\u5e03\u5728\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\uff0c\u907f\u514d\u70ed\u70b9","title":"1. \u4e3a\u4ec0\u4e48\u5206\u533a"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%86%E5%8C%BA/#2","text":"\u952e\u503c\u6570\u636e\u7684\u5206\u533a \u6839\u636e\u952e\u7684\u8303\u56f4\u5206\u533a \u597d\u5904 \u987a\u5e8f\u952e\u4fdd\u5b58 \u8303\u56f4\u626b\u63cf\u7b80\u5355\u6548\u7387\u9ad8 \u7c7b\u4f3csstable\u3001lsm tree \u7f3a\u70b9 \u6709\u70ed\u70b9\u95ee\u9898 \u5982\u679c\u6839\u636e\u65f6\u95f4\u8303\u56f4\u5206\u533a\uff0c\u6bcf\u5929\u4e00\u4e2a\u5206\u533a\uff0c\u90a3\u4e48\u5199\u5165\u90fd\u4f1a\u5728\u540c\u4e00\u5206\u533a\uff0c\u53ef\u4ee5\u65f6\u95f4\u6233\u52a0\u4e0a\u5176\u4ed6\u533a\u5206\u65b9\u5f0f\uff0c\u518d\u7ec6\u5206 \u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u5f53\u5206\u533a\u53d8\u5f97\u592a\u5927\u65f6\uff0c\u901a\u5e38\u5c06\u5206\u533a\u5206\u6210\u4e24\u4e2a\u5b50\u5206\u533a\uff0c\u52a8\u6001\u5730\u518d\u5e73\u8861\u5206\u533a\u3002 \u6839\u636e\u952e\u7684\u6563\u5217\u5206\u533a \u5904\u4e8e\u5206\u533a\u76ee\u7684\u6563\u5217\u51fd\u6570\u4e0d\u9700\u8981\u592a\u5f3a\u5927 Cassandra\u548cMongoDB\u4f7f\u7528MD5 Voldemort\u4f7f\u7528Fowler-Noll-Vo\u51fd\u6570 \u53ef\u4ee5\u5747\u5300\u5206\u5e03\uff0c\u51cf\u5c11\u70ed\u70b9 \u4f1a\u5931\u53bb\u8303\u56f4\u67e5\u8be2 Cassandra\u91c7\u53d6\u4e86\u6298\u8877\u7684\u7b56\u7565\uff0c\u4f7f\u7528\u7531\u591a\u4e2a\u5217\u7ec4\u6210\u7684\u590d\u5408\u4e3b\u952e\u6765\u58f0\u660e \u952e\u4e2d\u53ea\u6709\u7b2c\u4e00\u5217\u4f1a\u4f5c\u4e3a\u6563\u5217\u7684\u4f9d\u636e\uff0c\u800c\u5176\u4ed6\u5217\u5219\u88ab\u7528\u4f5cCasssandra\u7684SSTables\u4e2d\u6392\u5e8f\u6570\u636e\u7684\u8fde\u63a5\u7d22\u5f15 \u4e24\u79cd\u65b9\u6cd5\u642d\u914d\u4f7f\u7528\u4e5f\u662f\u53ef\u884c\u7684\uff0c\u4f8b\u5982\u4f7f\u7528\u590d\u5408\u4e3b\u952e\uff1a\u4f7f\u7528\u952e\u7684\u4e00\u90e8\u5206\u6765\u6807\u8bc6\u5206\u533a\uff0c\u800c\u4f7f\u7528\u53e6\u4e00\u90e8\u5206\u4f5c\u4e3a\u6392\u5e8f\u987a\u5e8f\u3002 \u6d88\u9664\u70ed\u70b9\u3001\u8d1f\u8f7d\u503e\u659c \u5728\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9\u4e0a\uff0c\u4e00\u4e2a\u62e5\u6709\u6570\u767e\u4e07\u8ffd\u968f\u8005\u7684\u540d\u4eba\u7528\u6237\u5728\u505a\u67d0\u4e8b\u65f6\u53ef\u80fd\u4f1a\u5f15\u53d1\u4e00\u573a\u98ce\u66b4\u301014\u3011\u3002\u8fd9\u4e2a\u4e8b\u4ef6\u53ef\u80fd\u5bfc\u81f4\u5927\u91cf\u5199\u5165\u540c\u4e00\u4e2a\u952e\uff08\u952e\u53ef\u80fd\u662f\u540d\u4eba\u7684\u7528\u6237ID\uff0c\u6216\u8005\u4eba\u4eec\u6b63\u5728\u8bc4\u8bba\u7684\u52a8\u4f5c\u7684ID\uff09\u3002\u54c8\u5e0c\u7b56\u7565\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a\u4e24\u4e2a\u76f8\u540cID\u7684\u54c8\u5e0c\u503c\u4ecd\u7136\u662f\u76f8\u540c\u7684 \u5982\u679c\u4e00\u4e2a\u4e3b\u952e\u88ab\u8ba4\u4e3a\u662f\u975e\u5e38\u706b\u7206\u7684\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728\u4e3b\u952e\u7684\u5f00\u59cb\u6216\u7ed3\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u968f\u673a\u6570\u3002\u53ea\u8981\u4e00\u4e2a\u4e24\u4f4d\u6570\u7684\u5341\u8fdb\u5236\u968f\u673a\u6570\u5c31\u53ef\u4ee5\u5c06\u4e3b\u952e\u5206\u6563\u4e3a100\u79cd\u4e0d\u540c\u7684\u4e3b\u952e,\u4ece\u800c\u5b58\u50a8\u5728\u4e0d\u540c\u7684\u5206\u533a\u4e2d\u3002 \u7136\u800c\uff0c\u5c06\u4e3b\u952e\u8fdb\u884c\u5206\u5272\u4e4b\u540e\uff0c\u4efb\u4f55\u8bfb\u53d6\u90fd\u5fc5\u987b\u8981\u505a\u989d\u5916\u7684\u5de5\u4f5c\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5fc5\u987b\u4ece\u6240\u6709100\u4e2a\u4e3b\u952e\u5206\u5e03\u4e2d\u8bfb\u53d6\u6570\u636e\u5e76\u5c06\u5176\u5408\u5e76\u3002\u6b64\u6280\u672f\u8fd8\u9700\u8981\u989d\u5916\u7684\u8bb0\u5f55\uff1a\u53ea\u9700\u8981\u5bf9\u5c11\u91cf\u70ed\u70b9\u9644\u52a0\u968f\u673a\u6570\uff1b\u5bf9\u4e8e\u5199\u5165\u541e\u5410\u91cf\u4f4e\u7684\u7edd\u5927\u591a\u6570\u4e3b\u952e\u6765\u8bf4\u662f\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u3002\u56e0\u6b64\uff0c\u60a8\u8fd8\u9700\u8981\u4e00\u4e9b\u65b9\u6cd5\u6765\u8ddf\u8e2a\u54ea\u4e9b\u952e\u9700\u8981\u88ab\u5206\u5272\u3002","title":"2.\u600e\u4e48\u5206\u533a"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%86%E5%8C%BA/#3","text":"","title":"3. \u5206\u533a\u548c\u6b21\u7ea7\u7d22\u5f15"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%86%E5%8C%BA/#31","text":"\u57fa\u4e8e\u6587\u6863\u7684\u5206\u533a document-based \u5728\u8fd9\u79cd\u7d22\u5f15\u65b9\u6cd5\u4e2d\uff0c\u6bcf\u4e2a\u5206\u533a\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff1a\u6bcf\u4e2a\u5206\u533a\u7ef4\u62a4\u81ea\u5df1\u7684\u4e8c\u7ea7\u7d22\u5f15\uff0c\u4ec5\u8986\u76d6\u8be5\u5206\u533a\u4e2d\u7684\u6587\u6863\u3002\u5b83\u4e0d\u5173\u5fc3\u5b58\u50a8\u5728\u5176\u4ed6\u5206\u533a\u7684\u6570\u636e\u3002\u65e0\u8bba\u4f55\u65f6\u60a8\u9700\u8981\u5199\u5165\u6570\u636e\u5e93\uff08\u6dfb\u52a0\uff0c\u5220\u9664\u6216\u66f4\u65b0\u6587\u6863\uff09\uff0c\u53ea\u9700\u5904\u7406\u5305\u542b\u60a8\u6b63\u5728\u7f16\u5199\u7684\u6587\u6863ID\u7684\u5206\u533a\u5373\u53ef\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c \u6587\u6863\u5206\u533a\u7d22\u5f15 \u4e5f\u88ab\u79f0\u4e3a \u672c\u5730\u7d22\u5f15\uff08local index\uff09 \u76f8\u5173\u6570\u636e\u5e93 MongoDB Elasticsearch Riak Cassndra SolrCould VoltDB \u57fa\u4e8e\u5173\u952e\u8bcd\u7684\u5206\u533a term-based \u6765\u81ea\u6240\u6709\u5206\u533a\u7684\u7ea2\u8272\u6c7d\u8f66\u5728\u7ea2\u8272\u7d22\u5f15\u4e2d\uff0c\u5e76\u4e14\u7d22\u5f15\u662f\u5206\u533a\u7684\uff0c\u9996\u5b57\u6bcd\u4ece a \u5230 r \u7684\u989c\u8272\u5728\u5206\u533a0\u4e2d\uff0c s \u5230 z \u7684\u5728\u5206\u533a1\u3002\u6c7d\u8f66\u5236\u9020\u5546\u7684\u7d22\u5f15\u4e5f\u4e0e\u4e4b\u7c7b\u4f3c\uff08\u5206\u533a\u8fb9\u754c\u5728 f \u548c h \u4e4b\u95f4\uff09 \u5173\u952e\u8bcd\u5206\u533a\u7684\u5168\u5c40\u7d22\u5f15\u4f18\u4e8e\u6587\u6863\u5206\u533a\u7d22\u5f15\u7684\u5730\u65b9\u70b9\u662f\u5b83\u53ef\u4ee5\u4f7f\u8bfb\u53d6\u66f4\u6709\u6548\u7387\uff1a\u4e0d\u9700\u8981 \u5206\u6563/\u6536\u96c6 \u6240\u6709\u5206\u533a\uff0c\u5ba2\u6237\u7aef\u53ea\u9700\u8981\u5411\u5305\u542b\u5173\u952e\u8bcd\u7684\u5206\u533a\u53d1\u51fa\u8bf7\u6c42","title":"3.1\u4e8c\u7ea7\u7d22\u5f15\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u5206\u533a"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%86%E5%8C%BA/#4","text":"","title":"4.\u5206\u533a\u518d\u5e73\u8861"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%86%E5%8C%BA/#41","text":"\u67e5\u8be2\u541e\u5410\u91cf\u589e\u52a0\uff0c\u6dfb\u52a0cpu \u6570\u636e\u96c6\u5927\u5c0f\u589e\u52a0\uff0c\u589e\u52a0\u78c1\u76d8\u548c\u5185\u5b58 \u673a\u5668\u6545\u969c \u9700\u8981\u5c06\u8bf7\u6c42\u548c\u6570\u636e\u4ece\u8282\u70b9\u8fc1\u79fb\u65b0\u8282\u70b9 \u5c06\u8d1f\u8f7d\u4ece\u96c6\u7fa4\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u5411\u53e6\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8\u7684\u8fc7\u7a0b\u79f0\u4e3a \u518d\u5e73\u8861\uff08rebalancing\uff09","title":"4.1\u9700\u8981\u5e73\u8861\u7684\u539f\u56e0"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%86%E5%8C%BA/#42","text":"Hash mod n(\u4e0d\u5efa\u8bae \u53cd\u9762) hash(key) mod 10 \u4f1a\u8fd4\u56de\u4e00\u4e2a\u4ecb\u4e8e0\u548c9\u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u6570\u636e\u5747\u5300\u5206\u5e03\u57280-9\u8282\u70b9\u4e2d\uff0c\u5982\u679c\u8282\u70b9\u589e\u52a0\u51cf\u5c11\u8fc1\u79fb\u6570\u636e\u91cf\u8fc7\u5927 \u56fa\u5b9a\u6570\u91cf\u5206\u533a Redis Cluster\u5305\u542b\u4e8616384\u4e2a\u54c8\u5e0c\u69fd\uff0c\u6bcf\u4e2aKey\u901a\u8fc7\u8ba1\u7b97\u540e\u90fd\u4f1a\u843d\u5728\u5177\u4f53\u4e00\u4e2a\u69fd\u4f4d\u4e0a\uff0c\u800c\u8fd9\u4e2a\u69fd\u4f4d\u662f\u5c5e\u4e8e\u54ea\u4e2a\u5b58\u50a8\u8282\u70b9\u7684\uff0c\u5219\u7531\u7528\u6237\u81ea\u5df1\u5b9a\u4e49\u5206\u914d\u3002 redis cluster \u5bf9\u4e8e\u69fd\u4f4d\u7684\u8f6c\u79fb\u548c\u5206\u6d3e\uff0cRedis\u96c6\u7fa4\u662f\u4e0d\u4f1a\u81ea\u52a8\u8fdb\u884c\u7684\uff0c\u800c\u662f\u9700\u8981\u4eba\u5de5\u914d\u7f6e\u7684\u3002\u6240\u4ee5Redis\u96c6\u7fa4\u7684\u9ad8\u53ef\u7528\u662f\u4f9d\u8d56\u4e8e\u8282\u70b9\u7684\u4e3b\u4ece\u590d\u5236\u4e0e\u4e3b\u4ece\u95f4\u7684\u81ea\u52a8\u6545\u969c\u8f6c\u79fb \u901a\u8fc7\u4e3a\u66f4\u5f3a\u5927\u7684\u8282\u70b9\u5206\u914d\u66f4\u591a\u7684\u5206\u533a\uff0c\u53ef\u4ee5\u5f3a\u5236\u8fd9\u4e9b\u8282\u70b9\u627f\u8f7d\u66f4\u591a\u7684\u8d1f\u8f7d\u3002\u5728Riak \u301015\u3011\uff0cElasticsearch \u301024\u3011\uff0cCouchbase \u301010\u3011\u548cVoldemort \u301025\u3011\u4e2d\u4f7f\u7528\u4e86\u8fd9\u79cd\u518d\u5e73\u8861\u7684\u65b9\u6cd5\u3002","title":"4.2 \u5e73\u8861\u7b56\u7565"},{"location":"post/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%85%AD%E7%AB%A0%E5%88%86%E5%8C%BA/#43","text":"\u670d\u52a1\u53d1\u73b0 - ZooKeeper - Espresso - HBase - SolrCould - Kafka - Etcd - Gossip - Redis Cluster - Cassandra - Riak","title":"4.3 \u518d\u5e73\u8861\u4e4b\u540e\uff0c\u6570\u636e\u8fdb\u884c\u4e86\u8282\u70b9\u95f4\u8fc1\u79fb\uff0c\u600e\u4e48\u6b63\u786e\u8def\u7531\u5ba2\u6237\u7aef\u8bf7\u6c42\u6b63\u786e\u8282\u70b9\u3002"},{"location":"post/%E6%9C%8D%E5%8A%A1%E7%A8%B3%E5%AE%9A%E6%80%A7/ELK%E7%9B%91%E6%8E%A7/","text":"\u4e00.\u76d1\u63a7\u7684\u8303\u56f4 1.1 Tracing \u63d0\u4f9b\u8be6\u7ec6\u7684\u5e94\u7528\u89c6\u56fe\uff0c\u5c06\u670d\u52a1\u8bf7\u6c42\u6267\u884c\u7684\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u90fd\u8bb0\u5f55\u4e0b\u6765\uff0c\u76d1\u6d4b\u6027\u80fd 1.2 Metrics \u68c0\u6d4b\u7cfb\u7edf\u6307\u6807:CPU\u3001\u5185\u5b58\u3001\u78c1\u76d8\u3001\u7f51\u7edc\u3001\u7cfb\u7edf\u8d1f\u8f7d 1.3 Logging \u8bb0\u5f55\u8bf7\u6c42\u3001\u9519\u8bef\u884c\u4e3a\u3001\u4e8b\u4ef6","title":"Elastic \u76d1\u63a7\u7cfb\u7edf"},{"location":"post/%E6%9C%8D%E5%8A%A1%E7%A8%B3%E5%AE%9A%E6%80%A7/ELK%E7%9B%91%E6%8E%A7/#_1","text":"","title":"\u4e00.\u76d1\u63a7\u7684\u8303\u56f4"},{"location":"post/%E6%9C%8D%E5%8A%A1%E7%A8%B3%E5%AE%9A%E6%80%A7/ELK%E7%9B%91%E6%8E%A7/#11-tracing","text":"\u63d0\u4f9b\u8be6\u7ec6\u7684\u5e94\u7528\u89c6\u56fe\uff0c\u5c06\u670d\u52a1\u8bf7\u6c42\u6267\u884c\u7684\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u90fd\u8bb0\u5f55\u4e0b\u6765\uff0c\u76d1\u6d4b\u6027\u80fd","title":"1.1 Tracing"},{"location":"post/%E6%9C%8D%E5%8A%A1%E7%A8%B3%E5%AE%9A%E6%80%A7/ELK%E7%9B%91%E6%8E%A7/#12-metrics","text":"\u68c0\u6d4b\u7cfb\u7edf\u6307\u6807:CPU\u3001\u5185\u5b58\u3001\u78c1\u76d8\u3001\u7f51\u7edc\u3001\u7cfb\u7edf\u8d1f\u8f7d","title":"1.2 Metrics"},{"location":"post/%E6%9C%8D%E5%8A%A1%E7%A8%B3%E5%AE%9A%E6%80%A7/ELK%E7%9B%91%E6%8E%A7/#13-logging","text":"\u8bb0\u5f55\u8bf7\u6c42\u3001\u9519\u8bef\u884c\u4e3a\u3001\u4e8b\u4ef6","title":"1.3 Logging"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/","text":"1. \u5206\u5e03\u5f0fID\u751f\u6210\u5668 1.1 \u5e94\u7528\u573a\u666f user_id \u5fae\u535aid msg_id \u5e16\u5b50id order_id 1.2 \u9700\u6c42 \u5168\u5c40\u552f\u4e00 \u77ed\uff0c\u8282\u7701\u5185\u5b58 \u6309\u65f6\u95f4\u7c97\u7565\u6709\u5e8f/\u6309\u65f6\u95f4\u9012\u589e \u5177\u6709\u6807\u8bc6\u6027\uff0c\u6613\u7528 1.3 \u601d\u8def \u57fa\u4e8e\u6570\u636e\u5e93\u751f\u6210 mysql 5.6 auto_increment \u7279\u6027 postgres 9.6 sequence \u7279\u6027 Flickr Ticket Servers \u57fa\u4e8e\u5206\u5e03\u5f0f\u534f\u8c03\u5668\u751f\u6210 etcd \u5f3a\u4e00\u81f4\u6027 raft \u534f\u8bae zookeeper paxos \u534f\u8bae consule gossip \u534f\u8bae \u57fa\u4e8e\u4e00\u4e2a\u7d2f\u8ba1\u503c(\u8ba1\u6570\u5668)\u5728\u4e00\u81f4\u6027\u96c6\u7fa4\u4e2d\u3002 \u5212\u5206\u547d\u540d\u7a7a\u95f4\u5e76\u884c\u751f\u6210 MongoDB objectID snowflake 1.4\u65b9\u6848 UUID MongoDB 3.3 \u7684objectid \uff0812\u5b57\u8282\uff09\u751f\u6210\u89c4\u5219\uff1a 4\u4e2a\u5b57\u8282 unix_timestamp go func getTimestamp() int64 { return time.Now().Unix() } 3\u5b57\u8282\u673a\u5668id 2\u5b57\u8282\u8fdb\u7a0bid 3\u5b57\u8282\u8ba1\u6570\u5668 MongoDB 4.0 a 4-byte timestamp value , representing the ObjectId\u2019s creation, measured in seconds since the Unix epoch 4\u4f4d\u5b57\u8282\u65f6\u95f4\u6233 a 5-byte random value 5\u5b57\u8282\u968f\u673a\u6570 a 3-byte incrementing counter , initialized to a random value 3\u5b57\u8282\u8ba1\u6570\u5668\uff0c\u521d\u59cb\u503c\u4e3a\u4e00\u4e2a\u968f\u673a\u5668 snowflake 64\u5b57\u8282 https://github.com/twitter-archive/snowflake/tree/snowflake-2010 time - 41 bits (millisecond precision w/ a custom epoch gives us 69 years) \u9ad8\u4f4d(\u5b57\u8282\u5e8f)\u65f6\u95f4\u6233 \u4fdd\u8bc1\u9519\u7565\u6709\u5e8f configured machine id - 10 bits - gives us up to 1024 machines 1024 \u673a\u5668id sequence number - 12 bits - rolls over every 4096 per machine (with protection to avoid rollover in the same ms) 12\u4f4d\u5e8f\u5217\u53f7 \u76f8\u5173\u6280\u672f\u6587\u7ae0 \u751f\u6210\u5168\u5c40\u552f\u4e00ID\u76843\u4e2a\u601d\u8def\uff0c\u6765\u81ea\u4e00\u4e2a\u8d44\u6df1\u67b6\u6784\u5e08\u7684\u603b\u7ed3 https://github.com/twitter-archive/snowflake/tree/snowflake-2010 2. \u77ed\u7f51\u5740\u7cfb\u7edf 2.1 \u5e94\u7528\u573a\u666f \u5185\u5bb9\u94fe\u63a5\u5206\u4eab\uff08\u4f1a\u6709\u5b57\u6570\u9650\u5236\uff09 \u77ed\u4fe1\u5185\u5bb9\u643a\u5e26\u94fe\u63a5 2.2 \u9700\u6c42 \u200b \u5c3d\u53ef\u80fd\u77ed 2.3 \u8bbe\u8ba1 \u957f\u5ea6 \u5f53\u524d\u4e92\u8054\u7f51\u7f51\u9875\u603b\u6570\u4e3a45\u4ebf\uff0c > 2^32 < 2^64\uff0c\u6240\u4ee5\u752864\u7684\u6574\u6570\u8db3\u591f\u4e86 \u5fae\u535a\u77ed\u7f51\u5740\u957f\u5ea6\u4e3a7\u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u770b\u505a62\u8fdb\u5236\u7684\u6570 \u957f\u5ea6\u4e0d\u8d85\u8fc77\u7684\u5b57\u7b26\u4e32\uff0c\u7531\u5927\u5c0f\u5199\u5b57\u6bcd\u52a0\u6570\u5b57\u517162\u4e2a\u5b57\u6bcd\u7ec4\u6210 \u4e00\u5bf9\u4e00\u6620\u5c04\u8fd8\u662f\u4e00\u5bf9\u591a\u6620\u5c04\uff1f \u4e00\u5bf9\u591a \u53ef\u4ee5\u6536\u96c6 Http user-agent\u4fe1\u606f\u3001\u7528\u6237\u540d\u3001\u6240\u5728\u7f51\u7ad9\u505a\u6570\u636e\u5206\u6790 \u5982\u4f55\u8ba1\u7b97\u77ed\u7f51\u5740 uuid \u751f\u751f\u6210\u65b9\u6848 \u5982\u4f55\u5b58\u50a8 \u77ed\u7f51\u5740\u4f5c\u4e3a\u4e3b\u952e\uff0c\u957f\u7f51\u5740\u4f5c\u4e3avalue mysql\u3001redis\u3001LevelDB \u8df3\u8f6c\u65f6301\u8fd8\u662f302\uff1f 301 \u6c38\u4e45\u91cd\u5b9a\u5411\uff0c\u6d4f\u89c8\u5668\u4f1a\u5b58\u50a8\u8df3\u8f6c\u4e4b\u540e\u7684\u5730\u5740\u4e0d\u5728\u8bf7\u6c42\u77ed\u5730\u5740\u670d\u52a1\u5668\uff0c\u65e0\u6cd5\u8bb0\u5f55\u8bf7\u6c42\u6570\u636e\u7edf\u8ba1 302 \u4e34\u65f6\u91cd\u5b9a\u5411 3. \u4fe1\u606f\u6d41\u5b9e\u73b0\uff0c\u5fae\u535a\u3001\u77e5\u4e4e\u9996\u9875\u3001\u63a8\u7279\u6d4f\u89c8 4. \u9650\u6d41\u5668\u5b9e\u73b0 5. \u5ef6\u8fdf\u961f\u5217(\u5b9a\u65f6\u4efb\u52a1\u8c03\u5ea6\u5668) redis \u6709\u5e8f\u96c6\u5408 \u5b9e\u73b0 \u53c2\u8003 \u6709\u8d5e\u5ef6\u8fdf\u961f\u5217\u8bbe\u8ba1 \u4efb\u52a1\u643a\u5e26\u6267\u884c\u65f6\u95f4\u6233\u5f53\u505ascore\u5b58\u50a8\u5230ZSet\uff0c\u5229\u7528\u6709\u5e8f\u96c6\u5408score\u6839\u636e\u65f6\u95f4\u6233\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u6392\u5e8f \u7136\u540eZRANGEBYSCORE \u6d88\u8d39Zset \u961f\u5217 \u53ef\u4ee5\u6839\u636e\u5ef6\u8fdf\u4efb\u52a1\u7684\u65f6\u95f4\u4e0d\u540c\u5efa\u7acb\u4e0d\u540c\u5ef6\u8fdf\u961f\u5217\uff0c\u63d0\u9ad8\u626b\u63cf\u901f\u5ea6\uff0c\u964d\u4f4e\u6d88\u606f\u5ef6\u8fdf \u65f6\u95f4\u8f6e\uff08HashedWheelTimer\uff09\u5faa\u73af\u961f\u5217 go\u5b9e\u73b0 https://www.luozhiyun.com/archives/444 Linux \u5b9a\u65f6\u5668\u5b9e\u73b0\u4e5f\u662f\u8fd9\u65b9\u6848 https://chai2010.cn/advanced-go-programming-book/ch6-cloud/readme.html 6. \u7ebf\u7a0b\u5b89\u5168 hashmap \u9501\u5206\u79bb \u8bfb\u5199\u9501\u5206\u5f00 go map+lock sync.map TODO::\u5f85\u5b8c\u5584 \u8bfb\u5199\u4e24\u4e2amap\uff0c\u9002\u5408\u5199\u5c11\u8bfb\u591a\u573a\u666f \u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u8bfbmap\u548c\u5199map \u4e0d\u540c\u51cf\u5c11 \u4e92\u65a5\u9501\u7684\u5f71\u54cd 7. \u8bbf\u95ee\u9891\u7387\u6700\u9ad8\u768410\u4e2aIP 8. \u8d1f\u8f7d\u5747\u8861\u8bbe\u8ba1 \u8f6e\u8be2 \u968f\u673a\u6570\u53d6\u6a21\u673a\u5668\u6570\u91cf hash \u5173\u952e\u4fe1\u606f \u6bd4\u5982user_id 9.KV\u5b58\u50a8\u5f15\u64ce\u8bbe\u8ba1 \u8981\u70b9\uff1a\u5185\u5b58\u968f\u673a\u5199\u751a\u81f3\u6bd4\u78c1\u76d8\u987a\u5e8f\u5199\u8981\u6162 rockdb \u7531leveldb\u8fdb\u5316\u6765\u5f97 LevelDB 9.1 LevelDB \u7ec4\u6210\u90e8\u5206 SSTable MemTable(memory table)\uff0c\u65b0\u6570\u636e\u4f1a\u5199\u5230\u8fd9\u91cc\uff0c\u7136\u540e\u6279\u91cf\u5199\u5165\u78c1\u76d8\uff0c\u4ee5\u63d0\u9ad8\u541e\u5410\u91cf WAL \u9884\u5199\u5f0f\u65e5\u5fd7(write Ahead Log) \u5199memory table \u65f6\u4f1a\u5148\u5199WAL\u65e5\u5fd7\uff0c\u5982\u679c\u673a\u5668\u6302\u6389\uff0c\u5185\u5b58\u4e2dSSTable \u4e22\u5931\uff0c\u53ef\u4ee5\u901a\u8fc7WAL\u65e5\u5fd7\u6062\u590d\u6570\u636e \u901a\u8fc7WAL\u4fdd\u8bc1\u4e8b\u52a1\u4e00\u652f\u6027 Immtable MemTable(\u4e0d\u53d8\u7684\u5185\u5b58\u8868) \u5f53\u5185\u5b58\u4e2d\u7684 MemTable\u8fbe\u5230\u6307\u5b9a\u5927\u5c0f\u540e,\u4e0d\u518d\u63a5\u6536\u6570\u636e\uff0c\u540c\u65f6\u4f1a\u6709\u65b0\u7684MemTable\u4ea7\u751f\uff0c\u65b0\u6570\u636e\u5199\u5230MemTable\uff0c\u8001\u7684MemTable\u968f\u540e\u4f1a\u5199\u5230\u78c1\u76d8\u7f16\u7a0b\u4e00\u4e2aSST\u6587\u4ef6 SSTable \u6587\u4ef6 \u78c1\u76d8\u4e0a\u7684SSTable\uff0c\u6587\u4ef6\u5c3e\u90e8\u8ffd\u52a0\u4e00\u5757\u7d22\u5f15\uff0c\u8bb0\u5f55key->offset\uff0c\u63d0\u4ea4\u968f\u673a\u8bfb\u7684\u6548\u7387 SST\u6587\u4ef6\u4e3aLevel0\u5230Level n\u591a\u5c42\uff0c\u6bcf\u4e00\u5c42\u591a\u4e2aSST\u6587\u4ef6 \u5355\u4e2aSST\u6587\u4ef6\u5bb9\u91cf\u968f\u7740\u5c42\u6b21\u589e\u52a0\u6210\u500d\u589e\u957f Level 0 \u7684SST\u6587\u4ef6 \u6709Immtable MemTable \u76f4\u63a5Dump\u4ea7\u751f\uff0c\u5176\u4ed6Level\u7684SST\u6587\u4ef6\u7531\u4e0a\u4e00\u5c42\u7684\u6587\u4ef6\u548c\u672c\u5c42\u6587\u4ef6\u5f52\u5e76\u4ea7\u751f Manifest\u6587\u4ef6 Manifest \u8bb0\u5f55SST\u6587\u4ef6\u5728\u4e0d\u540cLevel \u7684\u5206\u5e03\u3001\u5355\u4e2aSST\u6587\u4ef6\u6700\u5927\u6700\u5c0fkey\u3001\u4ee5\u53ca\u4e00\u4e9bLevel\u9700\u8981\u7684\u5143\u6570\u636e Current \u6587\u4ef6 Manifest\u53ef\u80fd\u6709\u591a\u4e2a\u3002Current\u8bb0\u5f55Manifest\u6587\u4ef6\u540d\uff0c\u8ba9LevelDB\u542f\u52a8\u65f6\u627e\u5230Manifest\uff0c\u8fdb\u800c\u52a0\u8f7dLevel\u591a\u5c42\u7684SST\u6570\u636e 9.2 LevelDB \u6838\u5fc3\u903b\u8f91 SST\u6587\u4ef6\u5c3e\u90e8\u7d22\u5f15\u8981\u653e\u5230\u5185\u5b58\u4e2d\uff0c\u8fd9\u6837\u7d22\u5f15\u5c31\u4e0d\u9700\u8981\u4e00\u6b21IO\u4e86 \u6240\u6709\u8bfb\u5148\u770bMemTable\uff0c\u6ca1\u6709\u518d\u67e5\u627e\u5185\u5b58\u4e2d\u7684\u7d22\u5f15(SST\u5c3e\u90e8\u7d22\u5f15\u653e\u5185\u5b58\u4e2d) \u6240\u6709\u5199\u64cd\u4f5c\u90fd\u5199MemTable\uff0cSST\u6587\u4ef6\u65e0\u6cd5\u4fee\u6539 \u5b9a\u671f\u628aMemTable\u5199\u5165\u78c1\u76d8\uff0c\u79f0\u4e3aSST\u6587\u4ef6\uff0c\u5e76\u65b0\u5efaMemTable\u63a5\u6536\u65b0\u6570\u636e \u5b9a\u671f\u5bf9SST\u6587\u4ef6\u5408\u5e76 SST\u4e0d\u53ef\u4fee\u6539\u7684\u8bdd\uff0c\u600e\u4e48\u66f4\u65b0\u548c\u5220\u9664\u6570\u636e \u66f4\u65b0 \u8ffd\u52a0\u65b0\u7684key-value \u5230\u6587\u4ef6\u5c3e\u90e8\uff0cSST\u6587\u4ef6\u662f\u4ece\u524d\u5f80\u540e\u8bfb\uff08\u5199\u5165\u65f6\u95f4\u6700\u8fd1\u5f80\u524d\u8bfb\uff09\uff0c\u65b0\u6570\u636e\u4f1a\u88ab\u5148\u8bfb\u5230 \u5220\u9664 \u8ffd\u52a0\u5893\u7891(tombstone)\u503c\uff0c\u8868\u793a\u5220\u9664\u8be5key\uff0c\u5728\u5b9a\u671f\u5408\u5e76SST\u6587\u4ef6\u65f6\u4e22\u5f03\u8fd9\u4e9bkey\uff0c\u65e2\u53ef\u4ee5\u5220\u9664\u5893\u7891\u503c 9.3 Manifest\u6587\u4ef6 Manifest \u8bb0\u5f55SST \u7684\u5c42\u7ea7\u3001\u6587\u4ef6\u540d\u3001\u6700\u5c0fkey \u548c\u6700\u5927key 9.4 Log \u6587\u4ef6 \u6bcf\u4e2a\u6587\u4ef6\u7531\u591a\u4e2ablock \u7ec4\u6210\uff0c\u6bcf\u4e2ablock 32k\uff0c\u8bfb\u5199\u4ee5block \u4e3a\u5355\u4f4d \u4e0b\u56fe\u67093\u4e2ablock 9.5 SSTable 9.6 MemTable MemTable \u6570\u636e\u662f\u6309key\u6709\u5e8f\u7684\uff0c\u5f53\u63d2\u5165\u6570\u636e\u65f6\uff0c\u9700\u8981\u628a\u65b0key-val \u63d2\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u4fdd\u8bc1key \u7684\u6709\u5e8f\u6027\uff1b MemTable\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u662fSkipTable\u3002 9.7 LevelDB \u589e\u5220\u6539\u67e5 \u589e \u8ffd\u52a0\u5199\u5165 \u5220 \u5893\u7891\u503c \u6539 \u8ffd\u52a0\u5199\u5165 \u67e5 MemTable+SkipTable key\u6709\u5e8f\uff0cBinarySearch \u9875\u7f13\u5b58 \u5e03\u9686\u8fc7\u6ee4\u5668 bloom filter \u5468\u671f\u6027\u5206\u5c42\u5408\u5e76","title":"\u5e38\u89c1\u7cfb\u7edf\u8bbe\u8ba1\u95ee\u9898"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#1-id","text":"","title":"1. \u5206\u5e03\u5f0fID\u751f\u6210\u5668"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#11","text":"user_id \u5fae\u535aid msg_id \u5e16\u5b50id order_id","title":"1.1 \u5e94\u7528\u573a\u666f"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#12","text":"\u5168\u5c40\u552f\u4e00 \u77ed\uff0c\u8282\u7701\u5185\u5b58 \u6309\u65f6\u95f4\u7c97\u7565\u6709\u5e8f/\u6309\u65f6\u95f4\u9012\u589e \u5177\u6709\u6807\u8bc6\u6027\uff0c\u6613\u7528","title":"1.2 \u9700\u6c42"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#13","text":"\u57fa\u4e8e\u6570\u636e\u5e93\u751f\u6210 mysql 5.6 auto_increment \u7279\u6027 postgres 9.6 sequence \u7279\u6027 Flickr Ticket Servers \u57fa\u4e8e\u5206\u5e03\u5f0f\u534f\u8c03\u5668\u751f\u6210 etcd \u5f3a\u4e00\u81f4\u6027 raft \u534f\u8bae zookeeper paxos \u534f\u8bae consule gossip \u534f\u8bae \u57fa\u4e8e\u4e00\u4e2a\u7d2f\u8ba1\u503c(\u8ba1\u6570\u5668)\u5728\u4e00\u81f4\u6027\u96c6\u7fa4\u4e2d\u3002 \u5212\u5206\u547d\u540d\u7a7a\u95f4\u5e76\u884c\u751f\u6210 MongoDB objectID snowflake","title":"1.3 \u601d\u8def"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#14","text":"UUID MongoDB 3.3 \u7684objectid \uff0812\u5b57\u8282\uff09\u751f\u6210\u89c4\u5219\uff1a 4\u4e2a\u5b57\u8282 unix_timestamp go func getTimestamp() int64 { return time.Now().Unix() } 3\u5b57\u8282\u673a\u5668id 2\u5b57\u8282\u8fdb\u7a0bid 3\u5b57\u8282\u8ba1\u6570\u5668 MongoDB 4.0 a 4-byte timestamp value , representing the ObjectId\u2019s creation, measured in seconds since the Unix epoch 4\u4f4d\u5b57\u8282\u65f6\u95f4\u6233 a 5-byte random value 5\u5b57\u8282\u968f\u673a\u6570 a 3-byte incrementing counter , initialized to a random value 3\u5b57\u8282\u8ba1\u6570\u5668\uff0c\u521d\u59cb\u503c\u4e3a\u4e00\u4e2a\u968f\u673a\u5668 snowflake 64\u5b57\u8282 https://github.com/twitter-archive/snowflake/tree/snowflake-2010 time - 41 bits (millisecond precision w/ a custom epoch gives us 69 years) \u9ad8\u4f4d(\u5b57\u8282\u5e8f)\u65f6\u95f4\u6233 \u4fdd\u8bc1\u9519\u7565\u6709\u5e8f configured machine id - 10 bits - gives us up to 1024 machines 1024 \u673a\u5668id sequence number - 12 bits - rolls over every 4096 per machine (with protection to avoid rollover in the same ms) 12\u4f4d\u5e8f\u5217\u53f7 \u76f8\u5173\u6280\u672f\u6587\u7ae0 \u751f\u6210\u5168\u5c40\u552f\u4e00ID\u76843\u4e2a\u601d\u8def\uff0c\u6765\u81ea\u4e00\u4e2a\u8d44\u6df1\u67b6\u6784\u5e08\u7684\u603b\u7ed3 https://github.com/twitter-archive/snowflake/tree/snowflake-2010","title":"1.4\u65b9\u6848"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#2","text":"","title":"2. \u77ed\u7f51\u5740\u7cfb\u7edf"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#21","text":"\u5185\u5bb9\u94fe\u63a5\u5206\u4eab\uff08\u4f1a\u6709\u5b57\u6570\u9650\u5236\uff09 \u77ed\u4fe1\u5185\u5bb9\u643a\u5e26\u94fe\u63a5","title":"2.1 \u5e94\u7528\u573a\u666f"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#22","text":"\u200b \u5c3d\u53ef\u80fd\u77ed","title":"2.2 \u9700\u6c42"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#23","text":"\u957f\u5ea6 \u5f53\u524d\u4e92\u8054\u7f51\u7f51\u9875\u603b\u6570\u4e3a45\u4ebf\uff0c > 2^32 < 2^64\uff0c\u6240\u4ee5\u752864\u7684\u6574\u6570\u8db3\u591f\u4e86 \u5fae\u535a\u77ed\u7f51\u5740\u957f\u5ea6\u4e3a7\u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u770b\u505a62\u8fdb\u5236\u7684\u6570 \u957f\u5ea6\u4e0d\u8d85\u8fc77\u7684\u5b57\u7b26\u4e32\uff0c\u7531\u5927\u5c0f\u5199\u5b57\u6bcd\u52a0\u6570\u5b57\u517162\u4e2a\u5b57\u6bcd\u7ec4\u6210 \u4e00\u5bf9\u4e00\u6620\u5c04\u8fd8\u662f\u4e00\u5bf9\u591a\u6620\u5c04\uff1f \u4e00\u5bf9\u591a \u53ef\u4ee5\u6536\u96c6 Http user-agent\u4fe1\u606f\u3001\u7528\u6237\u540d\u3001\u6240\u5728\u7f51\u7ad9\u505a\u6570\u636e\u5206\u6790 \u5982\u4f55\u8ba1\u7b97\u77ed\u7f51\u5740 uuid \u751f\u751f\u6210\u65b9\u6848 \u5982\u4f55\u5b58\u50a8 \u77ed\u7f51\u5740\u4f5c\u4e3a\u4e3b\u952e\uff0c\u957f\u7f51\u5740\u4f5c\u4e3avalue mysql\u3001redis\u3001LevelDB \u8df3\u8f6c\u65f6301\u8fd8\u662f302\uff1f 301 \u6c38\u4e45\u91cd\u5b9a\u5411\uff0c\u6d4f\u89c8\u5668\u4f1a\u5b58\u50a8\u8df3\u8f6c\u4e4b\u540e\u7684\u5730\u5740\u4e0d\u5728\u8bf7\u6c42\u77ed\u5730\u5740\u670d\u52a1\u5668\uff0c\u65e0\u6cd5\u8bb0\u5f55\u8bf7\u6c42\u6570\u636e\u7edf\u8ba1 302 \u4e34\u65f6\u91cd\u5b9a\u5411","title":"2.3 \u8bbe\u8ba1"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#3","text":"","title":"3. \u4fe1\u606f\u6d41\u5b9e\u73b0\uff0c\u5fae\u535a\u3001\u77e5\u4e4e\u9996\u9875\u3001\u63a8\u7279\u6d4f\u89c8"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#4","text":"","title":"4. \u9650\u6d41\u5668\u5b9e\u73b0"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#5","text":"redis \u6709\u5e8f\u96c6\u5408 \u5b9e\u73b0 \u53c2\u8003 \u6709\u8d5e\u5ef6\u8fdf\u961f\u5217\u8bbe\u8ba1 \u4efb\u52a1\u643a\u5e26\u6267\u884c\u65f6\u95f4\u6233\u5f53\u505ascore\u5b58\u50a8\u5230ZSet\uff0c\u5229\u7528\u6709\u5e8f\u96c6\u5408score\u6839\u636e\u65f6\u95f4\u6233\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u6392\u5e8f \u7136\u540eZRANGEBYSCORE \u6d88\u8d39Zset \u961f\u5217 \u53ef\u4ee5\u6839\u636e\u5ef6\u8fdf\u4efb\u52a1\u7684\u65f6\u95f4\u4e0d\u540c\u5efa\u7acb\u4e0d\u540c\u5ef6\u8fdf\u961f\u5217\uff0c\u63d0\u9ad8\u626b\u63cf\u901f\u5ea6\uff0c\u964d\u4f4e\u6d88\u606f\u5ef6\u8fdf \u65f6\u95f4\u8f6e\uff08HashedWheelTimer\uff09\u5faa\u73af\u961f\u5217 go\u5b9e\u73b0 https://www.luozhiyun.com/archives/444 Linux \u5b9a\u65f6\u5668\u5b9e\u73b0\u4e5f\u662f\u8fd9\u65b9\u6848 https://chai2010.cn/advanced-go-programming-book/ch6-cloud/readme.html","title":"5. \u5ef6\u8fdf\u961f\u5217(\u5b9a\u65f6\u4efb\u52a1\u8c03\u5ea6\u5668)"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#6-hashmap","text":"\u9501\u5206\u79bb \u8bfb\u5199\u9501\u5206\u5f00 go map+lock sync.map TODO::\u5f85\u5b8c\u5584 \u8bfb\u5199\u4e24\u4e2amap\uff0c\u9002\u5408\u5199\u5c11\u8bfb\u591a\u573a\u666f \u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u8bfbmap\u548c\u5199map \u4e0d\u540c\u51cf\u5c11 \u4e92\u65a5\u9501\u7684\u5f71\u54cd","title":"6. \u7ebf\u7a0b\u5b89\u5168 hashmap"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#7-10ip","text":"","title":"7. \u8bbf\u95ee\u9891\u7387\u6700\u9ad8\u768410\u4e2aIP"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#8","text":"\u8f6e\u8be2 \u968f\u673a\u6570\u53d6\u6a21\u673a\u5668\u6570\u91cf hash \u5173\u952e\u4fe1\u606f \u6bd4\u5982user_id","title":"8. \u8d1f\u8f7d\u5747\u8861\u8bbe\u8ba1"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#9kv","text":"\u8981\u70b9\uff1a\u5185\u5b58\u968f\u673a\u5199\u751a\u81f3\u6bd4\u78c1\u76d8\u987a\u5e8f\u5199\u8981\u6162 rockdb \u7531leveldb\u8fdb\u5316\u6765\u5f97 LevelDB","title":"9.KV\u5b58\u50a8\u5f15\u64ce\u8bbe\u8ba1"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#91-leveldb","text":"SSTable MemTable(memory table)\uff0c\u65b0\u6570\u636e\u4f1a\u5199\u5230\u8fd9\u91cc\uff0c\u7136\u540e\u6279\u91cf\u5199\u5165\u78c1\u76d8\uff0c\u4ee5\u63d0\u9ad8\u541e\u5410\u91cf WAL \u9884\u5199\u5f0f\u65e5\u5fd7(write Ahead Log) \u5199memory table \u65f6\u4f1a\u5148\u5199WAL\u65e5\u5fd7\uff0c\u5982\u679c\u673a\u5668\u6302\u6389\uff0c\u5185\u5b58\u4e2dSSTable \u4e22\u5931\uff0c\u53ef\u4ee5\u901a\u8fc7WAL\u65e5\u5fd7\u6062\u590d\u6570\u636e \u901a\u8fc7WAL\u4fdd\u8bc1\u4e8b\u52a1\u4e00\u652f\u6027 Immtable MemTable(\u4e0d\u53d8\u7684\u5185\u5b58\u8868) \u5f53\u5185\u5b58\u4e2d\u7684 MemTable\u8fbe\u5230\u6307\u5b9a\u5927\u5c0f\u540e,\u4e0d\u518d\u63a5\u6536\u6570\u636e\uff0c\u540c\u65f6\u4f1a\u6709\u65b0\u7684MemTable\u4ea7\u751f\uff0c\u65b0\u6570\u636e\u5199\u5230MemTable\uff0c\u8001\u7684MemTable\u968f\u540e\u4f1a\u5199\u5230\u78c1\u76d8\u7f16\u7a0b\u4e00\u4e2aSST\u6587\u4ef6 SSTable \u6587\u4ef6 \u78c1\u76d8\u4e0a\u7684SSTable\uff0c\u6587\u4ef6\u5c3e\u90e8\u8ffd\u52a0\u4e00\u5757\u7d22\u5f15\uff0c\u8bb0\u5f55key->offset\uff0c\u63d0\u4ea4\u968f\u673a\u8bfb\u7684\u6548\u7387 SST\u6587\u4ef6\u4e3aLevel0\u5230Level n\u591a\u5c42\uff0c\u6bcf\u4e00\u5c42\u591a\u4e2aSST\u6587\u4ef6 \u5355\u4e2aSST\u6587\u4ef6\u5bb9\u91cf\u968f\u7740\u5c42\u6b21\u589e\u52a0\u6210\u500d\u589e\u957f Level 0 \u7684SST\u6587\u4ef6 \u6709Immtable MemTable \u76f4\u63a5Dump\u4ea7\u751f\uff0c\u5176\u4ed6Level\u7684SST\u6587\u4ef6\u7531\u4e0a\u4e00\u5c42\u7684\u6587\u4ef6\u548c\u672c\u5c42\u6587\u4ef6\u5f52\u5e76\u4ea7\u751f Manifest\u6587\u4ef6 Manifest \u8bb0\u5f55SST\u6587\u4ef6\u5728\u4e0d\u540cLevel \u7684\u5206\u5e03\u3001\u5355\u4e2aSST\u6587\u4ef6\u6700\u5927\u6700\u5c0fkey\u3001\u4ee5\u53ca\u4e00\u4e9bLevel\u9700\u8981\u7684\u5143\u6570\u636e Current \u6587\u4ef6 Manifest\u53ef\u80fd\u6709\u591a\u4e2a\u3002Current\u8bb0\u5f55Manifest\u6587\u4ef6\u540d\uff0c\u8ba9LevelDB\u542f\u52a8\u65f6\u627e\u5230Manifest\uff0c\u8fdb\u800c\u52a0\u8f7dLevel\u591a\u5c42\u7684SST\u6570\u636e","title":"9.1 LevelDB \u7ec4\u6210\u90e8\u5206"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#92-leveldb","text":"SST\u6587\u4ef6\u5c3e\u90e8\u7d22\u5f15\u8981\u653e\u5230\u5185\u5b58\u4e2d\uff0c\u8fd9\u6837\u7d22\u5f15\u5c31\u4e0d\u9700\u8981\u4e00\u6b21IO\u4e86 \u6240\u6709\u8bfb\u5148\u770bMemTable\uff0c\u6ca1\u6709\u518d\u67e5\u627e\u5185\u5b58\u4e2d\u7684\u7d22\u5f15(SST\u5c3e\u90e8\u7d22\u5f15\u653e\u5185\u5b58\u4e2d) \u6240\u6709\u5199\u64cd\u4f5c\u90fd\u5199MemTable\uff0cSST\u6587\u4ef6\u65e0\u6cd5\u4fee\u6539 \u5b9a\u671f\u628aMemTable\u5199\u5165\u78c1\u76d8\uff0c\u79f0\u4e3aSST\u6587\u4ef6\uff0c\u5e76\u65b0\u5efaMemTable\u63a5\u6536\u65b0\u6570\u636e \u5b9a\u671f\u5bf9SST\u6587\u4ef6\u5408\u5e76 SST\u4e0d\u53ef\u4fee\u6539\u7684\u8bdd\uff0c\u600e\u4e48\u66f4\u65b0\u548c\u5220\u9664\u6570\u636e \u66f4\u65b0 \u8ffd\u52a0\u65b0\u7684key-value \u5230\u6587\u4ef6\u5c3e\u90e8\uff0cSST\u6587\u4ef6\u662f\u4ece\u524d\u5f80\u540e\u8bfb\uff08\u5199\u5165\u65f6\u95f4\u6700\u8fd1\u5f80\u524d\u8bfb\uff09\uff0c\u65b0\u6570\u636e\u4f1a\u88ab\u5148\u8bfb\u5230 \u5220\u9664 \u8ffd\u52a0\u5893\u7891(tombstone)\u503c\uff0c\u8868\u793a\u5220\u9664\u8be5key\uff0c\u5728\u5b9a\u671f\u5408\u5e76SST\u6587\u4ef6\u65f6\u4e22\u5f03\u8fd9\u4e9bkey\uff0c\u65e2\u53ef\u4ee5\u5220\u9664\u5893\u7891\u503c","title":"9.2 LevelDB \u6838\u5fc3\u903b\u8f91"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#93-manifest","text":"Manifest \u8bb0\u5f55SST \u7684\u5c42\u7ea7\u3001\u6587\u4ef6\u540d\u3001\u6700\u5c0fkey \u548c\u6700\u5927key","title":"9.3 Manifest\u6587\u4ef6"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#94-log","text":"\u6bcf\u4e2a\u6587\u4ef6\u7531\u591a\u4e2ablock \u7ec4\u6210\uff0c\u6bcf\u4e2ablock 32k\uff0c\u8bfb\u5199\u4ee5block \u4e3a\u5355\u4f4d \u4e0b\u56fe\u67093\u4e2ablock","title":"9.4 Log \u6587\u4ef6"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#95-sstable","text":"","title":"9.5 SSTable"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#96-memtable","text":"MemTable \u6570\u636e\u662f\u6309key\u6709\u5e8f\u7684\uff0c\u5f53\u63d2\u5165\u6570\u636e\u65f6\uff0c\u9700\u8981\u628a\u65b0key-val \u63d2\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u4fdd\u8bc1key \u7684\u6709\u5e8f\u6027\uff1b MemTable\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u662fSkipTable\u3002","title":"9.6 MemTable"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/#97-leveldb","text":"\u589e \u8ffd\u52a0\u5199\u5165 \u5220 \u5893\u7891\u503c \u6539 \u8ffd\u52a0\u5199\u5165 \u67e5 MemTable+SkipTable key\u6709\u5e8f\uff0cBinarySearch \u9875\u7f13\u5b58 \u5e03\u9686\u8fc7\u6ee4\u5668 bloom filter \u5468\u671f\u6027\u5206\u5c42\u5408\u5e76","title":"9.7 LevelDB \u589e\u5220\u6539\u67e5"},{"location":"post/%E6%9E%B6%E6%9E%84/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%BB%8F%E9%AA%8C/","text":"\u4e92\u8054\u7f51\u67b6\u6784\u8bbe\u8ba1\u7ecf\u9a8c https://juejin.im/entry/56d648fba633bd00565b605f \u8d28\u91cf\u6307\u6807 \u529f\u80fd \u57fa\u672c\u8981\u6c42\uff0c\u65e2\u5b9a\u7684\u4e1a\u52a1\u903b\u8f91 \u6027\u80fd \u5355\u6b21\u8bf7\u6c42\u7684\u76f8\u5e94\u65f6\u95f4 qps \u5355\u5b9e\u4f8b\u8bf7\u6c42\u5e76\u53d1\u6570 \u670d\u52a1\u6700\u5927\u5e76\u53d1\u91cf \u6269\u5c55\u6027 \u63d0\u51fa\u9700\u6c42 \u5feb\u901f\u54cd\u5e94 \u5c3d\u5feb\u4e0a\u7ebf \u8bbe\u8ba1\u8fc7\u7a0b \u786e\u5b9a\u4f5c\u7528\u57df \u6a21\u62df\u95ee\u9898 \u5ef6\u4f38\u95ee\u9898 \u9075\u5faa\u539f\u5219 \u5355\u4e00\u804c\u8d23\u539f\u5219 \u4f9d\u8d56\u5012\u7f6e\u539f\u5219 \u5f00\u95ed\u539f\u5219 \u91cc\u6c0f\u66ff\u6362\u539f\u5219 \u63a5\u53e3\u9694\u79bb\u539f\u5219 \u53c2\u8003\u53cb\u5546\u6216\u8005\u4e0e\u6709\u7ecf\u9a8c\u7684\u4ea7\u54c1\u8fd0\u8425\u6c9f\u901a\uff0c\u5927\u81f4\u4e86\u89e3\u5b58\u5728\u7684\u6269\u5c55\u6027 \u6570\u636e\u5efa\u6a21 \u5fc5\u987b\u5b57\u6bb5 created_at updated_at \u81ea\u589e id verison \u7248\u672c\u53f7\uff08\u65b9\u4fbf\u7684\u4e50\u89c2\u9501\uff09 \u4e0d\u4f7f\u7528\u5916\u952e \u5916\u952e\u7ea6\u675f\u5e26\u6765\u7684\u6570\u636e\u5b8c\u6574\u6027\u7684\u4f18\u52bf\u8fdc\u8fdc\u5c0f\u4e8e\u66f4\u65b0\u903b\u8f91\u5b9e\u73b0\u7684\u96be\u5ea6 \u4f7f\u7528 id \u4f5c\u4e3a\u8868\u5173\u8054 uuid \u8fd9\u4e2a\u5b57\u6bb5\u7528\u6237\u53ef\u80fd\u611f\u77e5 \u8868\u6709\u6ca1\u6709\u591a\u5c11\u5217\u7684\u6807\u51c6\uff1f \u5197\u4f59\u5b57\u6bb5\u662f\u5426\u6709\u5fc5\u8981\uff1f \u6211\u7684\u505a\u6cd5\u662f\u4e0d\u4f7f\u7528\uff0c\u4fdd\u6301\u539f\u6709\u7684\u8bbe\u8ba1\uff0c\u5982\u679c\u7cfb\u7edf\u771f\u7684\u6d41\u91cf\u6bd4\u8f83\u5927\uff0c\u67e5\u8be2\u6027\u80fd\u592a\u4f4e\uff0c\u53ef\u4ee5\u901a\u8fc7\u628a\u8bfb\u670d\u52a1\u4ece\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5206\u79bb(\u8fd9\u91cc\u8981\u6ce8\u610f\u4e0d\u662f\u6570\u636e\u5e93\u7684\u8bfb\u5199\u5206\u79bb) \u6a21\u5757\u5212\u5206 \u5355\u4f53\u67b6\u6784 \u5fae\u670d\u52a1\u67b6\u6784 \u5206\u5e03\u5f0f\u673a\u6784 \u5173\u952e\u6d41\u7a0b\u63cf\u8ff0 \u68c0\u67e5\u7cfb\u7edf\u67b6\u6784\u662f\u5426\u6ee1\u8db3\u9700\u6c42\u548c\u6307\u5bfc\u5f00\u53d1\u7684\u5fc5\u8981\u6761\u4ef6 ``` 1\u3001\u6709\u59cb\u6709\u7ec8\uff0c\u6d41\u7a0b\u5e94\u8be5\u662f\u4ece\u7528\u6237\u8fdb\u5165\u5e94\u7528\u5f00\u59cb\u5230\u79bb\u5f00\u5e94\u7528\u7684\u5b8c\u6574\u8fc7\u7a0b\uff0c\u6bd4\u5982\u4ea4\u6613\u7684\u8fc7\u7a0b\uff0c\u5e94\u8be5\u4ece\u7528\u6237\u5f00\u59cb\u6d4f\u89c8\u5546\u54c1\u5230\u7528\u6237\u652f\u4ed8\u6210\u529f\u8fd9\u4e00\u4e2a\u8fc7\u7a0b\u3002 2\u3001\u6d41\u7a0b\u56fe\u7a81\u51fa\u91cd\u70b9\uff0c\u6bd4\u5982\u4e0a\u9762\u4e3e\u4f8b\u7684\u4ea4\u6613\u8fc7\u7a0b\uff0c\u5e94\u8be5\u7a81\u51fa\u4ea4\u6613\u76f8\u5173\u7684\u6d41\u7a0b\u5224\u65ad\uff0c\u4e0d\u5fc5\u63cf\u8ff0\u7528\u6237\u6ce8\u518c\uff0c\u627e\u56de\u5bc6\u7801\u7b49\u8fc7\u7a0b\u3002 3\u3001\u7b80\u8981\u8bf4\u660e\uff0c\u907f\u514d\u8fc7\u4e8e\u8be6\u7ec6\uff0c\u6bd4\u5982\u4ea4\u6613\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u66f4\u65b0\u5e93\u5b58\uff0c\u4f46\u662f\u4e0d\u9700\u8981\u63cf\u8ff0\u66f4\u65b0\u5e93\u5b58\u524d\u7684\u5e93\u5b58\u6821\u9a8c\u8fd9\u4e9b\u662f\u63d0\u4ea4\u8ba2\u5355\u7684\u5185\u90e8\u5b9e\u73b0\u3002 ``` - \u6280\u672f\u9009\u578b - \u4f7f\u7528\u5e38\u7528\u7684\u6280\u672f\uff0c\u6846\u67b6 - \u4ee3\u7801\u5b9e\u73b0 - ... - \u9a8c\u6536\u6d4b\u8bd5 - ...","title":"\u9879\u76ee\u67b6\u6784\u8bbe\u8ba1\u7ecf\u9a8c"},{"location":"post/%E6%9E%B6%E6%9E%84/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%BB%8F%E9%AA%8C/#_1","text":"https://juejin.im/entry/56d648fba633bd00565b605f","title":"\u4e92\u8054\u7f51\u67b6\u6784\u8bbe\u8ba1\u7ecf\u9a8c"},{"location":"post/%E6%9E%B6%E6%9E%84/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%BB%8F%E9%AA%8C/#_2","text":"\u529f\u80fd \u57fa\u672c\u8981\u6c42\uff0c\u65e2\u5b9a\u7684\u4e1a\u52a1\u903b\u8f91 \u6027\u80fd \u5355\u6b21\u8bf7\u6c42\u7684\u76f8\u5e94\u65f6\u95f4 qps \u5355\u5b9e\u4f8b\u8bf7\u6c42\u5e76\u53d1\u6570 \u670d\u52a1\u6700\u5927\u5e76\u53d1\u91cf \u6269\u5c55\u6027 \u63d0\u51fa\u9700\u6c42 \u5feb\u901f\u54cd\u5e94 \u5c3d\u5feb\u4e0a\u7ebf","title":"\u8d28\u91cf\u6307\u6807"},{"location":"post/%E6%9E%B6%E6%9E%84/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%BB%8F%E9%AA%8C/#_3","text":"\u786e\u5b9a\u4f5c\u7528\u57df \u6a21\u62df\u95ee\u9898 \u5ef6\u4f38\u95ee\u9898 \u9075\u5faa\u539f\u5219 \u5355\u4e00\u804c\u8d23\u539f\u5219 \u4f9d\u8d56\u5012\u7f6e\u539f\u5219 \u5f00\u95ed\u539f\u5219 \u91cc\u6c0f\u66ff\u6362\u539f\u5219 \u63a5\u53e3\u9694\u79bb\u539f\u5219 \u53c2\u8003\u53cb\u5546\u6216\u8005\u4e0e\u6709\u7ecf\u9a8c\u7684\u4ea7\u54c1\u8fd0\u8425\u6c9f\u901a\uff0c\u5927\u81f4\u4e86\u89e3\u5b58\u5728\u7684\u6269\u5c55\u6027 \u6570\u636e\u5efa\u6a21 \u5fc5\u987b\u5b57\u6bb5 created_at updated_at \u81ea\u589e id verison \u7248\u672c\u53f7\uff08\u65b9\u4fbf\u7684\u4e50\u89c2\u9501\uff09 \u4e0d\u4f7f\u7528\u5916\u952e \u5916\u952e\u7ea6\u675f\u5e26\u6765\u7684\u6570\u636e\u5b8c\u6574\u6027\u7684\u4f18\u52bf\u8fdc\u8fdc\u5c0f\u4e8e\u66f4\u65b0\u903b\u8f91\u5b9e\u73b0\u7684\u96be\u5ea6 \u4f7f\u7528 id \u4f5c\u4e3a\u8868\u5173\u8054 uuid \u8fd9\u4e2a\u5b57\u6bb5\u7528\u6237\u53ef\u80fd\u611f\u77e5 \u8868\u6709\u6ca1\u6709\u591a\u5c11\u5217\u7684\u6807\u51c6\uff1f \u5197\u4f59\u5b57\u6bb5\u662f\u5426\u6709\u5fc5\u8981\uff1f \u6211\u7684\u505a\u6cd5\u662f\u4e0d\u4f7f\u7528\uff0c\u4fdd\u6301\u539f\u6709\u7684\u8bbe\u8ba1\uff0c\u5982\u679c\u7cfb\u7edf\u771f\u7684\u6d41\u91cf\u6bd4\u8f83\u5927\uff0c\u67e5\u8be2\u6027\u80fd\u592a\u4f4e\uff0c\u53ef\u4ee5\u901a\u8fc7\u628a\u8bfb\u670d\u52a1\u4ece\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u5206\u79bb(\u8fd9\u91cc\u8981\u6ce8\u610f\u4e0d\u662f\u6570\u636e\u5e93\u7684\u8bfb\u5199\u5206\u79bb) \u6a21\u5757\u5212\u5206 \u5355\u4f53\u67b6\u6784 \u5fae\u670d\u52a1\u67b6\u6784 \u5206\u5e03\u5f0f\u673a\u6784 \u5173\u952e\u6d41\u7a0b\u63cf\u8ff0 \u68c0\u67e5\u7cfb\u7edf\u67b6\u6784\u662f\u5426\u6ee1\u8db3\u9700\u6c42\u548c\u6307\u5bfc\u5f00\u53d1\u7684\u5fc5\u8981\u6761\u4ef6 ``` 1\u3001\u6709\u59cb\u6709\u7ec8\uff0c\u6d41\u7a0b\u5e94\u8be5\u662f\u4ece\u7528\u6237\u8fdb\u5165\u5e94\u7528\u5f00\u59cb\u5230\u79bb\u5f00\u5e94\u7528\u7684\u5b8c\u6574\u8fc7\u7a0b\uff0c\u6bd4\u5982\u4ea4\u6613\u7684\u8fc7\u7a0b\uff0c\u5e94\u8be5\u4ece\u7528\u6237\u5f00\u59cb\u6d4f\u89c8\u5546\u54c1\u5230\u7528\u6237\u652f\u4ed8\u6210\u529f\u8fd9\u4e00\u4e2a\u8fc7\u7a0b\u3002 2\u3001\u6d41\u7a0b\u56fe\u7a81\u51fa\u91cd\u70b9\uff0c\u6bd4\u5982\u4e0a\u9762\u4e3e\u4f8b\u7684\u4ea4\u6613\u8fc7\u7a0b\uff0c\u5e94\u8be5\u7a81\u51fa\u4ea4\u6613\u76f8\u5173\u7684\u6d41\u7a0b\u5224\u65ad\uff0c\u4e0d\u5fc5\u63cf\u8ff0\u7528\u6237\u6ce8\u518c\uff0c\u627e\u56de\u5bc6\u7801\u7b49\u8fc7\u7a0b\u3002 3\u3001\u7b80\u8981\u8bf4\u660e\uff0c\u907f\u514d\u8fc7\u4e8e\u8be6\u7ec6\uff0c\u6bd4\u5982\u4ea4\u6613\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u66f4\u65b0\u5e93\u5b58\uff0c\u4f46\u662f\u4e0d\u9700\u8981\u63cf\u8ff0\u66f4\u65b0\u5e93\u5b58\u524d\u7684\u5e93\u5b58\u6821\u9a8c\u8fd9\u4e9b\u662f\u63d0\u4ea4\u8ba2\u5355\u7684\u5185\u90e8\u5b9e\u73b0\u3002 ``` - \u6280\u672f\u9009\u578b - \u4f7f\u7528\u5e38\u7528\u7684\u6280\u672f\uff0c\u6846\u67b6 - \u4ee3\u7801\u5b9e\u73b0 - ... - \u9a8c\u6536\u6d4b\u8bd5 - ...","title":"\u8bbe\u8ba1\u8fc7\u7a0b"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F/raft/","text":"Raft \u5171\u8bc6\u7b97\u6cd5 \u4e00.\u76f8\u5173\u9879\u76ee Etcd \u4e3a\u4ec0\u4e48\u4e0d\u5927\u6570\u636e\u91cf\u7684\u5b58\u50a8\uff1f Consule \u4e3a\u4ec0\u4e48\u63d0\u4f9b3\u79cd\u4e00\u81f4\u6027\u6a21\u5f0f\uff1f default consistent stale Tikv \u5927\u6570\u636e\u91cf\u5b9e\u73b0 multi raft\uff1f \u4e8c.\u57fa\u672c\u6982\u5ff5 \u6295\u7968\u673a\u5236\u5b9e\u73b0\u5bb9\u9519\u548c\u5171\u8bc6 raft\u96c6\u7fa4\u7684\u64cd\u4f5c\u79f0\u4e3a\u63d0\u6848\uff0c\u6bcf\u4e00\u4e2a\u63d0\u6848\uff0c\u5fc5\u987b>n/2 \u8282\u70b9\u540c\u610f\u624d\u80fd\u63d0\u4ea4 raft\u89d2\u8272 Leader Follower Candidate","title":"raft"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F/raft/#raft","text":"\u5171\u8bc6\u7b97\u6cd5","title":"Raft"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F/raft/#_1","text":"Etcd \u4e3a\u4ec0\u4e48\u4e0d\u5927\u6570\u636e\u91cf\u7684\u5b58\u50a8\uff1f Consule \u4e3a\u4ec0\u4e48\u63d0\u4f9b3\u79cd\u4e00\u81f4\u6027\u6a21\u5f0f\uff1f default consistent stale Tikv \u5927\u6570\u636e\u91cf\u5b9e\u73b0 multi raft\uff1f","title":"\u4e00.\u76f8\u5173\u9879\u76ee"},{"location":"post/%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F/raft/#_2","text":"\u6295\u7968\u673a\u5236\u5b9e\u73b0\u5bb9\u9519\u548c\u5171\u8bc6 raft\u96c6\u7fa4\u7684\u64cd\u4f5c\u79f0\u4e3a\u63d0\u6848\uff0c\u6bcf\u4e00\u4e2a\u63d0\u6848\uff0c\u5fc5\u987b>n/2 \u8282\u70b9\u540c\u610f\u624d\u80fd\u63d0\u4ea4 raft\u89d2\u8272 Leader Follower Candidate","title":"\u4e8c.\u57fa\u672c\u6982\u5ff5"}]}